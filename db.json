{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"source/asset/images/default-bg.jpg","path":"asset/images/default-bg.jpg","modified":0,"renderable":0},{"_id":"source/asset/images/cat.png","path":"asset/images/cat.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/about/index.md","hash":"e653386f4603f9ac2f52a75fd77987b4d85030f8","modified":1676772417394},{"_id":"source/_posts/early/ 基于像素识别的连连看辅助-基于像素识别的连连看辅助.md","hash":"b7d74ca46c7d1271ade2d4f6713e9814418fddfd","modified":1676775324000},{"_id":"source/_posts/early/C# 中的、 、.、[]、、=和as-c中的和as.md","hash":"cd4d7e4adcdfeb97e244ff5523e927544d17f01a","modified":1676775324000},{"_id":"source/_posts/early/Mysql-双机热备-mysql-双机热备.md","hash":"1fa4c425b7353e300c989b4358d5098e3f071792","modified":1676862363861},{"_id":"source/_posts/early/SQL查询表中是否存在符合条件的记录-sql查询表中是否存在符合条件的记录.md","hash":"ee422de25b467702810f4608d9fb76e32efb1b6c","modified":1676775324000},{"_id":"source/_posts/early/SQL根据不同的条件查询count-sql根据不同的条件查询count.md","hash":"35e6c87371a3c9a37d74a879f4a7054e7faf0cab","modified":1676775324000},{"_id":"source/_posts/early/SVN的使用及代码合并.md","hash":"688ce25ed3478c5f6dad677c788ff26393791dc9","modified":1676862594334},{"_id":"source/_posts/early/SpringBoot Web项目开发(一) 环境搭建-springbootweb项目开发一环境搭建.md","hash":"6c38bd5acd8779fd54d7530b02a60628e3dac5e1","modified":1676861591723},{"_id":"source/_posts/early/Vue项目在Nginx非root目录下部署的问题.md","hash":"5cfe5d56b147f6746e11712d7e46e17707e2cb4e","modified":1676862660807},{"_id":"source/_posts/early/springbootweb项目开发二工程结构.md","hash":"c3842c670a526f4eb1f1b8f9e1658ff7476cca54","modified":1676862421432},{"_id":"source/_posts/early/sqliteattach和detach.md","hash":"ae80468738a624fe841356055ccb52ab46333193","modified":1676862525075},{"_id":"source/_posts/early/为什么要写博客-为什么要写博客.md","hash":"abedbcc4d6636f13aff3cd05240f30f4a6e4543f","modified":1676775324000},{"_id":"source/_posts/early/关于数据结构的一些想法-guan-yu-shu-ju-jie-gou-de-yi-xie-xiang-fa.md","hash":"66e326e4e097928a37dbc6efdf002e1467a016c4","modified":1676775324000},{"_id":"source/_posts/early/关于计算机的Boot.md","hash":"79488d8388b940036f0dacdc6abd140b6ea01eb4","modified":1676861941728},{"_id":"source/_posts/early/好用的软件收集-好用的软件收集.md","hash":"5b4adeeed0585a2386a2fa359507a0962314a407","modified":1676775324000},{"_id":"source/_posts/early/数据结构--栈.md","hash":"eac980f709460bf3648985909e3db5c1ac06e3ad","modified":1676863131759},{"_id":"source/_posts/early/数据结构-链表.md","hash":"970a123dd5734131dfdebf65396d18ce84581eac","modified":1676862240355},{"_id":"source/_posts/early/编码算法-bian-ma-suan-fa.md","hash":"edcc1abbe41a32074e437c364b4b563e5757c240","modified":1676775324000},{"_id":"source/_posts/early/编程的乐趣-编程的乐趣.md","hash":"dc00ac7b616ae6a9ad4496eeb943523a8fb04b3c","modified":1676775324000},{"_id":"source/_posts/early/计算机中的会话(Session)-ji-suan-ji-zhong-de-hui-hua-session.md","hash":"33b4bff3bd5ee5325574bda1e860925df7f135ed","modified":1676775324000},{"_id":"source/_posts/early/记一次离奇的网络瘫痪.md","hash":"d1533e53b4e25399b11c0fe7b007207976621939","modified":1676862061624},{"_id":"source/_posts/early/Mysql-双机热备/33e2a5a631164c121e05e5fb3b922534-0ef7b2-1610094861.jpeg","hash":"0a054820415de67d8acb2859fe1b6186cdc98e23","modified":1676855938640},{"_id":"source/_posts/early/Mysql-双机热备/c87432de99adf6d978e6d863256606ac-ffa581-1610094856.jpeg","hash":"048f3d1c03ed1c4e3f869c106bff948eb2801b15","modified":1676855943130},{"_id":"source/_posts/early/Mysql-双机热备/efc3cc448668a197371dc3b9b2bf0a39-87e9c4-1610094876.jpeg","hash":"319e084eba4b5f8aefe67719eec4fbebeb8cde63","modified":1676855944986},{"_id":"source/_posts/early/SVN的使用及代码合并/76063b91901bf8a4bfe859dde2898c7b-3dae24-1610094773.png","hash":"25dbb9b749bccb8c6c6360915c6d35bc1d96114e","modified":1676855940914},{"_id":"source/_posts/early/SVN的使用及代码合并/d48d1fa265fd71a1f8f9515e0125b963-112214-1610094767.png","hash":"186897763299da17fb5f7acf2bf753c4a4b7d3c8","modified":1676855944022},{"_id":"source/_posts/early/Vue项目在Nginx非root目录下部署的问题/009501e2311bca14f237f5d30a9f8ac2-378b44-1610095800.png","hash":"436f7121029c55859531da8ebdf7fbfacc35a46b","modified":1676855936544},{"_id":"source/_posts/early/Vue项目在Nginx非root目录下部署的问题/f48c4c3cab9bf32d52e1043e5341c724-54d547-1610095811.png","hash":"eb99da513fef96c2e659f31620479a1af07f7778","modified":1676855945541},{"_id":"source/_posts/early/sqliteattach和detach/2c09e4b145e3277cd3158227524bda29-18f894-1610094731.png","hash":"54bd4098957da21214ab06d6b8a6e705c38a2fb0","modified":1676855938088},{"_id":"source/_posts/early/springbootweb项目开发二工程结构/image-9b8189d3e15f07574698cf9232d72c34-bb380d-1610093408.png","hash":"e9a96d1c34ca51357185b147099cc5847bb33000","modified":1676855947455},{"_id":"source/_posts/early/sqliteattach和detach/484fbfae2091eca9b1211cead74bf72e-e3a9f9-1610094740.png","hash":"bdc1a083d2f935f8c7588a2514df7dc6b6752c07","modified":1676855939664},{"_id":"source/_posts/early/sqliteattach和detach/70b3338d971672a212404a0d8a3e1aae-63131e-1610094720.png","hash":"f487e7202cec5306d00dffb846d135c239da4a0d","modified":1676855940370},{"_id":"source/_posts/early/sqliteattach和detach/f208d5e5ce8e1fcec42f85b52ed231be-98f0dd-1610094747.png","hash":"fa59be13c01679876cc18a0fb9369de43f253cf2","modified":1676855945370},{"_id":"source/_posts/early/关于计算机的Boot/b864d20e64f6e15e211f6017b3af5981-d3c0bd-1610095362.png","hash":"db23ce90de1026933beefdc5d9c90de7e4d40d27","modified":1676855942889},{"_id":"source/_posts/early/数据结构--栈/48e758395b3246ce9032c9bb63a6ec99-0737d7-1610094343.jpeg","hash":"584bc94e20dc2bd16f50f1efc8e1bf0ff38556e6","modified":1676855939788},{"_id":"source/_posts/early/数据结构--栈/747f75b76bb2b72be3e5413826fd1c3c-c86e9a-1610094817.jpeg","hash":"9489921e2d55cbe0750294bbd48da239c6713636","modified":1676855940770},{"_id":"source/_posts/early/数据结构-链表/Memory.jpg","hash":"51a658752da973092ab62bfaebaff3f4d6d82b95","modified":1676855941590},{"_id":"source/_posts/early/数据结构-链表/Insert.jpg","hash":"7f97db3c3f111067018467f8afefa5adb0348a1b","modified":1676855941486},{"_id":"source/_posts/early/数据结构-链表/Node-cf7df3e42588b5b990f72608ca0fd257-cd4fc8-1610089027.jpeg","hash":"2882236e404d35992cf902439690c8f43ae682c9","modified":1676855941707},{"_id":"source/_posts/early/数据结构-链表/cycleList.jpg","hash":"a0ed7faf6bcbfb7b539b04a18c9a971e080f8446","modified":1676855943817},{"_id":"source/_posts/early/数据结构-链表/delete-d9814b52ffbb9a97cf928c54c7395c43-ca62e2-1610089087.jpeg","hash":"edb725bc9af2ec71e9b4bae17a53fd7387e8f3ee","modified":1676855944272},{"_id":"source/_posts/early/数据结构-链表/delete.jpg","hash":"edb725bc9af2ec71e9b4bae17a53fd7387e8f3ee","modified":1676855944508},{"_id":"source/_posts/early/数据结构-链表/doubleNode.jpg","hash":"58db6fdac447c25ed986261f22b3b270869f4cd9","modified":1676855944765},{"_id":"source/_posts/early/记一次离奇的网络瘫痪/039c7638b4cb69ebe053494d43248011-ef9a80-1610094927.png","hash":"2ba0fcefbe1a5a54e7f03eafc01eabf8d0d8afe3","modified":1676855936750},{"_id":"source/_posts/early/记一次离奇的网络瘫痪/0bf5b4b02e59c95b0b37017eee894f00-ce4604-1610094903.png","hash":"eb1281c7764761d16786e753e04cb701e453eb92","modified":1676855936851},{"_id":"source/_posts/early/assets/img/%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87-72ffe1f38e8c7d764c11b2e71e8cbe6e-f24a62-1610093603.jpeg","hash":"009ad98baf401c7e209311f8c501d3d64b3725a4","modified":1676855936184},{"_id":"source/_posts/early/assets/img/%E6%96%AD%E7%BD%91%E4%BA%86-1ec51f1dc86040209bd4d8cb9d518236-c483bc-1610093442.jpeg","hash":"232687435c1e0935c6941958d818748c80e57508","modified":1676855936306},{"_id":"source/_posts/early/assets/img/009501e2311bca14f237f5d30a9f8ac2-90cbdf-1610095790.png","hash":"436f7121029c55859531da8ebdf7fbfacc35a46b","modified":1676855936642},{"_id":"source/_posts/early/assets/img/15e0f803ddf471377539fa5e934d03fe-27b55c-1610095183.jpeg","hash":"5eee4df72a81f7c8a0480f0fd9c87fbd5ca6b61a","modified":1676855936950},{"_id":"source/_posts/early/assets/img/1ee29cf3c4d5115cbb2a0b3aa51d16d6-403d93-1610096288.png","hash":"afc69f8bdfe58bf106663b3d314e7ae75fd20a7d","modified":1676855937143},{"_id":"source/_posts/early/assets/img/15e0f803ddf471377539fa5e934d03fe-4b5e8f-1610093862.jpeg","hash":"5eee4df72a81f7c8a0480f0fd9c87fbd5ca6b61a","modified":1676855937042},{"_id":"source/_posts/early/assets/img/20f6f17e942fb1b429692747769fea34-032e2b-1610094612.jpeg","hash":"6a508d0b01118b9cad5dbc736d380b59f7f7fdad","modified":1676855937462},{"_id":"source/_posts/early/assets/img/2c09e4b145e3277cd3158227524bda29-193780-1610094623.png","hash":"54bd4098957da21214ab06d6b8a6e705c38a2fb0","modified":1676855938189},{"_id":"source/_posts/early/assets/img/33e2a5a631164c121e05e5fb3b922534-4f50b7-1610093727.jpeg","hash":"0a054820415de67d8acb2859fe1b6186cdc98e23","modified":1676855938904},{"_id":"source/_posts/early/assets/img/3e0543626d77a54996b9b7272314f562-7cb125-1610094343.jpeg","hash":"fe1ed737a90408ff2cab81e787a03526b72d8a1d","modified":1676855939098},{"_id":"source/_posts/early/assets/img/4621f8163943256ef1606088336076b9-a781f4-1610094543.jpeg","hash":"0d84e5a237eebf32eb28d291ff0f5dbefe1b598d","modified":1676855939251},{"_id":"source/_posts/early/assets/img/467c87c241e6ce563509cd39c25f4753-7db28a-1610094331.jpeg","hash":"bda84523262f7792eecc1c96feaf1aa7f9c157b4","modified":1676855939403},{"_id":"source/_posts/early/assets/img/484fbfae2091eca9b1211cead74bf72e-2325ae-1610094623.png","hash":"bdc1a083d2f935f8c7588a2514df7dc6b6752c07","modified":1676855939552},{"_id":"source/_posts/early/assets/img/48e758395b3246ce9032c9bb63a6ec99-0737d7-1610094343.jpeg","hash":"584bc94e20dc2bd16f50f1efc8e1bf0ff38556e6","modified":1676855939788},{"_id":"source/_posts/early/assets/img/60954041c4d3fc4ddf7ae17644250700-29267e-1610093891.jpeg","hash":"2fc62a76d495212c3eb6e744165c8c91e1a7af15","modified":1676855940104},{"_id":"source/_posts/early/assets/img/70b3338d971672a212404a0d8a3e1aae-16e933-1610094623.png","hash":"f487e7202cec5306d00dffb846d135c239da4a0d","modified":1676855940222},{"_id":"source/_posts/early/assets/img/72ffe1f38e8c7d764c11b2e71e8cbe6e-f51a5b-1610093716.jpeg","hash":"009ad98baf401c7e209311f8c501d3d64b3725a4","modified":1676855940488},{"_id":"source/_posts/early/assets/img/747f75b76bb2b72be3e5413826fd1c3c-c86e9a-1610094817.jpeg","hash":"9489921e2d55cbe0750294bbd48da239c6713636","modified":1676855940770},{"_id":"source/_posts/early/assets/img/747f75b76bb2b72be3e5413826fd1c3c-a44144-1610094343.jpeg","hash":"9489921e2d55cbe0750294bbd48da239c6713636","modified":1676855940634},{"_id":"source/_posts/early/assets/img/76063b91901bf8a4bfe859dde2898c7b-d29cfc-1610094552.png","hash":"25dbb9b749bccb8c6c6360915c6d35bc1d96114e","modified":1676855941037},{"_id":"source/_posts/early/assets/img/Insert-5f4b05a6aa2203285e84ba4ef60cd42e-c0da8f-1610089058.jpeg","hash":"7f97db3c3f111067018467f8afefa5adb0348a1b","modified":1676855941371},{"_id":"source/_posts/early/assets/img/SpringBoot-Top-43ab1afcdde7413f04ff3f0337c565a1-7a14d8-1610093395.jpeg","hash":"ee1caf1265b4cffc077ee7641ee69f978ed5ec81","modified":1676855941883},{"_id":"source/_posts/early/assets/img/SpringBoot-Top-43ab1afcdde7413f04ff3f0337c565a1-d709b7-1610093004.jpeg","hash":"ee1caf1265b4cffc077ee7641ee69f978ed5ec81","modified":1676855942038},{"_id":"source/_posts/early/assets/img/Top-1-54a8265449e3e31601766b3d82fe596d-4a9033-1610091191.jpeg","hash":"98388d1f621844e742e593e5121728d235492fd3","modified":1676855942173},{"_id":"source/_posts/early/assets/img/Top-6ca3b669d47b70d4aec4040a027b28e2-10f279-1610090973.jpeg","hash":"a38b1606a425b50e61614c7884912a8ea26f070c","modified":1676855942354},{"_id":"source/_posts/early/assets/img/b5b65854c341d8899720b0cc199860e2-4c4323-1610094933.gif","hash":"85c0eaf20787bb75de971e34b1ce1b5d914f7b7a","modified":1676855942474},{"_id":"source/_posts/early/assets/img/b5b65854c341d8899720b0cc199860e2-541776-1610094912.gif","hash":"85c0eaf20787bb75de971e34b1ce1b5d914f7b7a","modified":1676855942587},{"_id":"source/_posts/early/assets/img/b864d20e64f6e15e211f6017b3af5981-d3c0bd-1610095362.png","hash":"db23ce90de1026933beefdc5d9c90de7e4d40d27","modified":1676855942889},{"_id":"source/_posts/early/assets/img/c87432de99adf6d978e6d863256606ac-76ac44-1610093727.jpeg","hash":"048f3d1c03ed1c4e3f869c106bff948eb2801b15","modified":1676855943013},{"_id":"source/_posts/early/assets/img/cycleList-03ae896fb9529b9f61845e6a1b1b618f-d0c43c-1610089058.jpeg","hash":"a0ed7faf6bcbfb7b539b04a18c9a971e080f8446","modified":1676855943597},{"_id":"source/_posts/early/assets/img/cycleList.jpg","hash":"a0ed7faf6bcbfb7b539b04a18c9a971e080f8446","modified":1676855943817},{"_id":"source/_posts/early/assets/img/d48d1fa265fd71a1f8f9515e0125b963-3c0dc9-1610094552.png","hash":"186897763299da17fb5f7acf2bf753c4a4b7d3c8","modified":1676855944136},{"_id":"source/_posts/early/assets/img/delete-d9814b52ffbb9a97cf928c54c7395c43-fa483c-1610089058.jpeg","hash":"edb725bc9af2ec71e9b4bae17a53fd7387e8f3ee","modified":1676855944403},{"_id":"source/_posts/early/assets/img/doubleNode-fb1166f7a7b9b9837d7980d23030896b-aaf5b3-1610089058.jpeg","hash":"58db6fdac447c25ed986261f22b3b270869f4cd9","modified":1676855944637},{"_id":"source/_posts/early/assets/img/doubleNode.jpg","hash":"58db6fdac447c25ed986261f22b3b270869f4cd9","modified":1676855944765},{"_id":"source/_posts/early/assets/img/efc3cc448668a197371dc3b9b2bf0a39-83fa05-1610093727.jpeg","hash":"319e084eba4b5f8aefe67719eec4fbebeb8cde63","modified":1676855944874},{"_id":"source/_posts/early/assets/img/f208d5e5ce8e1fcec42f85b52ed231be-6fd0c1-1610094623.png","hash":"fa59be13c01679876cc18a0fb9369de43f253cf2","modified":1676855945254},{"_id":"source/_posts/early/assets/img/f48c4c3cab9bf32d52e1043e5341c724-f3a794-1610095790.png","hash":"eb99da513fef96c2e659f31620479a1af07f7778","modified":1676855945704},{"_id":"source/_posts/early/assets/img/image-1-0bf5b4b02e59c95b0b37017eee894f00-0d75d6-1610093456.png","hash":"eb1281c7764761d16786e753e04cb701e453eb92","modified":1676855945838},{"_id":"source/_posts/early/assets/img/image-2-039c7638b4cb69ebe053494d43248011-881713-1610093456.png","hash":"2ba0fcefbe1a5a54e7f03eafc01eabf8d0d8afe3","modified":1676855945972},{"_id":"source/_posts/early/assets/img/image-2-c01e335af8aa7df297d410e301476c8e-6bfc6e-1610093103.png","hash":"cc73f9a62558730bf6c8cea989123d828ca30566","modified":1676855946087},{"_id":"source/_posts/early/assets/img/image-2-c01e335af8aa7df297d410e301476c8e-856741-1610093018.png","hash":"cc73f9a62558730bf6c8cea989123d828ca30566","modified":1676855946205},{"_id":"source/_posts/early/assets/img/image-3-a14b40a6b746c315bd60a322a18f30d8-637683-1610093023.png","hash":"8ca5dace47cca02f758982b5a8c01fa4e3ffdc3c","modified":1676855946354},{"_id":"source/_posts/early/assets/img/image-3-a14b40a6b746c315bd60a322a18f30d8-e798c4-1610093115.png","hash":"8ca5dace47cca02f758982b5a8c01fa4e3ffdc3c","modified":1676855946471},{"_id":"source/_posts/early/assets/img/image-4-bb52f36d371102cd655b6af50120313b-daf210-1610093016.png","hash":"0da47ed7e5fa273fc13385da9a56dbbc8975c6cd","modified":1676855946747},{"_id":"source/_posts/early/assets/img/image-4-bb52f36d371102cd655b6af50120313b-ec34aa-1610093175.png","hash":"0da47ed7e5fa273fc13385da9a56dbbc8975c6cd","modified":1676855946904},{"_id":"source/_posts/early/assets/img/image-5-405e8a29a3dee94754f21af3747a0b87-4cd8ff-1610093023.png","hash":"9e3c69ba6269bcd8a147f3503818a6c40fddbc68","modified":1676855947037},{"_id":"source/_posts/early/assets/img/timg-b5b65854c341d8899720b0cc199860e2-f1346a-1610093456.gif","hash":"85c0eaf20787bb75de971e34b1ce1b5d914f7b7a","modified":1676855947570},{"_id":"source/_posts/early/assets/img/timg-b5b65854c341d8899720b0cc199860e2-fd3d2b-1610093456.gif","hash":"85c0eaf20787bb75de971e34b1ce1b5d914f7b7a","modified":1676855947688},{"_id":"source/_posts/early/assets/img/image-6f86f7b3534efc8beea3605a38cbbf89-32d792-1610093023.png","hash":"a2b828accbf556b4e5bc90b0d38ce2d17bffcd56","modified":1676855947188},{"_id":"source/_posts/early/assets/img/image-6f86f7b3534efc8beea3605a38cbbf89-603c10-1610093064.png","hash":"a2b828accbf556b4e5bc90b0d38ce2d17bffcd56","modified":1676855947340},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1676772054536},{"_id":"source/asset/images/default-bg.jpg","hash":"202d824bf6cc3ed83fc143d2b90f4995bc42886e","modified":1676772704552},{"_id":"source/_posts/early/关于计算机的Boot/2d1575284cf52f1871bd04a7cf2d75b4-5a96bb-1610095398.png","hash":"89d79324fc3387991c4a6650f4f75847f715181a","modified":1676855938346},{"_id":"source/_posts/early/assets/img/28cfbc3eb13533fa19897847aed3fd1f41345bb7_1631537579592.jpg","hash":"28f17f394b3e6957c7bad3ca02dc56f1436d4561","modified":1676855937595},{"_id":"source/_posts/early/assets/img/28cfbc3eb13533fa19897847aed3fd1f41345bb7_1631537586689.jpg","hash":"28f17f394b3e6957c7bad3ca02dc56f1436d4561","modified":1676855937725},{"_id":"source/_posts/early/assets/img/28cfbc3eb13533fa19897847aed3fd1f41345bb7_1631537897301.jpg","hash":"28f17f394b3e6957c7bad3ca02dc56f1436d4561","modified":1676855937900},{"_id":"source/_posts/early/assets/img/2d1575284cf52f1871bd04a7cf2d75b4-5a96bb-1610095398.png","hash":"89d79324fc3387991c4a6650f4f75847f715181a","modified":1676855938346},{"_id":"source/_posts/early/assets/img/2d1575284cf52f1871bd04a7cf2d75b4-dc5be5-1610095364.png","hash":"89d79324fc3387991c4a6650f4f75847f715181a","modified":1676855938502},{"_id":"source/_posts/early/assets/img/f0ce454608ca058b23df70bc78803e0b-766565-1610097063.png","hash":"52c68f26aaf9320750cdc2c059da0802bfeab6d2","modified":1676855945132},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1676772054403},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1676772054493},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"088788e149051fc0a3c6096ba95e35a8344de04b","modified":1676772054540},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"30e3f4ccfef8474c05cf0b1eb02e91bd0a152807","modified":1676772054493},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1676772054541},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1676772054543},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1676772054542},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1676772054543},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1676772054544},{"_id":"node_modules/hexo-theme-fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1676772054545},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1676772054548},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1676772054406},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1676772054549},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1676772054407},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1676772054547},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1676772054411},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1676772054415},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1676772054433},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1676772054433},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1676772054419},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1676772054434},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1676772054443},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1676772054442},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1676772054449},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1676772054450},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1676772054411},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1676772054418},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1676772054419},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1676772054421},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1676772054426},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1676772054431},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1676772054429},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1676772054431},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1676772054435},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1676772054442},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1676772054444},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1676772054445},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1676772054475},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1676772054469},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1676772054482},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1676772054486},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1676772054480},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1676772054485},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1676772054468},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1676772054469},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1676772054475},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1676772054476},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1676772054471},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1676772054484},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1676772054488},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1676772054489},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1676772054490},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1676772054492},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1676772054460},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1676772054462},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1676772054472},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1676772054483},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1676772054477},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1676772054483},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1676772054464},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1676772054487},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1676772054484},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1676772054488},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1676772054405},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1676772054522},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1676772054523},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1676772054528},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1676772054494},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1676772054503},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1676772054459},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1676772054505},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1676772054460},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1676772054463},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1676772054474},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1676772054470},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1676772054479},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1676772054486},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1676772054481},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1676772054492},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1676772054538},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1676772054420},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1676772054427},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1676772054428},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1676772054430},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1676772054430},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1676772054434},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1676772054444},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1676772054451},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1676772054454},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1676772054452},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1676772054455},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1676772054413},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1676772054449},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1676772054412},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1676772054441},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1676772054409},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1676772054409},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1676772054421},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1676772054428},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1676772054429},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1676772054432},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1676772054435},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1676772054436},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1676772054441},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1676772054452},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1676772054417},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1676772054425},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1676772054436},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1676772054437},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1676772054446},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1676772054445},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1676772054451},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1676772054467},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1676772054472},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1676772054473},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1676772054474},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1676772054476},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1676772054477},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1676772054482},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1676772054510},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1676772054511},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1676772054530},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1676772054514},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1676772054506},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1676772054508},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1676772054513},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1676772054518},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1676772054525},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1676772054526},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1676772054515},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1676772054516},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1676772054517},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1676772054524},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1676772054527},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1676772054519},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1676772054522},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1676772054528},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1676772054533},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1676772054533},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1676772054536},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1676772054507},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1676772054509},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1676772054518},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1676772054514},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1676772054520},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1676772054520},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1676772054519},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1676772054529},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1676772054521},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1676772054530},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1676772054529},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1676772054531},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1676772054534},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1676772054535},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1676772054535},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1676772054537},{"_id":"source/_posts/early/assets/img/%E8%BD%AF%E4%BB%B6%E6%94%B6%E9%9B%86-fdc6b7ff49d8c4a0ea1ea6049b6f2355-adde5d-1610093269.jpeg","hash":"c564c6dbe4dc847eba309e61ed0e29e1acd85a4b","modified":1676855936453},{"_id":"source/_posts/early/assets/img/4a669296228132f5ac2b15e491cacce6-f26819-1610096126.png","hash":"b905a6a9319fa45a6a3e5d9039425cfb8d788229","modified":1676855939974},{"_id":"source/_posts/early/assets/img/b64f9f365c60932081476b7b74bd68e3-9a1459-1610095362.png","hash":"0918fa1dc1d26a11d576ccc904d2f53eac3292b1","modified":1676855942718},{"_id":"source/_posts/early/assets/img/code-1024x962-9fd180e94b6f4c39f337826276a85612-24e71c-1610093020.png","hash":"559ae40170e6dc6402f7cf43153d29dad1b8e4ef","modified":1676855943283},{"_id":"source/_posts/early/assets/img/code-1024x962-9fd180e94b6f4c39f337826276a85612-f13f0b-1610093081.png","hash":"559ae40170e6dc6402f7cf43153d29dad1b8e4ef","modified":1676855943477},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1676772054502},{"_id":"source/_posts/early/assets/img/8301f8ec7d0493f72fdfb63adc6db231-64a817-1610099200.jpg","hash":"13b40ca0d67f1e2fa3e77f602da6f7be7e1bc444","modified":1676855941240},{"_id":"source/_posts/early/数据结构-栈.md","hash":"9c763d9ec35e304aabb29f23a2ae5e603cfc88d7","modified":1676863267426},{"_id":"source/_posts/early/数据结构-栈/48e758395b3246ce9032c9bb63a6ec99-0737d7-1610094343.jpeg","hash":"584bc94e20dc2bd16f50f1efc8e1bf0ff38556e6","modified":1676855939788},{"_id":"source/_posts/early/数据结构-栈/747f75b76bb2b72be3e5413826fd1c3c-c86e9a-1610094817.jpeg","hash":"9489921e2d55cbe0750294bbd48da239c6713636","modified":1676855940770},{"_id":"source/_posts/early/Mysql-双机热备.md","hash":"1fa4c425b7353e300c989b4358d5098e3f071792","modified":1676863332889},{"_id":"source/_posts/early/springbootweb项目开发一环境搭建.md","hash":"75d78707007fdcc838748873765d8c202ac0685e","modified":1676863438410},{"_id":"source/asset/images/cat.png","hash":"8e55aeaebf41b1372d9f52109d4526c7cb958eea","modified":1676775324000},{"_id":"source/_posts/early/springbootweb项目开发一环境搭建/image-2-c01e335af8aa7df297d410e301476c8e-6bfc6e-1610093103.png","hash":"cc73f9a62558730bf6c8cea989123d828ca30566","modified":1676855946087},{"_id":"source/_posts/early/springbootweb项目开发一环境搭建/image-3-a14b40a6b746c315bd60a322a18f30d8-e798c4-1610093115.png","hash":"8ca5dace47cca02f758982b5a8c01fa4e3ffdc3c","modified":1676855946471},{"_id":"source/_posts/early/springbootweb项目开发一环境搭建/image-4-bb52f36d371102cd655b6af50120313b-ec34aa-1610093175.png","hash":"0da47ed7e5fa273fc13385da9a56dbbc8975c6cd","modified":1676855946904},{"_id":"source/_posts/early/springbootweb项目开发一环境搭建/code-1024x962-9fd180e94b6f4c39f337826276a85612-f13f0b-1610093081.png","hash":"559ae40170e6dc6402f7cf43153d29dad1b8e4ef","modified":1676855943477}],"Category":[{"name":"程序","_id":"clec91d280003v0l42ri36a3r"},{"name":"Sql","parent":"clec91d280003v0l42ri36a3r","_id":"clec91d2l000hv0l4001ydx8t"},{"name":"C#","parent":"clec91d280003v0l42ri36a3r","_id":"clec91d2o000nv0l4g0zt002n"},{"name":"SpringBoot","parent":"clec91d280003v0l42ri36a3r","_id":"clec91d2t0011v0l48w1xda2o"},{"name":"Web","parent":"clec91d280003v0l42ri36a3r","_id":"clec91d2v001av0l43auydbem"},{"name":"闲聊","_id":"clec91d31001tv0l4e1b74cmx"},{"name":"数据结构-算法","_id":"clec91d31001yv0l47983c797"},{"name":"闲聊","parent":"clec91d280003v0l42ri36a3r","_id":"clec91d320023v0l47jln2hb8"},{"name":"数据结构-算法","parent":"clec91d280003v0l42ri36a3r","_id":"clec91d330028v0l44jqm35ur"},{"name":"算法相关","_id":"clec91d34002gv0l40331c1mh"},{"name":"信息安全","_id":"clec91d36002sv0l4f9tm2ruo"},{"name":"闲聊","parent":"clec91d31001yv0l47983c797","_id":"clec91d37002yv0l40o5l4fiy"}],"Data":[],"Page":[{"title":"about","date":"2023-02-19T02:05:01.000Z","layout":"about","_content":"## 毛线球上的喵星人\n\n九八年，摩羯，男\n\n写代码\n\n跑步\n\n摄影\n\n折腾\n\n.","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-02-19 10:05:01\nlayout: about\n---\n## 毛线球上的喵星人\n\n九八年，摩羯，男\n\n写代码\n\n跑步\n\n摄影\n\n折腾\n\n.","updated":"2023-02-19T02:06:57.394Z","path":"about/index.html","comments":1,"_id":"clec91d200000v0l4eactcocu","content":"<h2 id=\"毛线球上的喵星人\"><a href=\"#毛线球上的喵星人\" class=\"headerlink\" title=\"毛线球上的喵星人\"></a>毛线球上的喵星人</h2><p>九八年，摩羯，男</p>\n<p>写代码</p>\n<p>跑步</p>\n<p>摄影</p>\n<p>折腾</p>\n<p>.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"毛线球上的喵星人\"><a href=\"#毛线球上的喵星人\" class=\"headerlink\" title=\"毛线球上的喵星人\"></a>毛线球上的喵星人</h2><p>九八年，摩羯，男</p>\n<p>写代码</p>\n<p>跑步</p>\n<p>摄影</p>\n<p>折腾</p>\n<p>.</p>\n"}],"Post":[{"title":"C# 中的、 、.、[]、、=和as","date":"2020-03-01T08:51:55.000Z","updated":"2021-01-08T09:04:06.419Z","url":"https://maoxian.fun/archives/c中的和as","_content":"\n## (?) 可空类型\n\n通常来说，编程语言中一般对于数据的引用类型分为值类型和引用类型。例如bool、int等为值类型，而类一般为引用类型。值类型即存储的是数值，引用存储的是对数值地址的引用。从而引用类型可以为空（null），值类型不可为空，使用前未初始化则会出现警告或被默认初始化为该类型的默认值。\n\n(?)符号的作用即**修饰值类型**，使其可空（可为null）。\n\n举个例子：\n\n```c#\nint a = null; // 该行报错，Vs提示：无法将null转换为“int”，因为后者是不可为null的值类型”\nint? b = null; // 无报错和警告\n```\n\n对应的类型：\n\n```c#\nConsole.WriteLine(typeof(int)); // System.Int32\nConsole.WriteLine(typeof(int?)); // System.Nullable[System.Int32]\n```\n\n可以看出来int类型即.Net类型中的System.Int32，而int?则是由Nullable类型对int的封装，使其可空，查阅[MSDN文档](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable?view=netframework-4.8)对Nullable的说明如下\n\n> **注解**\n> 如果可以为类型赋值或将其分配到 `null`，则称该类型为 null，这意味着该类型没有任何值。 默认情况下，所有引用类型（如 [String](https://docs.microsoft.com/zh-cn/dotnet/api/system.string?view=netframework-4.8)）都可以为 null，但所有值类型（如 [Int32](https://docs.microsoft.com/zh-cn/dotnet/api/system.int32?view=netframework-4.8)）都不是。\n> 在 C# 和 Visual Basic 中，通过在值类型后使用 `?` 表示法，将值类型标记为可以为 null。 例如，在 Visual Basic 中 C# `int?` 或 `Integer?` 声明可以 `null` 分配的整数值类型。\n> [Nullable](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable?view=netframework-4.8) 类提供 [Nullable](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1?view=netframework-4.8) 结构的互补支持。 [Nullable](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable?view=netframework-4.8) 类支持获取可以为 null 的类型的基础类型，以及针对其基础值类型不支持泛型比较和相等运算的可以为 null 的类型对的比较和相等性运算。\n> **装箱和取消装箱**\n> 当对可以为 null 的类型进行装箱时，公共语言运行时将自动框 [Nullable](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1?view=netframework-4.8) 对象的基础值，而不是 [Nullable](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1?view=netframework-4.8) 对象本身。 也就是说，如果 [HasValue](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1.hasvalue?view=netframework-4.8) 属性为 `true`，则 [Value](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1.value?view=netframework-4.8) 属性的内容为装箱。 如果 `HasValue` 属性为 `false`，则 `null` 为装箱。 如果可以为 null 的类型的基础值为取消装箱，则公共语言运行时将创建一个新的 [Nullable](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1?view=netframework-4.8) 结构，该结构已初始化为基础值。\n>\n> [MSDN](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable?view=netframework-4.8)\n\n## (?:) 三目运算符\n\n这个其实不需要怎么解释，也不是c#特有的语法，就是常用的三目运算符。\n\n```c#\nint a = 7;\nbool x = (a < 17 ? true : false); // true\n```\n\n条件 ? 返回值1 : 返回值2，这是三目运算符的基本格式，问号前面也就是三目运算的条件，如果该条件为真（true）返回（返回值1），否则返回（返回值2）。和大部分编程语言相同，需要注意一个三目运算符的两个返回值的类型都必须相同，也就是返回值1和2的类型必须一致。因为在编译期就已经决定好该运算的返回值类型，如果不同，则编译时无法确定返回类型，就会报错。\n\n```c#\nConsole.WriteLine(7 < 17 ? 37 : new DateTime()); // 报错，提示：无法确定条件表达式的类型，因为“int”和“System.DateTime”之间没有隐式转换\n```\n\n可以看到当返回值类型不同时（int和DateTime类型）将会提示这两种类型无法通过隐式的类型转换变成相同类型。*（DateTime类型是时间类型，这里只是为了区分WriteLine函数的参数类型和返回值间的类型）*\n\n## (?.)和(?[]) Null条件运算符\n\n```c#\nList<int> list1 = null; // 声明空的int类型列表list1\nList<int> list2 = new List<int>(); // 声明int类型列表list2\nlist1.Add(7); // 为list1添加一个元素 \nlist2.Add(7); // 为list2添加一个元素 \n```\n\n代码中声明两个列表对象，其中一个为null，分别调用Add()函数给列表添加元素，在Vs编译时没有报错，代码编辑器中也没有红线警告，但是当编译运行后，代码运行至list1.Add(7);时，抛出NullReferenceException空指针异常。\n\n很容易的看出由于list1为null并且没有做null检查。改下代码\n\n```c#\nList<int> list1 = null; // 声明空的int类型列表list1\nList<int> list2 = new List<int>(); // 声明int类型列表list2\nif (null != list1)\n{\n\t// 如果list1 不为null 则添加一个元素 \n\tlist1.Add(7);\n}\nlist2.Add(7); // 为list2添加一个元素 \n```\n\n编译运行，程序正常运行，无异常无报错。通过调试诊断工具或者肉眼调试可以知道list1依然为null并且没有执行list1.Add(7)语句，list2中成功添加值为7的元素。\n\n相同的操作，如果使用(?.)语法则变成这样\n\n```c#\nList list1 = null; // 声明空的int类型列表list1\nList list2 = new List(); // 声明int类型列表list2\nlist1?.Add(7); // 如果list1 不为null 则添加一个元素 \nlist2?.Add(7); // 为list2添加一个元素 \n```\n\n代码执行后的结果与上一段代码相同。\n\n?. 语法，首先判断问号前的对象是否为空，如果为空(null)则返回null并且停止执行其后的代码链，list1为null，不执行.Add()函数；如过不为null则继续执行其后的代码链，如list2.Add(7)。\n\n```c#\nList list1 = null; // 声明空的int类型列表list1\nList list2 = new List(); // 声明int类型列表list2\nlist1?.Add(7); // 如果list1 不为null 则添加一个元素 \nlist2?.Add(7); // 为list2添加一个元素 \nint? a = list1?[0]; // a = null\nint? b = list2?[0]; // b = 7\n```\n\n?[]也是同样的意思，如果问号前的对象为空则返回null，否则返回对应的值。\n\n## (??)和(??=) Null合并运算符\n\n```c#\nList<int> list1 = null; // 声明空的int类型列表list1\nList<int> list2 = new List<int>(); // 声明int类型列表list2\nList<int> list3 = list1 ?? list2; // list3 = list2\n```\n\n?? 运算符，若左值为null，返回右值；否则返回左值。\n\n## (as) 类型转换\n\nas语法对类对象进行强制转换\n\n```c#\nobject obj = new A();\nB b = new B();\n// 有两个相互独立的类A和类B\n\nA a1 = obj as A; // obj转换成功 \nA a2 = b as A; // b转换失败，a2为null\n\n//将obj和b两个对象转成A类对象，若转换失败，则为null，不会抛出异常，传统的类型强制转换语法，在转换失败时会抛出异常而as语法不会 \n```","source":"_posts/early/C# 中的、 、.、[]、、=和as-c中的和as.md","raw":"---\ntitle: C# 中的、 、.、[]、、=和as\ndate: 2020-03-01 16:51:55.0\nupdated: 2021-01-08 17:04:06.419\nurl: https://maoxian.fun/archives/c中的和as\ncategories: \n- 程序\n- C#\ntags: \n---\n\n## (?) 可空类型\n\n通常来说，编程语言中一般对于数据的引用类型分为值类型和引用类型。例如bool、int等为值类型，而类一般为引用类型。值类型即存储的是数值，引用存储的是对数值地址的引用。从而引用类型可以为空（null），值类型不可为空，使用前未初始化则会出现警告或被默认初始化为该类型的默认值。\n\n(?)符号的作用即**修饰值类型**，使其可空（可为null）。\n\n举个例子：\n\n```c#\nint a = null; // 该行报错，Vs提示：无法将null转换为“int”，因为后者是不可为null的值类型”\nint? b = null; // 无报错和警告\n```\n\n对应的类型：\n\n```c#\nConsole.WriteLine(typeof(int)); // System.Int32\nConsole.WriteLine(typeof(int?)); // System.Nullable[System.Int32]\n```\n\n可以看出来int类型即.Net类型中的System.Int32，而int?则是由Nullable类型对int的封装，使其可空，查阅[MSDN文档](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable?view=netframework-4.8)对Nullable的说明如下\n\n> **注解**\n> 如果可以为类型赋值或将其分配到 `null`，则称该类型为 null，这意味着该类型没有任何值。 默认情况下，所有引用类型（如 [String](https://docs.microsoft.com/zh-cn/dotnet/api/system.string?view=netframework-4.8)）都可以为 null，但所有值类型（如 [Int32](https://docs.microsoft.com/zh-cn/dotnet/api/system.int32?view=netframework-4.8)）都不是。\n> 在 C# 和 Visual Basic 中，通过在值类型后使用 `?` 表示法，将值类型标记为可以为 null。 例如，在 Visual Basic 中 C# `int?` 或 `Integer?` 声明可以 `null` 分配的整数值类型。\n> [Nullable](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable?view=netframework-4.8) 类提供 [Nullable](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1?view=netframework-4.8) 结构的互补支持。 [Nullable](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable?view=netframework-4.8) 类支持获取可以为 null 的类型的基础类型，以及针对其基础值类型不支持泛型比较和相等运算的可以为 null 的类型对的比较和相等性运算。\n> **装箱和取消装箱**\n> 当对可以为 null 的类型进行装箱时，公共语言运行时将自动框 [Nullable](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1?view=netframework-4.8) 对象的基础值，而不是 [Nullable](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1?view=netframework-4.8) 对象本身。 也就是说，如果 [HasValue](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1.hasvalue?view=netframework-4.8) 属性为 `true`，则 [Value](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1.value?view=netframework-4.8) 属性的内容为装箱。 如果 `HasValue` 属性为 `false`，则 `null` 为装箱。 如果可以为 null 的类型的基础值为取消装箱，则公共语言运行时将创建一个新的 [Nullable](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1?view=netframework-4.8) 结构，该结构已初始化为基础值。\n>\n> [MSDN](https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable?view=netframework-4.8)\n\n## (?:) 三目运算符\n\n这个其实不需要怎么解释，也不是c#特有的语法，就是常用的三目运算符。\n\n```c#\nint a = 7;\nbool x = (a < 17 ? true : false); // true\n```\n\n条件 ? 返回值1 : 返回值2，这是三目运算符的基本格式，问号前面也就是三目运算的条件，如果该条件为真（true）返回（返回值1），否则返回（返回值2）。和大部分编程语言相同，需要注意一个三目运算符的两个返回值的类型都必须相同，也就是返回值1和2的类型必须一致。因为在编译期就已经决定好该运算的返回值类型，如果不同，则编译时无法确定返回类型，就会报错。\n\n```c#\nConsole.WriteLine(7 < 17 ? 37 : new DateTime()); // 报错，提示：无法确定条件表达式的类型，因为“int”和“System.DateTime”之间没有隐式转换\n```\n\n可以看到当返回值类型不同时（int和DateTime类型）将会提示这两种类型无法通过隐式的类型转换变成相同类型。*（DateTime类型是时间类型，这里只是为了区分WriteLine函数的参数类型和返回值间的类型）*\n\n## (?.)和(?[]) Null条件运算符\n\n```c#\nList<int> list1 = null; // 声明空的int类型列表list1\nList<int> list2 = new List<int>(); // 声明int类型列表list2\nlist1.Add(7); // 为list1添加一个元素 \nlist2.Add(7); // 为list2添加一个元素 \n```\n\n代码中声明两个列表对象，其中一个为null，分别调用Add()函数给列表添加元素，在Vs编译时没有报错，代码编辑器中也没有红线警告，但是当编译运行后，代码运行至list1.Add(7);时，抛出NullReferenceException空指针异常。\n\n很容易的看出由于list1为null并且没有做null检查。改下代码\n\n```c#\nList<int> list1 = null; // 声明空的int类型列表list1\nList<int> list2 = new List<int>(); // 声明int类型列表list2\nif (null != list1)\n{\n\t// 如果list1 不为null 则添加一个元素 \n\tlist1.Add(7);\n}\nlist2.Add(7); // 为list2添加一个元素 \n```\n\n编译运行，程序正常运行，无异常无报错。通过调试诊断工具或者肉眼调试可以知道list1依然为null并且没有执行list1.Add(7)语句，list2中成功添加值为7的元素。\n\n相同的操作，如果使用(?.)语法则变成这样\n\n```c#\nList list1 = null; // 声明空的int类型列表list1\nList list2 = new List(); // 声明int类型列表list2\nlist1?.Add(7); // 如果list1 不为null 则添加一个元素 \nlist2?.Add(7); // 为list2添加一个元素 \n```\n\n代码执行后的结果与上一段代码相同。\n\n?. 语法，首先判断问号前的对象是否为空，如果为空(null)则返回null并且停止执行其后的代码链，list1为null，不执行.Add()函数；如过不为null则继续执行其后的代码链，如list2.Add(7)。\n\n```c#\nList list1 = null; // 声明空的int类型列表list1\nList list2 = new List(); // 声明int类型列表list2\nlist1?.Add(7); // 如果list1 不为null 则添加一个元素 \nlist2?.Add(7); // 为list2添加一个元素 \nint? a = list1?[0]; // a = null\nint? b = list2?[0]; // b = 7\n```\n\n?[]也是同样的意思，如果问号前的对象为空则返回null，否则返回对应的值。\n\n## (??)和(??=) Null合并运算符\n\n```c#\nList<int> list1 = null; // 声明空的int类型列表list1\nList<int> list2 = new List<int>(); // 声明int类型列表list2\nList<int> list3 = list1 ?? list2; // list3 = list2\n```\n\n?? 运算符，若左值为null，返回右值；否则返回左值。\n\n## (as) 类型转换\n\nas语法对类对象进行强制转换\n\n```c#\nobject obj = new A();\nB b = new B();\n// 有两个相互独立的类A和类B\n\nA a1 = obj as A; // obj转换成功 \nA a2 = b as A; // b转换失败，a2为null\n\n//将obj和b两个对象转成A类对象，若转换失败，则为null，不会抛出异常，传统的类型强制转换语法，在转换失败时会抛出异常而as语法不会 \n```","slug":"early/C# 中的、 、.、[]、、=和as-c中的和as","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec91d240001v0l4gu5l0izv","content":"<h2 id=\"可空类型\"><a href=\"#可空类型\" class=\"headerlink\" title=\"(?) 可空类型\"></a>(?) 可空类型</h2><p>通常来说，编程语言中一般对于数据的引用类型分为值类型和引用类型。例如bool、int等为值类型，而类一般为引用类型。值类型即存储的是数值，引用存储的是对数值地址的引用。从而引用类型可以为空（null），值类型不可为空，使用前未初始化则会出现警告或被默认初始化为该类型的默认值。</p>\n<p>(?)符号的作用即<strong>修饰值类型</strong>，使其可空（可为null）。</p>\n<p>举个例子：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-built_in\">int</span> a = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 该行报错，Vs提示：无法将null转换为“int”，因为后者是不可为null的值类型”</span><br><span class=\"hljs-built_in\">int</span>? b = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 无报错和警告</span><br></code></pre></td></tr></table></figure>\n\n<p>对应的类型：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">Console.WriteLine(<span class=\"hljs-keyword\">typeof</span>(<span class=\"hljs-built_in\">int</span>)); <span class=\"hljs-comment\">// System.Int32</span><br>Console.WriteLine(<span class=\"hljs-keyword\">typeof</span>(<span class=\"hljs-built_in\">int</span>?)); <span class=\"hljs-comment\">// System.Nullable[System.Int32]</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看出来int类型即.Net类型中的System.Int32，而int?则是由Nullable类型对int的封装，使其可空，查阅<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable?view=netframework-4.8\">MSDN文档</a>对Nullable的说明如下</p>\n<blockquote>\n<p><strong>注解</strong><br>如果可以为类型赋值或将其分配到 <code>null</code>，则称该类型为 null，这意味着该类型没有任何值。 默认情况下，所有引用类型（如 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.string?view=netframework-4.8\">String</a>）都可以为 null，但所有值类型（如 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.int32?view=netframework-4.8\">Int32</a>）都不是。<br>在 C# 和 Visual Basic 中，通过在值类型后使用 <code>?</code> 表示法，将值类型标记为可以为 null。 例如，在 Visual Basic 中 C# <code>int?</code> 或 <code>Integer?</code> 声明可以 <code>null</code> 分配的整数值类型。<br><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable?view=netframework-4.8\">Nullable</a> 类提供 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1?view=netframework-4.8\">Nullable</a> 结构的互补支持。 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable?view=netframework-4.8\">Nullable</a> 类支持获取可以为 null 的类型的基础类型，以及针对其基础值类型不支持泛型比较和相等运算的可以为 null 的类型对的比较和相等性运算。<br><strong>装箱和取消装箱</strong><br>当对可以为 null 的类型进行装箱时，公共语言运行时将自动框 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1?view=netframework-4.8\">Nullable</a> 对象的基础值，而不是 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1?view=netframework-4.8\">Nullable</a> 对象本身。 也就是说，如果 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1.hasvalue?view=netframework-4.8\">HasValue</a> 属性为 <code>true</code>，则 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1.value?view=netframework-4.8\">Value</a> 属性的内容为装箱。 如果 <code>HasValue</code> 属性为 <code>false</code>，则 <code>null</code> 为装箱。 如果可以为 null 的类型的基础值为取消装箱，则公共语言运行时将创建一个新的 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1?view=netframework-4.8\">Nullable</a> 结构，该结构已初始化为基础值。</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable?view=netframework-4.8\">MSDN</a></p>\n</blockquote>\n<h2 id=\"三目运算符\"><a href=\"#三目运算符\" class=\"headerlink\" title=\"(?:) 三目运算符\"></a>(?:) 三目运算符</h2><p>这个其实不需要怎么解释，也不是c#特有的语法，就是常用的三目运算符。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-built_in\">int</span> a = <span class=\"hljs-number\">7</span>;<br><span class=\"hljs-built_in\">bool</span> x = (a &lt; <span class=\"hljs-number\">17</span> ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n\n<p>条件 ? 返回值1 : 返回值2，这是三目运算符的基本格式，问号前面也就是三目运算的条件，如果该条件为真（true）返回（返回值1），否则返回（返回值2）。和大部分编程语言相同，需要注意一个三目运算符的两个返回值的类型都必须相同，也就是返回值1和2的类型必须一致。因为在编译期就已经决定好该运算的返回值类型，如果不同，则编译时无法确定返回类型，就会报错。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">Console.WriteLine(<span class=\"hljs-number\">7</span> &lt; <span class=\"hljs-number\">17</span> ? <span class=\"hljs-number\">37</span> : <span class=\"hljs-keyword\">new</span> DateTime()); <span class=\"hljs-comment\">// 报错，提示：无法确定条件表达式的类型，因为“int”和“System.DateTime”之间没有隐式转换</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到当返回值类型不同时（int和DateTime类型）将会提示这两种类型无法通过隐式的类型转换变成相同类型。<em>（DateTime类型是时间类型，这里只是为了区分WriteLine函数的参数类型和返回值间的类型）</em></p>\n<h2 id=\"和-Null条件运算符\"><a href=\"#和-Null条件运算符\" class=\"headerlink\" title=\"(?.)和(?[]) Null条件运算符\"></a>(?.)和(?[]) Null条件运算符</h2><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">List&lt;<span class=\"hljs-built_in\">int</span>&gt; list1 = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 声明空的int类型列表list1</span><br>List&lt;<span class=\"hljs-built_in\">int</span>&gt; list2 = <span class=\"hljs-keyword\">new</span> List&lt;<span class=\"hljs-built_in\">int</span>&gt;(); <span class=\"hljs-comment\">// 声明int类型列表list2</span><br>list1.Add(<span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// 为list1添加一个元素 </span><br>list2.Add(<span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// 为list2添加一个元素 </span><br></code></pre></td></tr></table></figure>\n\n<p>代码中声明两个列表对象，其中一个为null，分别调用Add()函数给列表添加元素，在Vs编译时没有报错，代码编辑器中也没有红线警告，但是当编译运行后，代码运行至list1.Add(7);时，抛出NullReferenceException空指针异常。</p>\n<p>很容易的看出由于list1为null并且没有做null检查。改下代码</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">List&lt;<span class=\"hljs-built_in\">int</span>&gt; list1 = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 声明空的int类型列表list1</span><br>List&lt;<span class=\"hljs-built_in\">int</span>&gt; list2 = <span class=\"hljs-keyword\">new</span> List&lt;<span class=\"hljs-built_in\">int</span>&gt;(); <span class=\"hljs-comment\">// 声明int类型列表list2</span><br><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">null</span> != list1)<br>&#123;<br>\t<span class=\"hljs-comment\">// 如果list1 不为null 则添加一个元素 </span><br>\tlist1.Add(<span class=\"hljs-number\">7</span>);<br>&#125;<br>list2.Add(<span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// 为list2添加一个元素 </span><br></code></pre></td></tr></table></figure>\n\n<p>编译运行，程序正常运行，无异常无报错。通过调试诊断工具或者肉眼调试可以知道list1依然为null并且没有执行list1.Add(7)语句，list2中成功添加值为7的元素。</p>\n<p>相同的操作，如果使用(?.)语法则变成这样</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">List list1 = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 声明空的int类型列表list1</span><br>List list2 = <span class=\"hljs-keyword\">new</span> List(); <span class=\"hljs-comment\">// 声明int类型列表list2</span><br>list1?.Add(<span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// 如果list1 不为null 则添加一个元素 </span><br>list2?.Add(<span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// 为list2添加一个元素 </span><br></code></pre></td></tr></table></figure>\n\n<p>代码执行后的结果与上一段代码相同。</p>\n<p>?. 语法，首先判断问号前的对象是否为空，如果为空(null)则返回null并且停止执行其后的代码链，list1为null，不执行.Add()函数；如过不为null则继续执行其后的代码链，如list2.Add(7)。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">List list1 = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 声明空的int类型列表list1</span><br>List list2 = <span class=\"hljs-keyword\">new</span> List(); <span class=\"hljs-comment\">// 声明int类型列表list2</span><br>list1?.Add(<span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// 如果list1 不为null 则添加一个元素 </span><br>list2?.Add(<span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// 为list2添加一个元素 </span><br><span class=\"hljs-built_in\">int</span>? a = list1?[<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// a = null</span><br><span class=\"hljs-built_in\">int</span>? b = list2?[<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// b = 7</span><br></code></pre></td></tr></table></figure>\n\n<p>?[]也是同样的意思，如果问号前的对象为空则返回null，否则返回对应的值。</p>\n<h2 id=\"和-Null合并运算符\"><a href=\"#和-Null合并运算符\" class=\"headerlink\" title=\"(??)和(??=) Null合并运算符\"></a>(??)和(??=) Null合并运算符</h2><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">List&lt;<span class=\"hljs-built_in\">int</span>&gt; list1 = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 声明空的int类型列表list1</span><br>List&lt;<span class=\"hljs-built_in\">int</span>&gt; list2 = <span class=\"hljs-keyword\">new</span> List&lt;<span class=\"hljs-built_in\">int</span>&gt;(); <span class=\"hljs-comment\">// 声明int类型列表list2</span><br>List&lt;<span class=\"hljs-built_in\">int</span>&gt; list3 = list1 ?? list2; <span class=\"hljs-comment\">// list3 = list2</span><br></code></pre></td></tr></table></figure>\n\n<p>?? 运算符，若左值为null，返回右值；否则返回左值。</p>\n<h2 id=\"as-类型转换\"><a href=\"#as-类型转换\" class=\"headerlink\" title=\"(as) 类型转换\"></a>(as) 类型转换</h2><p>as语法对类对象进行强制转换</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-built_in\">object</span> obj = <span class=\"hljs-keyword\">new</span> A();<br>B b = <span class=\"hljs-keyword\">new</span> B();<br><span class=\"hljs-comment\">// 有两个相互独立的类A和类B</span><br><br>A a1 = obj <span class=\"hljs-keyword\">as</span> A; <span class=\"hljs-comment\">// obj转换成功 </span><br>A a2 = b <span class=\"hljs-keyword\">as</span> A; <span class=\"hljs-comment\">// b转换失败，a2为null</span><br><br><span class=\"hljs-comment\">//将obj和b两个对象转成A类对象，若转换失败，则为null，不会抛出异常，传统的类型强制转换语法，在转换失败时会抛出异常而as语法不会 </span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"可空类型\"><a href=\"#可空类型\" class=\"headerlink\" title=\"(?) 可空类型\"></a>(?) 可空类型</h2><p>通常来说，编程语言中一般对于数据的引用类型分为值类型和引用类型。例如bool、int等为值类型，而类一般为引用类型。值类型即存储的是数值，引用存储的是对数值地址的引用。从而引用类型可以为空（null），值类型不可为空，使用前未初始化则会出现警告或被默认初始化为该类型的默认值。</p>\n<p>(?)符号的作用即<strong>修饰值类型</strong>，使其可空（可为null）。</p>\n<p>举个例子：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-built_in\">int</span> a = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 该行报错，Vs提示：无法将null转换为“int”，因为后者是不可为null的值类型”</span><br><span class=\"hljs-built_in\">int</span>? b = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 无报错和警告</span><br></code></pre></td></tr></table></figure>\n\n<p>对应的类型：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">Console.WriteLine(<span class=\"hljs-keyword\">typeof</span>(<span class=\"hljs-built_in\">int</span>)); <span class=\"hljs-comment\">// System.Int32</span><br>Console.WriteLine(<span class=\"hljs-keyword\">typeof</span>(<span class=\"hljs-built_in\">int</span>?)); <span class=\"hljs-comment\">// System.Nullable[System.Int32]</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看出来int类型即.Net类型中的System.Int32，而int?则是由Nullable类型对int的封装，使其可空，查阅<a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable?view=netframework-4.8\">MSDN文档</a>对Nullable的说明如下</p>\n<blockquote>\n<p><strong>注解</strong><br>如果可以为类型赋值或将其分配到 <code>null</code>，则称该类型为 null，这意味着该类型没有任何值。 默认情况下，所有引用类型（如 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.string?view=netframework-4.8\">String</a>）都可以为 null，但所有值类型（如 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.int32?view=netframework-4.8\">Int32</a>）都不是。<br>在 C# 和 Visual Basic 中，通过在值类型后使用 <code>?</code> 表示法，将值类型标记为可以为 null。 例如，在 Visual Basic 中 C# <code>int?</code> 或 <code>Integer?</code> 声明可以 <code>null</code> 分配的整数值类型。<br><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable?view=netframework-4.8\">Nullable</a> 类提供 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1?view=netframework-4.8\">Nullable</a> 结构的互补支持。 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable?view=netframework-4.8\">Nullable</a> 类支持获取可以为 null 的类型的基础类型，以及针对其基础值类型不支持泛型比较和相等运算的可以为 null 的类型对的比较和相等性运算。<br><strong>装箱和取消装箱</strong><br>当对可以为 null 的类型进行装箱时，公共语言运行时将自动框 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1?view=netframework-4.8\">Nullable</a> 对象的基础值，而不是 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1?view=netframework-4.8\">Nullable</a> 对象本身。 也就是说，如果 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1.hasvalue?view=netframework-4.8\">HasValue</a> 属性为 <code>true</code>，则 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1.value?view=netframework-4.8\">Value</a> 属性的内容为装箱。 如果 <code>HasValue</code> 属性为 <code>false</code>，则 <code>null</code> 为装箱。 如果可以为 null 的类型的基础值为取消装箱，则公共语言运行时将创建一个新的 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable-1?view=netframework-4.8\">Nullable</a> 结构，该结构已初始化为基础值。</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/dotnet/api/system.nullable?view=netframework-4.8\">MSDN</a></p>\n</blockquote>\n<h2 id=\"三目运算符\"><a href=\"#三目运算符\" class=\"headerlink\" title=\"(?:) 三目运算符\"></a>(?:) 三目运算符</h2><p>这个其实不需要怎么解释，也不是c#特有的语法，就是常用的三目运算符。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-built_in\">int</span> a = <span class=\"hljs-number\">7</span>;<br><span class=\"hljs-built_in\">bool</span> x = (a &lt; <span class=\"hljs-number\">17</span> ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n\n<p>条件 ? 返回值1 : 返回值2，这是三目运算符的基本格式，问号前面也就是三目运算的条件，如果该条件为真（true）返回（返回值1），否则返回（返回值2）。和大部分编程语言相同，需要注意一个三目运算符的两个返回值的类型都必须相同，也就是返回值1和2的类型必须一致。因为在编译期就已经决定好该运算的返回值类型，如果不同，则编译时无法确定返回类型，就会报错。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">Console.WriteLine(<span class=\"hljs-number\">7</span> &lt; <span class=\"hljs-number\">17</span> ? <span class=\"hljs-number\">37</span> : <span class=\"hljs-keyword\">new</span> DateTime()); <span class=\"hljs-comment\">// 报错，提示：无法确定条件表达式的类型，因为“int”和“System.DateTime”之间没有隐式转换</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到当返回值类型不同时（int和DateTime类型）将会提示这两种类型无法通过隐式的类型转换变成相同类型。<em>（DateTime类型是时间类型，这里只是为了区分WriteLine函数的参数类型和返回值间的类型）</em></p>\n<h2 id=\"和-Null条件运算符\"><a href=\"#和-Null条件运算符\" class=\"headerlink\" title=\"(?.)和(?[]) Null条件运算符\"></a>(?.)和(?[]) Null条件运算符</h2><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">List&lt;<span class=\"hljs-built_in\">int</span>&gt; list1 = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 声明空的int类型列表list1</span><br>List&lt;<span class=\"hljs-built_in\">int</span>&gt; list2 = <span class=\"hljs-keyword\">new</span> List&lt;<span class=\"hljs-built_in\">int</span>&gt;(); <span class=\"hljs-comment\">// 声明int类型列表list2</span><br>list1.Add(<span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// 为list1添加一个元素 </span><br>list2.Add(<span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// 为list2添加一个元素 </span><br></code></pre></td></tr></table></figure>\n\n<p>代码中声明两个列表对象，其中一个为null，分别调用Add()函数给列表添加元素，在Vs编译时没有报错，代码编辑器中也没有红线警告，但是当编译运行后，代码运行至list1.Add(7);时，抛出NullReferenceException空指针异常。</p>\n<p>很容易的看出由于list1为null并且没有做null检查。改下代码</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">List&lt;<span class=\"hljs-built_in\">int</span>&gt; list1 = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 声明空的int类型列表list1</span><br>List&lt;<span class=\"hljs-built_in\">int</span>&gt; list2 = <span class=\"hljs-keyword\">new</span> List&lt;<span class=\"hljs-built_in\">int</span>&gt;(); <span class=\"hljs-comment\">// 声明int类型列表list2</span><br><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">null</span> != list1)<br>&#123;<br>\t<span class=\"hljs-comment\">// 如果list1 不为null 则添加一个元素 </span><br>\tlist1.Add(<span class=\"hljs-number\">7</span>);<br>&#125;<br>list2.Add(<span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// 为list2添加一个元素 </span><br></code></pre></td></tr></table></figure>\n\n<p>编译运行，程序正常运行，无异常无报错。通过调试诊断工具或者肉眼调试可以知道list1依然为null并且没有执行list1.Add(7)语句，list2中成功添加值为7的元素。</p>\n<p>相同的操作，如果使用(?.)语法则变成这样</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">List list1 = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 声明空的int类型列表list1</span><br>List list2 = <span class=\"hljs-keyword\">new</span> List(); <span class=\"hljs-comment\">// 声明int类型列表list2</span><br>list1?.Add(<span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// 如果list1 不为null 则添加一个元素 </span><br>list2?.Add(<span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// 为list2添加一个元素 </span><br></code></pre></td></tr></table></figure>\n\n<p>代码执行后的结果与上一段代码相同。</p>\n<p>?. 语法，首先判断问号前的对象是否为空，如果为空(null)则返回null并且停止执行其后的代码链，list1为null，不执行.Add()函数；如过不为null则继续执行其后的代码链，如list2.Add(7)。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">List list1 = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 声明空的int类型列表list1</span><br>List list2 = <span class=\"hljs-keyword\">new</span> List(); <span class=\"hljs-comment\">// 声明int类型列表list2</span><br>list1?.Add(<span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// 如果list1 不为null 则添加一个元素 </span><br>list2?.Add(<span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// 为list2添加一个元素 </span><br><span class=\"hljs-built_in\">int</span>? a = list1?[<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// a = null</span><br><span class=\"hljs-built_in\">int</span>? b = list2?[<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// b = 7</span><br></code></pre></td></tr></table></figure>\n\n<p>?[]也是同样的意思，如果问号前的对象为空则返回null，否则返回对应的值。</p>\n<h2 id=\"和-Null合并运算符\"><a href=\"#和-Null合并运算符\" class=\"headerlink\" title=\"(??)和(??=) Null合并运算符\"></a>(??)和(??=) Null合并运算符</h2><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\">List&lt;<span class=\"hljs-built_in\">int</span>&gt; list1 = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 声明空的int类型列表list1</span><br>List&lt;<span class=\"hljs-built_in\">int</span>&gt; list2 = <span class=\"hljs-keyword\">new</span> List&lt;<span class=\"hljs-built_in\">int</span>&gt;(); <span class=\"hljs-comment\">// 声明int类型列表list2</span><br>List&lt;<span class=\"hljs-built_in\">int</span>&gt; list3 = list1 ?? list2; <span class=\"hljs-comment\">// list3 = list2</span><br></code></pre></td></tr></table></figure>\n\n<p>?? 运算符，若左值为null，返回右值；否则返回左值。</p>\n<h2 id=\"as-类型转换\"><a href=\"#as-类型转换\" class=\"headerlink\" title=\"(as) 类型转换\"></a>(as) 类型转换</h2><p>as语法对类对象进行强制转换</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c#\"><span class=\"hljs-built_in\">object</span> obj = <span class=\"hljs-keyword\">new</span> A();<br>B b = <span class=\"hljs-keyword\">new</span> B();<br><span class=\"hljs-comment\">// 有两个相互独立的类A和类B</span><br><br>A a1 = obj <span class=\"hljs-keyword\">as</span> A; <span class=\"hljs-comment\">// obj转换成功 </span><br>A a2 = b <span class=\"hljs-keyword\">as</span> A; <span class=\"hljs-comment\">// b转换失败，a2为null</span><br><br><span class=\"hljs-comment\">//将obj和b两个对象转成A类对象，若转换失败，则为null，不会抛出异常，传统的类型强制转换语法，在转换失败时会抛出异常而as语法不会 </span><br></code></pre></td></tr></table></figure>"},{"title":"基于像素识别的连连看辅助","date":"2020-03-04T07:28:10.000Z","updated":"2021-01-08T07:31:44.385Z","url":"https://maoxian.fun/archives/基于像素识别的连连看辅助","_content":"\n这个算是除了课程设计之外我的第一个小工具，这里重点分析一下思路，有基础的读者应该可以通过**参考**本文章写出自己的程序。\n\n***注:此文章仅用于学习参考***\n\n## 一、 需要的知识：\n\n- C++基础\n- WinAPI的使用\n\n## 二、 程序实现原理步骤：\n\n1. 获取游戏及图片信息\n2. 分析图片及定位将其转化为矩阵(二维数组)\n3. 通过BFS算法计算消除顺序\n4. 发送对应鼠标信息进行消除。\n\n## 三、 分步说明\n\n### 1. 使用的结构体与参数说明：\n\n```cpp\n//点坐标带方向与当前步数\nstruct PointDir\n{\n\tint x;\n\tint y;\n\tint step;//bfs中距离起点的距离\n\tint dir;//bfs中当前拓展的方向\n};\n\n//RGB颜色\nclass Color\n{\n  public:\n\tunsigned char R; //红色的亮度\n\tunsigned char G; //绿色的亮度\n\tunsigned char B; //蓝色的亮度\n\tColor(); //初始化参数为0\n\tColor(int r, int g, int b); //以rgb值初始化参数\n\tvoid operator=(COLORREF c); //以COLORREF对象赋值\n\tbool operator==(Color &c);\n\tbool operator!=(Color &c);\n\tvoid displayRGBInfo();\n};\n\n//一个方块\nclass Block\n{\n  public:\n\tColor rect[blockSizeY][blockSizeX];//一个方块内的所有像素点信息\n\tBlock();// 初始化0\n\tbool operator==(Block &b);\n};\n\n//精度值，影响截取速度（单位 像素）\nstatic const int radious;\n//窗口 在屏幕内 的位置（单位 像素）\nstatic const int windowX;\nstatic const int windowY;\n//窗口内 到地图 的偏移量（单位 像素）\nstatic const int raceX = xx + radious;\nstatic const int raceY = xx + radious;\n//地图棋盘大小（单位 行列）\nstatic const int sizeX;\nstatic const int sizeY;\n//方块大小（单位 像素）\nstatic const int blockSizeX = xx - radious * 2;\nstatic const int blockSizeY = xx - +radious * 2;\n//每个方块之间的间隔（单位 像素）\nstatic const int blank = xx + radious * 2;\n```\n\n### 2. 对图像的截取：\n\n- 使用的主要WinAPI函数：\n\n```cpp\n//以字符串匹配查找窗口\nHWND FindWindow(LPCSTR lpClassName, LPCSTR lpWindowName);\n//改变窗口的大小位置以及窗口级别\nBOOL WINAPI SetWindowPos(HWND,HWND hWndInsertAfter,int X,int Y,int cx,_In_ int cy, UINT uFlags);\n//获取设备句柄\nHDC GetDC(HWND);\n//获取对应（x,y）坐标的像素点信息\nCOLORREF GetPixel(HDC hdc, int X, int Y);\n// 激活窗口\nSetForegroundWindow(hwnd);\n```\n\n* 过程：\n\n以窗口名称查找游戏窗口得到对应句柄，激活窗口，设置窗口位置(可省，仅便于计算像素点位置)。手动计算得出牌面上每个方块的像素位置，对每个方块截取像素并保存在相应结构体数组内。\n\n- 代码：\n\n```cpp\n//查找并设置窗口\nHWND hwnd=NULL //初始化窗口句柄\ncout << \"正在查找窗口 <<游戏窗口名称>>...\" << endl;\nwhile (hwnd == NULL)\n{\n\thwnd = FindWindow(NULL, TEXT(\"游戏窗口名称\"));\n}\ncout << \"窗口已找到\" << endl;\ncout << \"设置窗口位置\" << endl;\nSetWindowPos(hwnd, HWND_TOP, windowX, windowY, 0, 0, SWP_NOSIZE);// 设置窗口位置但不改变大小\nSetForegroundWindow(hwnd);// 激活窗口\n}\n\n//截取并保存每个方块信息\ncout << \"获取方块信息...\" << endl;\n//保存每个方块的rgb值\nHDC hdc = GetDC(hwnd);\nBlock block[sizeY][sizeX];\n\n//棋盘上的每个方块\nfor (int row = 0; row < sizeY; row++)\n{\n\tfor (int col = 0; col < sizeX; col++)\n\t{\n\t\tcout << \"正在获取block[\" << row << \"][\" << col << \"]方块信息...\" << endl;\n\t\t//每个方块内的每个像素点\n\t\tfor (int i = 0; i < blockSizeY; i++)\n\t\t{\n\t\t\tfor (int j = 0; j < blockSizeX; j++)\n\t\t\t{\n\t\t\t\t//分别保存每个方块的每个像素点信息\n\t\t\t\tblock[row][col].rect[i][j] = GetPixel(hdc, raceX + col * (blockSizeX + blank) + j, raceY + row * (blockSizeY + blank) + i);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### 3. 将截取的图像转化为矩阵(二维数组)：\n\n- 过程：\n\n对保存的每个方块的像素信息进行比对，相同方块(截取的像素点信息相同)使用同一个数字编号，保存在一个二维数组内\n\n- 代码：\n\n```cpp\nBlock space;\nfor (int i = 0; i < blockSizeY; i++)\n{\n\tfor (int j = 0; j < blockSizeX; j++)\n\t{\n\t\t//设置空白方块的rgb值\n\t\tspace.rect[i][j].R = xx;\n\t\tspace.rect[i][j].G = xx;\n\t\tspace.rect[i][j].B = xx;\n\t}\n}\n\nint cnt = 1;//起始编号为1,0表示为空地\nBlock pblock[50];//临时变量，保存已经出现过的牌形种类\npblock[0] = space;\n\nfor (int i = 0; i < sizeY; i++)\n{\n\tfor (int j = 0; j < sizeX; j++)\n\t{\n\t\tbool flag = false;// 标记当前坐标方块此前是否出现过，k为该方块对应编号\n\t\tfor (int k = 0; k < cnt; k++)\n\t\t{\n\t\t\t//越界处理提示，一般不会出现\n\t\t\tif (k == 49)\n\t\t\t{\n\t\t\t\tcout << \"error！牌面数量太多！\" << endl;\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tif (block[i][j] == pblock[k])\n\t\t\t{\n\t\t\t\tmap[i][j] = k;\n\t\t\t\tflag = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//如果此前都没有出现过该方块，给予新编号并保存当前方块\n\t\tif (!flag)\n\t\t{\n\t\t\tpblock[cnt] = block[i][j];\n\t\t\tmap[i][j] = cnt;\n\t\t\tcnt++;\n\t\t}\n\t}\n}\n```\n\n### 4. 消除路径分析：\n\n- 过程：\n\n算法使用BFS广度优先搜索，对每个未消除方块展开搜索，此处注意连连看限制条件（拐点不超过2个）将待消除方块信息(鼠标点击的坐标)保存在一个队列中。\n\n- 代码：\n\n```cpp\n//该bfs仅判断单个方块是否有对应可达终点方块\n//inX,inY为起点方块,ansX,ansY为找到的可连接的终点方块\nbool bfs(int inX, int inY, int &ansX, int &ansY)\n{\n\tPointDir inp, curp, nextp;//起点，当前访问点，下一访问点\n\t//初始化起点\n\tinp.x = inX;\n\tinp.y = inY;\n\tinp.step = -1;// 由起点开始的点出发时step必定+1变为0\n\tinp.dir = -1;// 起点不设置有效方向，便于step计数\n\n\t//q保存bfs待访问队列\n\tqueue<PointDir> q;\n\tcurp = inp;\n\tq.push(curp);\n\tbool isFind = false;//是否找到可连接的对应方块\n\t//当队列不空并且没有找到对应终点方块时继续循环\n\twhile (!q.empty() && isFind == false)\n\t{\n\t\tcurp = q.front();\n\t\tq.pop();\n\t\t//上下左右四个方向，dirs[][]数组为四个方向的向量数组\n\t\tfor (int k = 0; k < 4; k++)\n\t\t{\n\t\t\tnextp.x = curp.x + dirs[k][0];\n\t\t\tnextp.y = curp.y + dirs[k][1];\n\t\t\tnextp.dir = k;\n\t\t\tnextp.step = curp.step;\n\t\t\t//当当前访问点方向与上一点方向不相同，判定为拐点，step++\n\t\t\tif (curp.dir != k)\n\t\t\t{\n\t\t\t\tnextp.step++;\n\t\t\t}\n\t\t\t//当拐点大于2个(不符合连连看消除条件路径)跳过当前次循环\n\t\t\tif (nextp.step > 2)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t//当当前点为起点时跳过当前次循环\n\t\t\t//因为连连看可消除路径数小于可到达路径数，故不判定当前点是否曾经被走过即用一个bool visited[][]保存访问状态，若有更好解决办法欢迎讨论。\n\t\t\tif (nextp.x == inp.x && nextp.y == inp.y)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t//边界检查\n\t\t\tif ((nextp.x >= 0) && (nextp.x < sizeX) && (nextp.y >= 0) && (nextp.y < sizeY))\n\t\t\t{\n\t\t\t\t//若是空地加入待访问队列\n\t\t\t\tif (map[nextp.y][nextp.x] == 0)\n\t\t\t\t{\n\t\t\t\t\tq.push(nextp);\n\t\t\t\t}\n\t\t\t\t//若与起点方块相同，则判定找到对应终点方块，记录坐标并退出循环\n\t\t\t\tif (map[nextp.y][nextp.x] == map[inp.y][inp.x])\n\t\t\t\t{\n\t\t\t\t\tmap[inp.y][inp.x] = 0;\n\t\t\t\t\tmap[nextp.y][nextp.x] = 0;\n\t\t\t\t\tansX = nextp.x;\n\t\t\t\t\tansY = nextp.y;\n\t\t\t\t\tisFind = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn isFind;\n}\n\n//计算点击顺序并保存在待点击队列qClick\nvoid caculate()\n{\n\t//一次遍历并不能把整个棋盘消除完全，经过实验一般10*20的棋盘在不考虑 无牌可消 的情况下可以在3-4次循环内消除完整。\n\t//！注意此代码中的方法并不好，更好的方法应该是无限循环，当无牌可消的情况下加入重列动作，直到消除完整。\n\t//将待点击队列qClick改为优先队列（以起终点距离step排序，近的优先）在连连看生成代码较完善的情况下，可以极大的减少 无牌可消 的情况。\n\tfor (int k = 0; k < 5; k++)\n\t{\n\t\t//bool checkOver()函数 检查当前棋盘是否已经消除完毕\n\t\tif (checkOver())\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tfor (int i = 0; i < sizeY; i++)\n\t\t{\n\t\t\tfor (int j = 0; j < sizeX; j++)\n\t\t\t{\n\t\t\t\t//对每一个点bfs展开\n\t\t\t\tif (map[i][j] != 0) //0是空地\n\t\t\t\t{\n\t\t\t\t\tPointDir p1;\n\t\t\t\t\tp1.x = j;\n\t\t\t\t\tp1.y = i;\n\t\t\t\t\tPointDir p2;\n\t\t\t\t\tif (bfs(j, i, p2.x, p2.y))\n\t\t\t\t\t{\n\t\t\t\t\t\t//若找到可连接终点，将起点终点推入待点击队列\n\t\t\t\t\t\tqClick.push(p1);\n\t\t\t\t\t\tqClick.push(p2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### 5.消除的实现：\n\n- 主要WinAPI函数：\n\n```cpp\n//设置鼠标位置\nBOOL SetCursorPos(int X, int Y);\n//鼠标事件(模拟鼠标点击行为)\nvoid mouse_event(DWORD dwFlags, DWORD dx, DWORD dy, DWORD dwData, ULONG_PTR dwExtraInfo);\n```\n\n- 过程：\n\n按照待消除队列依次模拟鼠标移动点击消除便是。\n\n- 代码：\n\n```cpp\nwhile (!qClick.empty())\n{\n\tPointDir p;\n\tp = qClick.front();\n\t//设置鼠标位置\n\tSetCursorPos(windowX + raceX + p.x * (blockSizeX + blank), windowY + raceY + p.y * (blockSizeY + blank));\n\t//模拟鼠标点击，先按下(LEFTDOWN)再放开(LEFTUP)\n\tmouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);\n\tSleep(10); //要留给某些应用的反应时间\n\tmouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);\n\tqClick.pop();\n}\n```","source":"_posts/early/ 基于像素识别的连连看辅助-基于像素识别的连连看辅助.md","raw":"---\ntitle:  基于像素识别的连连看辅助\ndate: 2020-03-04 15:28:10.0\nupdated: 2021-01-08 15:31:44.385\nurl: https://maoxian.fun/archives/基于像素识别的连连看辅助\ncategories: \n- 程序\ntags: \n- cpp\n- 程序\n- 代码\n---\n\n这个算是除了课程设计之外我的第一个小工具，这里重点分析一下思路，有基础的读者应该可以通过**参考**本文章写出自己的程序。\n\n***注:此文章仅用于学习参考***\n\n## 一、 需要的知识：\n\n- C++基础\n- WinAPI的使用\n\n## 二、 程序实现原理步骤：\n\n1. 获取游戏及图片信息\n2. 分析图片及定位将其转化为矩阵(二维数组)\n3. 通过BFS算法计算消除顺序\n4. 发送对应鼠标信息进行消除。\n\n## 三、 分步说明\n\n### 1. 使用的结构体与参数说明：\n\n```cpp\n//点坐标带方向与当前步数\nstruct PointDir\n{\n\tint x;\n\tint y;\n\tint step;//bfs中距离起点的距离\n\tint dir;//bfs中当前拓展的方向\n};\n\n//RGB颜色\nclass Color\n{\n  public:\n\tunsigned char R; //红色的亮度\n\tunsigned char G; //绿色的亮度\n\tunsigned char B; //蓝色的亮度\n\tColor(); //初始化参数为0\n\tColor(int r, int g, int b); //以rgb值初始化参数\n\tvoid operator=(COLORREF c); //以COLORREF对象赋值\n\tbool operator==(Color &c);\n\tbool operator!=(Color &c);\n\tvoid displayRGBInfo();\n};\n\n//一个方块\nclass Block\n{\n  public:\n\tColor rect[blockSizeY][blockSizeX];//一个方块内的所有像素点信息\n\tBlock();// 初始化0\n\tbool operator==(Block &b);\n};\n\n//精度值，影响截取速度（单位 像素）\nstatic const int radious;\n//窗口 在屏幕内 的位置（单位 像素）\nstatic const int windowX;\nstatic const int windowY;\n//窗口内 到地图 的偏移量（单位 像素）\nstatic const int raceX = xx + radious;\nstatic const int raceY = xx + radious;\n//地图棋盘大小（单位 行列）\nstatic const int sizeX;\nstatic const int sizeY;\n//方块大小（单位 像素）\nstatic const int blockSizeX = xx - radious * 2;\nstatic const int blockSizeY = xx - +radious * 2;\n//每个方块之间的间隔（单位 像素）\nstatic const int blank = xx + radious * 2;\n```\n\n### 2. 对图像的截取：\n\n- 使用的主要WinAPI函数：\n\n```cpp\n//以字符串匹配查找窗口\nHWND FindWindow(LPCSTR lpClassName, LPCSTR lpWindowName);\n//改变窗口的大小位置以及窗口级别\nBOOL WINAPI SetWindowPos(HWND,HWND hWndInsertAfter,int X,int Y,int cx,_In_ int cy, UINT uFlags);\n//获取设备句柄\nHDC GetDC(HWND);\n//获取对应（x,y）坐标的像素点信息\nCOLORREF GetPixel(HDC hdc, int X, int Y);\n// 激活窗口\nSetForegroundWindow(hwnd);\n```\n\n* 过程：\n\n以窗口名称查找游戏窗口得到对应句柄，激活窗口，设置窗口位置(可省，仅便于计算像素点位置)。手动计算得出牌面上每个方块的像素位置，对每个方块截取像素并保存在相应结构体数组内。\n\n- 代码：\n\n```cpp\n//查找并设置窗口\nHWND hwnd=NULL //初始化窗口句柄\ncout << \"正在查找窗口 <<游戏窗口名称>>...\" << endl;\nwhile (hwnd == NULL)\n{\n\thwnd = FindWindow(NULL, TEXT(\"游戏窗口名称\"));\n}\ncout << \"窗口已找到\" << endl;\ncout << \"设置窗口位置\" << endl;\nSetWindowPos(hwnd, HWND_TOP, windowX, windowY, 0, 0, SWP_NOSIZE);// 设置窗口位置但不改变大小\nSetForegroundWindow(hwnd);// 激活窗口\n}\n\n//截取并保存每个方块信息\ncout << \"获取方块信息...\" << endl;\n//保存每个方块的rgb值\nHDC hdc = GetDC(hwnd);\nBlock block[sizeY][sizeX];\n\n//棋盘上的每个方块\nfor (int row = 0; row < sizeY; row++)\n{\n\tfor (int col = 0; col < sizeX; col++)\n\t{\n\t\tcout << \"正在获取block[\" << row << \"][\" << col << \"]方块信息...\" << endl;\n\t\t//每个方块内的每个像素点\n\t\tfor (int i = 0; i < blockSizeY; i++)\n\t\t{\n\t\t\tfor (int j = 0; j < blockSizeX; j++)\n\t\t\t{\n\t\t\t\t//分别保存每个方块的每个像素点信息\n\t\t\t\tblock[row][col].rect[i][j] = GetPixel(hdc, raceX + col * (blockSizeX + blank) + j, raceY + row * (blockSizeY + blank) + i);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### 3. 将截取的图像转化为矩阵(二维数组)：\n\n- 过程：\n\n对保存的每个方块的像素信息进行比对，相同方块(截取的像素点信息相同)使用同一个数字编号，保存在一个二维数组内\n\n- 代码：\n\n```cpp\nBlock space;\nfor (int i = 0; i < blockSizeY; i++)\n{\n\tfor (int j = 0; j < blockSizeX; j++)\n\t{\n\t\t//设置空白方块的rgb值\n\t\tspace.rect[i][j].R = xx;\n\t\tspace.rect[i][j].G = xx;\n\t\tspace.rect[i][j].B = xx;\n\t}\n}\n\nint cnt = 1;//起始编号为1,0表示为空地\nBlock pblock[50];//临时变量，保存已经出现过的牌形种类\npblock[0] = space;\n\nfor (int i = 0; i < sizeY; i++)\n{\n\tfor (int j = 0; j < sizeX; j++)\n\t{\n\t\tbool flag = false;// 标记当前坐标方块此前是否出现过，k为该方块对应编号\n\t\tfor (int k = 0; k < cnt; k++)\n\t\t{\n\t\t\t//越界处理提示，一般不会出现\n\t\t\tif (k == 49)\n\t\t\t{\n\t\t\t\tcout << \"error！牌面数量太多！\" << endl;\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tif (block[i][j] == pblock[k])\n\t\t\t{\n\t\t\t\tmap[i][j] = k;\n\t\t\t\tflag = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//如果此前都没有出现过该方块，给予新编号并保存当前方块\n\t\tif (!flag)\n\t\t{\n\t\t\tpblock[cnt] = block[i][j];\n\t\t\tmap[i][j] = cnt;\n\t\t\tcnt++;\n\t\t}\n\t}\n}\n```\n\n### 4. 消除路径分析：\n\n- 过程：\n\n算法使用BFS广度优先搜索，对每个未消除方块展开搜索，此处注意连连看限制条件（拐点不超过2个）将待消除方块信息(鼠标点击的坐标)保存在一个队列中。\n\n- 代码：\n\n```cpp\n//该bfs仅判断单个方块是否有对应可达终点方块\n//inX,inY为起点方块,ansX,ansY为找到的可连接的终点方块\nbool bfs(int inX, int inY, int &ansX, int &ansY)\n{\n\tPointDir inp, curp, nextp;//起点，当前访问点，下一访问点\n\t//初始化起点\n\tinp.x = inX;\n\tinp.y = inY;\n\tinp.step = -1;// 由起点开始的点出发时step必定+1变为0\n\tinp.dir = -1;// 起点不设置有效方向，便于step计数\n\n\t//q保存bfs待访问队列\n\tqueue<PointDir> q;\n\tcurp = inp;\n\tq.push(curp);\n\tbool isFind = false;//是否找到可连接的对应方块\n\t//当队列不空并且没有找到对应终点方块时继续循环\n\twhile (!q.empty() && isFind == false)\n\t{\n\t\tcurp = q.front();\n\t\tq.pop();\n\t\t//上下左右四个方向，dirs[][]数组为四个方向的向量数组\n\t\tfor (int k = 0; k < 4; k++)\n\t\t{\n\t\t\tnextp.x = curp.x + dirs[k][0];\n\t\t\tnextp.y = curp.y + dirs[k][1];\n\t\t\tnextp.dir = k;\n\t\t\tnextp.step = curp.step;\n\t\t\t//当当前访问点方向与上一点方向不相同，判定为拐点，step++\n\t\t\tif (curp.dir != k)\n\t\t\t{\n\t\t\t\tnextp.step++;\n\t\t\t}\n\t\t\t//当拐点大于2个(不符合连连看消除条件路径)跳过当前次循环\n\t\t\tif (nextp.step > 2)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t//当当前点为起点时跳过当前次循环\n\t\t\t//因为连连看可消除路径数小于可到达路径数，故不判定当前点是否曾经被走过即用一个bool visited[][]保存访问状态，若有更好解决办法欢迎讨论。\n\t\t\tif (nextp.x == inp.x && nextp.y == inp.y)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t//边界检查\n\t\t\tif ((nextp.x >= 0) && (nextp.x < sizeX) && (nextp.y >= 0) && (nextp.y < sizeY))\n\t\t\t{\n\t\t\t\t//若是空地加入待访问队列\n\t\t\t\tif (map[nextp.y][nextp.x] == 0)\n\t\t\t\t{\n\t\t\t\t\tq.push(nextp);\n\t\t\t\t}\n\t\t\t\t//若与起点方块相同，则判定找到对应终点方块，记录坐标并退出循环\n\t\t\t\tif (map[nextp.y][nextp.x] == map[inp.y][inp.x])\n\t\t\t\t{\n\t\t\t\t\tmap[inp.y][inp.x] = 0;\n\t\t\t\t\tmap[nextp.y][nextp.x] = 0;\n\t\t\t\t\tansX = nextp.x;\n\t\t\t\t\tansY = nextp.y;\n\t\t\t\t\tisFind = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn isFind;\n}\n\n//计算点击顺序并保存在待点击队列qClick\nvoid caculate()\n{\n\t//一次遍历并不能把整个棋盘消除完全，经过实验一般10*20的棋盘在不考虑 无牌可消 的情况下可以在3-4次循环内消除完整。\n\t//！注意此代码中的方法并不好，更好的方法应该是无限循环，当无牌可消的情况下加入重列动作，直到消除完整。\n\t//将待点击队列qClick改为优先队列（以起终点距离step排序，近的优先）在连连看生成代码较完善的情况下，可以极大的减少 无牌可消 的情况。\n\tfor (int k = 0; k < 5; k++)\n\t{\n\t\t//bool checkOver()函数 检查当前棋盘是否已经消除完毕\n\t\tif (checkOver())\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tfor (int i = 0; i < sizeY; i++)\n\t\t{\n\t\t\tfor (int j = 0; j < sizeX; j++)\n\t\t\t{\n\t\t\t\t//对每一个点bfs展开\n\t\t\t\tif (map[i][j] != 0) //0是空地\n\t\t\t\t{\n\t\t\t\t\tPointDir p1;\n\t\t\t\t\tp1.x = j;\n\t\t\t\t\tp1.y = i;\n\t\t\t\t\tPointDir p2;\n\t\t\t\t\tif (bfs(j, i, p2.x, p2.y))\n\t\t\t\t\t{\n\t\t\t\t\t\t//若找到可连接终点，将起点终点推入待点击队列\n\t\t\t\t\t\tqClick.push(p1);\n\t\t\t\t\t\tqClick.push(p2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### 5.消除的实现：\n\n- 主要WinAPI函数：\n\n```cpp\n//设置鼠标位置\nBOOL SetCursorPos(int X, int Y);\n//鼠标事件(模拟鼠标点击行为)\nvoid mouse_event(DWORD dwFlags, DWORD dx, DWORD dy, DWORD dwData, ULONG_PTR dwExtraInfo);\n```\n\n- 过程：\n\n按照待消除队列依次模拟鼠标移动点击消除便是。\n\n- 代码：\n\n```cpp\nwhile (!qClick.empty())\n{\n\tPointDir p;\n\tp = qClick.front();\n\t//设置鼠标位置\n\tSetCursorPos(windowX + raceX + p.x * (blockSizeX + blank), windowY + raceY + p.y * (blockSizeY + blank));\n\t//模拟鼠标点击，先按下(LEFTDOWN)再放开(LEFTUP)\n\tmouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);\n\tSleep(10); //要留给某些应用的反应时间\n\tmouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);\n\tqClick.pop();\n}\n```","slug":"early/ 基于像素识别的连连看辅助-基于像素识别的连连看辅助","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec91d270002v0l4ffn62v3a","content":"<p>这个算是除了课程设计之外我的第一个小工具，这里重点分析一下思路，有基础的读者应该可以通过<strong>参考</strong>本文章写出自己的程序。</p>\n<p><em><strong>注:此文章仅用于学习参考</strong></em></p>\n<h2 id=\"一、-需要的知识：\"><a href=\"#一、-需要的知识：\" class=\"headerlink\" title=\"一、 需要的知识：\"></a>一、 需要的知识：</h2><ul>\n<li>C++基础</li>\n<li>WinAPI的使用</li>\n</ul>\n<h2 id=\"二、-程序实现原理步骤：\"><a href=\"#二、-程序实现原理步骤：\" class=\"headerlink\" title=\"二、 程序实现原理步骤：\"></a>二、 程序实现原理步骤：</h2><ol>\n<li>获取游戏及图片信息</li>\n<li>分析图片及定位将其转化为矩阵(二维数组)</li>\n<li>通过BFS算法计算消除顺序</li>\n<li>发送对应鼠标信息进行消除。</li>\n</ol>\n<h2 id=\"三、-分步说明\"><a href=\"#三、-分步说明\" class=\"headerlink\" title=\"三、 分步说明\"></a>三、 分步说明</h2><h3 id=\"1-使用的结构体与参数说明：\"><a href=\"#1-使用的结构体与参数说明：\" class=\"headerlink\" title=\"1. 使用的结构体与参数说明：\"></a>1. 使用的结构体与参数说明：</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//点坐标带方向与当前步数</span><br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">PointDir</span><br>&#123;<br>\t<span class=\"hljs-type\">int</span> x;<br>\t<span class=\"hljs-type\">int</span> y;<br>\t<span class=\"hljs-type\">int</span> step;<span class=\"hljs-comment\">//bfs中距离起点的距离</span><br>\t<span class=\"hljs-type\">int</span> dir;<span class=\"hljs-comment\">//bfs中当前拓展的方向</span><br>&#125;;<br><br><span class=\"hljs-comment\">//RGB颜色</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Color</span><br>&#123;<br>  <span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> R; <span class=\"hljs-comment\">//红色的亮度</span><br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> G; <span class=\"hljs-comment\">//绿色的亮度</span><br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> B; <span class=\"hljs-comment\">//蓝色的亮度</span><br>\t<span class=\"hljs-built_in\">Color</span>(); <span class=\"hljs-comment\">//初始化参数为0</span><br>\t<span class=\"hljs-built_in\">Color</span>(<span class=\"hljs-type\">int</span> r, <span class=\"hljs-type\">int</span> g, <span class=\"hljs-type\">int</span> b); <span class=\"hljs-comment\">//以rgb值初始化参数</span><br>\t<span class=\"hljs-type\">void</span> <span class=\"hljs-keyword\">operator</span>=(COLORREF c); <span class=\"hljs-comment\">//以COLORREF对象赋值</span><br>\t<span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>==(Color &amp;c);<br>\t<span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>!=(Color &amp;c);<br>\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">displayRGBInfo</span><span class=\"hljs-params\">()</span></span>;<br>&#125;;<br><br><span class=\"hljs-comment\">//一个方块</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Block</span><br>&#123;<br>  <span class=\"hljs-keyword\">public</span>:<br>\tColor rect[blockSizeY][blockSizeX];<span class=\"hljs-comment\">//一个方块内的所有像素点信息</span><br>\t<span class=\"hljs-built_in\">Block</span>();<span class=\"hljs-comment\">// 初始化0</span><br>\t<span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>==(Block &amp;b);<br>&#125;;<br><br><span class=\"hljs-comment\">//精度值，影响截取速度（单位 像素）</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> radious;<br><span class=\"hljs-comment\">//窗口 在屏幕内 的位置（单位 像素）</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> windowX;<br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> windowY;<br><span class=\"hljs-comment\">//窗口内 到地图 的偏移量（单位 像素）</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> raceX = xx + radious;<br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> raceY = xx + radious;<br><span class=\"hljs-comment\">//地图棋盘大小（单位 行列）</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> sizeX;<br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> sizeY;<br><span class=\"hljs-comment\">//方块大小（单位 像素）</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> blockSizeX = xx - radious * <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> blockSizeY = xx - +radious * <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-comment\">//每个方块之间的间隔（单位 像素）</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> blank = xx + radious * <span class=\"hljs-number\">2</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-对图像的截取：\"><a href=\"#2-对图像的截取：\" class=\"headerlink\" title=\"2. 对图像的截取：\"></a>2. 对图像的截取：</h3><ul>\n<li>使用的主要WinAPI函数：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//以字符串匹配查找窗口</span><br><span class=\"hljs-function\">HWND <span class=\"hljs-title\">FindWindow</span><span class=\"hljs-params\">(LPCSTR lpClassName, LPCSTR lpWindowName)</span></span>;<br><span class=\"hljs-comment\">//改变窗口的大小位置以及窗口级别</span><br><span class=\"hljs-function\">BOOL WINAPI <span class=\"hljs-title\">SetWindowPos</span><span class=\"hljs-params\">(HWND,HWND hWndInsertAfter,<span class=\"hljs-type\">int</span> X,<span class=\"hljs-type\">int</span> Y,<span class=\"hljs-type\">int</span> cx,_In_ <span class=\"hljs-type\">int</span> cy, UINT uFlags)</span></span>;<br><span class=\"hljs-comment\">//获取设备句柄</span><br><span class=\"hljs-function\">HDC <span class=\"hljs-title\">GetDC</span><span class=\"hljs-params\">(HWND)</span></span>;<br><span class=\"hljs-comment\">//获取对应（x,y）坐标的像素点信息</span><br><span class=\"hljs-function\">COLORREF <span class=\"hljs-title\">GetPixel</span><span class=\"hljs-params\">(HDC hdc, <span class=\"hljs-type\">int</span> X, <span class=\"hljs-type\">int</span> Y)</span></span>;<br><span class=\"hljs-comment\">// 激活窗口</span><br><span class=\"hljs-built_in\">SetForegroundWindow</span>(hwnd);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>过程：</li>\n</ul>\n<p>以窗口名称查找游戏窗口得到对应句柄，激活窗口，设置窗口位置(可省，仅便于计算像素点位置)。手动计算得出牌面上每个方块的像素位置，对每个方块截取像素并保存在相应结构体数组内。</p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//查找并设置窗口</span><br>HWND hwnd=<span class=\"hljs-literal\">NULL</span> <span class=\"hljs-comment\">//初始化窗口句柄</span><br>cout &lt;&lt; <span class=\"hljs-string\">&quot;正在查找窗口 &lt;&lt;游戏窗口名称&gt;&gt;...&quot;</span> &lt;&lt; endl;<br><span class=\"hljs-keyword\">while</span> (hwnd == <span class=\"hljs-literal\">NULL</span>)<br>&#123;<br>\thwnd = <span class=\"hljs-built_in\">FindWindow</span>(<span class=\"hljs-literal\">NULL</span>, <span class=\"hljs-built_in\">TEXT</span>(<span class=\"hljs-string\">&quot;游戏窗口名称&quot;</span>));<br>&#125;<br>cout &lt;&lt; <span class=\"hljs-string\">&quot;窗口已找到&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class=\"hljs-string\">&quot;设置窗口位置&quot;</span> &lt;&lt; endl;<br><span class=\"hljs-built_in\">SetWindowPos</span>(hwnd, HWND_TOP, windowX, windowY, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, SWP_NOSIZE);<span class=\"hljs-comment\">// 设置窗口位置但不改变大小</span><br><span class=\"hljs-built_in\">SetForegroundWindow</span>(hwnd);<span class=\"hljs-comment\">// 激活窗口</span><br>&#125;<br><br><span class=\"hljs-comment\">//截取并保存每个方块信息</span><br>cout &lt;&lt; <span class=\"hljs-string\">&quot;获取方块信息...&quot;</span> &lt;&lt; endl;<br><span class=\"hljs-comment\">//保存每个方块的rgb值</span><br>HDC hdc = <span class=\"hljs-built_in\">GetDC</span>(hwnd);<br>Block block[sizeY][sizeX];<br><br><span class=\"hljs-comment\">//棋盘上的每个方块</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> row = <span class=\"hljs-number\">0</span>; row &lt; sizeY; row++)<br>&#123;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> col = <span class=\"hljs-number\">0</span>; col &lt; sizeX; col++)<br>\t&#123;<br>\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;正在获取block[&quot;</span> &lt;&lt; row &lt;&lt; <span class=\"hljs-string\">&quot;][&quot;</span> &lt;&lt; col &lt;&lt; <span class=\"hljs-string\">&quot;]方块信息...&quot;</span> &lt;&lt; endl;<br>\t\t<span class=\"hljs-comment\">//每个方块内的每个像素点</span><br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; blockSizeY; i++)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; blockSizeX; j++)<br>\t\t\t&#123;<br>\t\t\t\t<span class=\"hljs-comment\">//分别保存每个方块的每个像素点信息</span><br>\t\t\t\tblock[row][col].rect[i][j] = <span class=\"hljs-built_in\">GetPixel</span>(hdc, raceX + col * (blockSizeX + blank) + j, raceY + row * (blockSizeY + blank) + i);<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-将截取的图像转化为矩阵-二维数组-：\"><a href=\"#3-将截取的图像转化为矩阵-二维数组-：\" class=\"headerlink\" title=\"3. 将截取的图像转化为矩阵(二维数组)：\"></a>3. 将截取的图像转化为矩阵(二维数组)：</h3><ul>\n<li>过程：</li>\n</ul>\n<p>对保存的每个方块的像素信息进行比对，相同方块(截取的像素点信息相同)使用同一个数字编号，保存在一个二维数组内</p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">Block space;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; blockSizeY; i++)<br>&#123;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; blockSizeX; j++)<br>\t&#123;<br>\t\t<span class=\"hljs-comment\">//设置空白方块的rgb值</span><br>\t\tspace.rect[i][j].R = xx;<br>\t\tspace.rect[i][j].G = xx;<br>\t\tspace.rect[i][j].B = xx;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-type\">int</span> cnt = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//起始编号为1,0表示为空地</span><br>Block pblock[<span class=\"hljs-number\">50</span>];<span class=\"hljs-comment\">//临时变量，保存已经出现过的牌形种类</span><br>pblock[<span class=\"hljs-number\">0</span>] = space;<br><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; sizeY; i++)<br>&#123;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; sizeX; j++)<br>\t&#123;<br>\t\t<span class=\"hljs-type\">bool</span> flag = <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">// 标记当前坐标方块此前是否出现过，k为该方块对应编号</span><br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt; cnt; k++)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-comment\">//越界处理提示，一般不会出现</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-number\">49</span>)<br>\t\t\t&#123;<br>\t\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;error！牌面数量太多！&quot;</span> &lt;&lt; endl;<br>\t\t\t\t<span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (block[i][j] == pblock[k])<br>\t\t\t&#123;<br>\t\t\t\tmap[i][j] = k;<br>\t\t\t\tflag = <span class=\"hljs-literal\">true</span>;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span>;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//如果此前都没有出现过该方块，给予新编号并保存当前方块</span><br>\t\t<span class=\"hljs-keyword\">if</span> (!flag)<br>\t\t&#123;<br>\t\t\tpblock[cnt] = block[i][j];<br>\t\t\tmap[i][j] = cnt;<br>\t\t\tcnt++;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-消除路径分析：\"><a href=\"#4-消除路径分析：\" class=\"headerlink\" title=\"4. 消除路径分析：\"></a>4. 消除路径分析：</h3><ul>\n<li>过程：</li>\n</ul>\n<p>算法使用BFS广度优先搜索，对每个未消除方块展开搜索，此处注意连连看限制条件（拐点不超过2个）将待消除方块信息(鼠标点击的坐标)保存在一个队列中。</p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//该bfs仅判断单个方块是否有对应可达终点方块</span><br><span class=\"hljs-comment\">//inX,inY为起点方块,ansX,ansY为找到的可连接的终点方块</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> inX, <span class=\"hljs-type\">int</span> inY, <span class=\"hljs-type\">int</span> &amp;ansX, <span class=\"hljs-type\">int</span> &amp;ansY)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tPointDir inp, curp, nextp;<span class=\"hljs-comment\">//起点，当前访问点，下一访问点</span><br>\t<span class=\"hljs-comment\">//初始化起点</span><br>\tinp.x = inX;<br>\tinp.y = inY;<br>\tinp.step = <span class=\"hljs-number\">-1</span>;<span class=\"hljs-comment\">// 由起点开始的点出发时step必定+1变为0</span><br>\tinp.dir = <span class=\"hljs-number\">-1</span>;<span class=\"hljs-comment\">// 起点不设置有效方向，便于step计数</span><br><br>\t<span class=\"hljs-comment\">//q保存bfs待访问队列</span><br>\tqueue&lt;PointDir&gt; q;<br>\tcurp = inp;<br>\tq.<span class=\"hljs-built_in\">push</span>(curp);<br>\t<span class=\"hljs-type\">bool</span> isFind = <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">//是否找到可连接的对应方块</span><br>\t<span class=\"hljs-comment\">//当队列不空并且没有找到对应终点方块时继续循环</span><br>\t<span class=\"hljs-keyword\">while</span> (!q.<span class=\"hljs-built_in\">empty</span>() &amp;&amp; isFind == <span class=\"hljs-literal\">false</span>)<br>\t&#123;<br>\t\tcurp = q.<span class=\"hljs-built_in\">front</span>();<br>\t\tq.<span class=\"hljs-built_in\">pop</span>();<br>\t\t<span class=\"hljs-comment\">//上下左右四个方向，dirs[][]数组为四个方向的向量数组</span><br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt; <span class=\"hljs-number\">4</span>; k++)<br>\t\t&#123;<br>\t\t\tnextp.x = curp.x + dirs[k][<span class=\"hljs-number\">0</span>];<br>\t\t\tnextp.y = curp.y + dirs[k][<span class=\"hljs-number\">1</span>];<br>\t\t\tnextp.dir = k;<br>\t\t\tnextp.step = curp.step;<br>\t\t\t<span class=\"hljs-comment\">//当当前访问点方向与上一点方向不相同，判定为拐点，step++</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> (curp.dir != k)<br>\t\t\t&#123;<br>\t\t\t\tnextp.step++;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">//当拐点大于2个(不符合连连看消除条件路径)跳过当前次循环</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> (nextp.step &gt; <span class=\"hljs-number\">2</span>)<br>\t\t\t&#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">//当当前点为起点时跳过当前次循环</span><br>\t\t\t<span class=\"hljs-comment\">//因为连连看可消除路径数小于可到达路径数，故不判定当前点是否曾经被走过即用一个bool visited[][]保存访问状态，若有更好解决办法欢迎讨论。</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> (nextp.x == inp.x &amp;&amp; nextp.y == inp.y)<br>\t\t\t&#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">//边界检查</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> ((nextp.x &gt;= <span class=\"hljs-number\">0</span>) &amp;&amp; (nextp.x &lt; sizeX) &amp;&amp; (nextp.y &gt;= <span class=\"hljs-number\">0</span>) &amp;&amp; (nextp.y &lt; sizeY))<br>\t\t\t&#123;<br>\t\t\t\t<span class=\"hljs-comment\">//若是空地加入待访问队列</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> (map[nextp.y][nextp.x] == <span class=\"hljs-number\">0</span>)<br>\t\t\t\t&#123;<br>\t\t\t\t\tq.<span class=\"hljs-built_in\">push</span>(nextp);<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-comment\">//若与起点方块相同，则判定找到对应终点方块，记录坐标并退出循环</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> (map[nextp.y][nextp.x] == map[inp.y][inp.x])<br>\t\t\t\t&#123;<br>\t\t\t\t\tmap[inp.y][inp.x] = <span class=\"hljs-number\">0</span>;<br>\t\t\t\t\tmap[nextp.y][nextp.x] = <span class=\"hljs-number\">0</span>;<br>\t\t\t\t\tansX = nextp.x;<br>\t\t\t\t\tansY = nextp.y;<br>\t\t\t\t\tisFind = <span class=\"hljs-literal\">true</span>;<br>\t\t\t\t\t<span class=\"hljs-keyword\">break</span>;<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> isFind;<br>&#125;<br><br><span class=\"hljs-comment\">//计算点击顺序并保存在待点击队列qClick</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">caculate</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-comment\">//一次遍历并不能把整个棋盘消除完全，经过实验一般10*20的棋盘在不考虑 无牌可消 的情况下可以在3-4次循环内消除完整。</span><br>\t<span class=\"hljs-comment\">//！注意此代码中的方法并不好，更好的方法应该是无限循环，当无牌可消的情况下加入重列动作，直到消除完整。</span><br>\t<span class=\"hljs-comment\">//将待点击队列qClick改为优先队列（以起终点距离step排序，近的优先）在连连看生成代码较完善的情况下，可以极大的减少 无牌可消 的情况。</span><br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt; <span class=\"hljs-number\">5</span>; k++)<br>\t&#123;<br>\t\t<span class=\"hljs-comment\">//bool checkOver()函数 检查当前棋盘是否已经消除完毕</span><br>\t\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">checkOver</span>())<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">break</span>;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; sizeY; i++)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; sizeX; j++)<br>\t\t\t&#123;<br>\t\t\t\t<span class=\"hljs-comment\">//对每一个点bfs展开</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> (map[i][j] != <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">//0是空地</span><br>\t\t\t\t&#123;<br>\t\t\t\t\tPointDir p1;<br>\t\t\t\t\tp1.x = j;<br>\t\t\t\t\tp1.y = i;<br>\t\t\t\t\tPointDir p2;<br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">bfs</span>(j, i, p2.x, p2.y))<br>\t\t\t\t\t&#123;<br>\t\t\t\t\t\t<span class=\"hljs-comment\">//若找到可连接终点，将起点终点推入待点击队列</span><br>\t\t\t\t\t\tqClick.<span class=\"hljs-built_in\">push</span>(p1);<br>\t\t\t\t\t\tqClick.<span class=\"hljs-built_in\">push</span>(p2);<br>\t\t\t\t\t&#125;<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-消除的实现：\"><a href=\"#5-消除的实现：\" class=\"headerlink\" title=\"5.消除的实现：\"></a>5.消除的实现：</h3><ul>\n<li>主要WinAPI函数：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//设置鼠标位置</span><br><span class=\"hljs-function\">BOOL <span class=\"hljs-title\">SetCursorPos</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> X, <span class=\"hljs-type\">int</span> Y)</span></span>;<br><span class=\"hljs-comment\">//鼠标事件(模拟鼠标点击行为)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">mouse_event</span><span class=\"hljs-params\">(DWORD dwFlags, DWORD dx, DWORD dy, DWORD dwData, ULONG_PTR dwExtraInfo)</span></span>;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>过程：</li>\n</ul>\n<p>按照待消除队列依次模拟鼠标移动点击消除便是。</p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span> (!qClick.<span class=\"hljs-built_in\">empty</span>())<br>&#123;<br>\tPointDir p;<br>\tp = qClick.<span class=\"hljs-built_in\">front</span>();<br>\t<span class=\"hljs-comment\">//设置鼠标位置</span><br>\t<span class=\"hljs-built_in\">SetCursorPos</span>(windowX + raceX + p.x * (blockSizeX + blank), windowY + raceY + p.y * (blockSizeY + blank));<br>\t<span class=\"hljs-comment\">//模拟鼠标点击，先按下(LEFTDOWN)再放开(LEFTUP)</span><br>\t<span class=\"hljs-built_in\">mouse_event</span>(MOUSEEVENTF_LEFTDOWN, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>\t<span class=\"hljs-built_in\">Sleep</span>(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">//要留给某些应用的反应时间</span><br>\t<span class=\"hljs-built_in\">mouse_event</span>(MOUSEEVENTF_LEFTUP, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>\tqClick.<span class=\"hljs-built_in\">pop</span>();<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>这个算是除了课程设计之外我的第一个小工具，这里重点分析一下思路，有基础的读者应该可以通过<strong>参考</strong>本文章写出自己的程序。</p>\n<p><em><strong>注:此文章仅用于学习参考</strong></em></p>\n<h2 id=\"一、-需要的知识：\"><a href=\"#一、-需要的知识：\" class=\"headerlink\" title=\"一、 需要的知识：\"></a>一、 需要的知识：</h2><ul>\n<li>C++基础</li>\n<li>WinAPI的使用</li>\n</ul>\n<h2 id=\"二、-程序实现原理步骤：\"><a href=\"#二、-程序实现原理步骤：\" class=\"headerlink\" title=\"二、 程序实现原理步骤：\"></a>二、 程序实现原理步骤：</h2><ol>\n<li>获取游戏及图片信息</li>\n<li>分析图片及定位将其转化为矩阵(二维数组)</li>\n<li>通过BFS算法计算消除顺序</li>\n<li>发送对应鼠标信息进行消除。</li>\n</ol>\n<h2 id=\"三、-分步说明\"><a href=\"#三、-分步说明\" class=\"headerlink\" title=\"三、 分步说明\"></a>三、 分步说明</h2><h3 id=\"1-使用的结构体与参数说明：\"><a href=\"#1-使用的结构体与参数说明：\" class=\"headerlink\" title=\"1. 使用的结构体与参数说明：\"></a>1. 使用的结构体与参数说明：</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//点坐标带方向与当前步数</span><br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">PointDir</span><br>&#123;<br>\t<span class=\"hljs-type\">int</span> x;<br>\t<span class=\"hljs-type\">int</span> y;<br>\t<span class=\"hljs-type\">int</span> step;<span class=\"hljs-comment\">//bfs中距离起点的距离</span><br>\t<span class=\"hljs-type\">int</span> dir;<span class=\"hljs-comment\">//bfs中当前拓展的方向</span><br>&#125;;<br><br><span class=\"hljs-comment\">//RGB颜色</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Color</span><br>&#123;<br>  <span class=\"hljs-keyword\">public</span>:<br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> R; <span class=\"hljs-comment\">//红色的亮度</span><br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> G; <span class=\"hljs-comment\">//绿色的亮度</span><br>\t<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> B; <span class=\"hljs-comment\">//蓝色的亮度</span><br>\t<span class=\"hljs-built_in\">Color</span>(); <span class=\"hljs-comment\">//初始化参数为0</span><br>\t<span class=\"hljs-built_in\">Color</span>(<span class=\"hljs-type\">int</span> r, <span class=\"hljs-type\">int</span> g, <span class=\"hljs-type\">int</span> b); <span class=\"hljs-comment\">//以rgb值初始化参数</span><br>\t<span class=\"hljs-type\">void</span> <span class=\"hljs-keyword\">operator</span>=(COLORREF c); <span class=\"hljs-comment\">//以COLORREF对象赋值</span><br>\t<span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>==(Color &amp;c);<br>\t<span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>!=(Color &amp;c);<br>\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">displayRGBInfo</span><span class=\"hljs-params\">()</span></span>;<br>&#125;;<br><br><span class=\"hljs-comment\">//一个方块</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Block</span><br>&#123;<br>  <span class=\"hljs-keyword\">public</span>:<br>\tColor rect[blockSizeY][blockSizeX];<span class=\"hljs-comment\">//一个方块内的所有像素点信息</span><br>\t<span class=\"hljs-built_in\">Block</span>();<span class=\"hljs-comment\">// 初始化0</span><br>\t<span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>==(Block &amp;b);<br>&#125;;<br><br><span class=\"hljs-comment\">//精度值，影响截取速度（单位 像素）</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> radious;<br><span class=\"hljs-comment\">//窗口 在屏幕内 的位置（单位 像素）</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> windowX;<br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> windowY;<br><span class=\"hljs-comment\">//窗口内 到地图 的偏移量（单位 像素）</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> raceX = xx + radious;<br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> raceY = xx + radious;<br><span class=\"hljs-comment\">//地图棋盘大小（单位 行列）</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> sizeX;<br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> sizeY;<br><span class=\"hljs-comment\">//方块大小（单位 像素）</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> blockSizeX = xx - radious * <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> blockSizeY = xx - +radious * <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-comment\">//每个方块之间的间隔（单位 像素）</span><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> blank = xx + radious * <span class=\"hljs-number\">2</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-对图像的截取：\"><a href=\"#2-对图像的截取：\" class=\"headerlink\" title=\"2. 对图像的截取：\"></a>2. 对图像的截取：</h3><ul>\n<li>使用的主要WinAPI函数：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//以字符串匹配查找窗口</span><br><span class=\"hljs-function\">HWND <span class=\"hljs-title\">FindWindow</span><span class=\"hljs-params\">(LPCSTR lpClassName, LPCSTR lpWindowName)</span></span>;<br><span class=\"hljs-comment\">//改变窗口的大小位置以及窗口级别</span><br><span class=\"hljs-function\">BOOL WINAPI <span class=\"hljs-title\">SetWindowPos</span><span class=\"hljs-params\">(HWND,HWND hWndInsertAfter,<span class=\"hljs-type\">int</span> X,<span class=\"hljs-type\">int</span> Y,<span class=\"hljs-type\">int</span> cx,_In_ <span class=\"hljs-type\">int</span> cy, UINT uFlags)</span></span>;<br><span class=\"hljs-comment\">//获取设备句柄</span><br><span class=\"hljs-function\">HDC <span class=\"hljs-title\">GetDC</span><span class=\"hljs-params\">(HWND)</span></span>;<br><span class=\"hljs-comment\">//获取对应（x,y）坐标的像素点信息</span><br><span class=\"hljs-function\">COLORREF <span class=\"hljs-title\">GetPixel</span><span class=\"hljs-params\">(HDC hdc, <span class=\"hljs-type\">int</span> X, <span class=\"hljs-type\">int</span> Y)</span></span>;<br><span class=\"hljs-comment\">// 激活窗口</span><br><span class=\"hljs-built_in\">SetForegroundWindow</span>(hwnd);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>过程：</li>\n</ul>\n<p>以窗口名称查找游戏窗口得到对应句柄，激活窗口，设置窗口位置(可省，仅便于计算像素点位置)。手动计算得出牌面上每个方块的像素位置，对每个方块截取像素并保存在相应结构体数组内。</p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//查找并设置窗口</span><br>HWND hwnd=<span class=\"hljs-literal\">NULL</span> <span class=\"hljs-comment\">//初始化窗口句柄</span><br>cout &lt;&lt; <span class=\"hljs-string\">&quot;正在查找窗口 &lt;&lt;游戏窗口名称&gt;&gt;...&quot;</span> &lt;&lt; endl;<br><span class=\"hljs-keyword\">while</span> (hwnd == <span class=\"hljs-literal\">NULL</span>)<br>&#123;<br>\thwnd = <span class=\"hljs-built_in\">FindWindow</span>(<span class=\"hljs-literal\">NULL</span>, <span class=\"hljs-built_in\">TEXT</span>(<span class=\"hljs-string\">&quot;游戏窗口名称&quot;</span>));<br>&#125;<br>cout &lt;&lt; <span class=\"hljs-string\">&quot;窗口已找到&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class=\"hljs-string\">&quot;设置窗口位置&quot;</span> &lt;&lt; endl;<br><span class=\"hljs-built_in\">SetWindowPos</span>(hwnd, HWND_TOP, windowX, windowY, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, SWP_NOSIZE);<span class=\"hljs-comment\">// 设置窗口位置但不改变大小</span><br><span class=\"hljs-built_in\">SetForegroundWindow</span>(hwnd);<span class=\"hljs-comment\">// 激活窗口</span><br>&#125;<br><br><span class=\"hljs-comment\">//截取并保存每个方块信息</span><br>cout &lt;&lt; <span class=\"hljs-string\">&quot;获取方块信息...&quot;</span> &lt;&lt; endl;<br><span class=\"hljs-comment\">//保存每个方块的rgb值</span><br>HDC hdc = <span class=\"hljs-built_in\">GetDC</span>(hwnd);<br>Block block[sizeY][sizeX];<br><br><span class=\"hljs-comment\">//棋盘上的每个方块</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> row = <span class=\"hljs-number\">0</span>; row &lt; sizeY; row++)<br>&#123;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> col = <span class=\"hljs-number\">0</span>; col &lt; sizeX; col++)<br>\t&#123;<br>\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;正在获取block[&quot;</span> &lt;&lt; row &lt;&lt; <span class=\"hljs-string\">&quot;][&quot;</span> &lt;&lt; col &lt;&lt; <span class=\"hljs-string\">&quot;]方块信息...&quot;</span> &lt;&lt; endl;<br>\t\t<span class=\"hljs-comment\">//每个方块内的每个像素点</span><br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; blockSizeY; i++)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; blockSizeX; j++)<br>\t\t\t&#123;<br>\t\t\t\t<span class=\"hljs-comment\">//分别保存每个方块的每个像素点信息</span><br>\t\t\t\tblock[row][col].rect[i][j] = <span class=\"hljs-built_in\">GetPixel</span>(hdc, raceX + col * (blockSizeX + blank) + j, raceY + row * (blockSizeY + blank) + i);<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-将截取的图像转化为矩阵-二维数组-：\"><a href=\"#3-将截取的图像转化为矩阵-二维数组-：\" class=\"headerlink\" title=\"3. 将截取的图像转化为矩阵(二维数组)：\"></a>3. 将截取的图像转化为矩阵(二维数组)：</h3><ul>\n<li>过程：</li>\n</ul>\n<p>对保存的每个方块的像素信息进行比对，相同方块(截取的像素点信息相同)使用同一个数字编号，保存在一个二维数组内</p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">Block space;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; blockSizeY; i++)<br>&#123;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; blockSizeX; j++)<br>\t&#123;<br>\t\t<span class=\"hljs-comment\">//设置空白方块的rgb值</span><br>\t\tspace.rect[i][j].R = xx;<br>\t\tspace.rect[i][j].G = xx;<br>\t\tspace.rect[i][j].B = xx;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-type\">int</span> cnt = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//起始编号为1,0表示为空地</span><br>Block pblock[<span class=\"hljs-number\">50</span>];<span class=\"hljs-comment\">//临时变量，保存已经出现过的牌形种类</span><br>pblock[<span class=\"hljs-number\">0</span>] = space;<br><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; sizeY; i++)<br>&#123;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; sizeX; j++)<br>\t&#123;<br>\t\t<span class=\"hljs-type\">bool</span> flag = <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">// 标记当前坐标方块此前是否出现过，k为该方块对应编号</span><br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt; cnt; k++)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-comment\">//越界处理提示，一般不会出现</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-number\">49</span>)<br>\t\t\t&#123;<br>\t\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;error！牌面数量太多！&quot;</span> &lt;&lt; endl;<br>\t\t\t\t<span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (block[i][j] == pblock[k])<br>\t\t\t&#123;<br>\t\t\t\tmap[i][j] = k;<br>\t\t\t\tflag = <span class=\"hljs-literal\">true</span>;<br>\t\t\t\t<span class=\"hljs-keyword\">break</span>;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">//如果此前都没有出现过该方块，给予新编号并保存当前方块</span><br>\t\t<span class=\"hljs-keyword\">if</span> (!flag)<br>\t\t&#123;<br>\t\t\tpblock[cnt] = block[i][j];<br>\t\t\tmap[i][j] = cnt;<br>\t\t\tcnt++;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-消除路径分析：\"><a href=\"#4-消除路径分析：\" class=\"headerlink\" title=\"4. 消除路径分析：\"></a>4. 消除路径分析：</h3><ul>\n<li>过程：</li>\n</ul>\n<p>算法使用BFS广度优先搜索，对每个未消除方块展开搜索，此处注意连连看限制条件（拐点不超过2个）将待消除方块信息(鼠标点击的坐标)保存在一个队列中。</p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//该bfs仅判断单个方块是否有对应可达终点方块</span><br><span class=\"hljs-comment\">//inX,inY为起点方块,ansX,ansY为找到的可连接的终点方块</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> inX, <span class=\"hljs-type\">int</span> inY, <span class=\"hljs-type\">int</span> &amp;ansX, <span class=\"hljs-type\">int</span> &amp;ansY)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tPointDir inp, curp, nextp;<span class=\"hljs-comment\">//起点，当前访问点，下一访问点</span><br>\t<span class=\"hljs-comment\">//初始化起点</span><br>\tinp.x = inX;<br>\tinp.y = inY;<br>\tinp.step = <span class=\"hljs-number\">-1</span>;<span class=\"hljs-comment\">// 由起点开始的点出发时step必定+1变为0</span><br>\tinp.dir = <span class=\"hljs-number\">-1</span>;<span class=\"hljs-comment\">// 起点不设置有效方向，便于step计数</span><br><br>\t<span class=\"hljs-comment\">//q保存bfs待访问队列</span><br>\tqueue&lt;PointDir&gt; q;<br>\tcurp = inp;<br>\tq.<span class=\"hljs-built_in\">push</span>(curp);<br>\t<span class=\"hljs-type\">bool</span> isFind = <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">//是否找到可连接的对应方块</span><br>\t<span class=\"hljs-comment\">//当队列不空并且没有找到对应终点方块时继续循环</span><br>\t<span class=\"hljs-keyword\">while</span> (!q.<span class=\"hljs-built_in\">empty</span>() &amp;&amp; isFind == <span class=\"hljs-literal\">false</span>)<br>\t&#123;<br>\t\tcurp = q.<span class=\"hljs-built_in\">front</span>();<br>\t\tq.<span class=\"hljs-built_in\">pop</span>();<br>\t\t<span class=\"hljs-comment\">//上下左右四个方向，dirs[][]数组为四个方向的向量数组</span><br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt; <span class=\"hljs-number\">4</span>; k++)<br>\t\t&#123;<br>\t\t\tnextp.x = curp.x + dirs[k][<span class=\"hljs-number\">0</span>];<br>\t\t\tnextp.y = curp.y + dirs[k][<span class=\"hljs-number\">1</span>];<br>\t\t\tnextp.dir = k;<br>\t\t\tnextp.step = curp.step;<br>\t\t\t<span class=\"hljs-comment\">//当当前访问点方向与上一点方向不相同，判定为拐点，step++</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> (curp.dir != k)<br>\t\t\t&#123;<br>\t\t\t\tnextp.step++;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">//当拐点大于2个(不符合连连看消除条件路径)跳过当前次循环</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> (nextp.step &gt; <span class=\"hljs-number\">2</span>)<br>\t\t\t&#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">//当当前点为起点时跳过当前次循环</span><br>\t\t\t<span class=\"hljs-comment\">//因为连连看可消除路径数小于可到达路径数，故不判定当前点是否曾经被走过即用一个bool visited[][]保存访问状态，若有更好解决办法欢迎讨论。</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> (nextp.x == inp.x &amp;&amp; nextp.y == inp.y)<br>\t\t\t&#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span>;<br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-comment\">//边界检查</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> ((nextp.x &gt;= <span class=\"hljs-number\">0</span>) &amp;&amp; (nextp.x &lt; sizeX) &amp;&amp; (nextp.y &gt;= <span class=\"hljs-number\">0</span>) &amp;&amp; (nextp.y &lt; sizeY))<br>\t\t\t&#123;<br>\t\t\t\t<span class=\"hljs-comment\">//若是空地加入待访问队列</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> (map[nextp.y][nextp.x] == <span class=\"hljs-number\">0</span>)<br>\t\t\t\t&#123;<br>\t\t\t\t\tq.<span class=\"hljs-built_in\">push</span>(nextp);<br>\t\t\t\t&#125;<br>\t\t\t\t<span class=\"hljs-comment\">//若与起点方块相同，则判定找到对应终点方块，记录坐标并退出循环</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> (map[nextp.y][nextp.x] == map[inp.y][inp.x])<br>\t\t\t\t&#123;<br>\t\t\t\t\tmap[inp.y][inp.x] = <span class=\"hljs-number\">0</span>;<br>\t\t\t\t\tmap[nextp.y][nextp.x] = <span class=\"hljs-number\">0</span>;<br>\t\t\t\t\tansX = nextp.x;<br>\t\t\t\t\tansY = nextp.y;<br>\t\t\t\t\tisFind = <span class=\"hljs-literal\">true</span>;<br>\t\t\t\t\t<span class=\"hljs-keyword\">break</span>;<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> isFind;<br>&#125;<br><br><span class=\"hljs-comment\">//计算点击顺序并保存在待点击队列qClick</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">caculate</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-comment\">//一次遍历并不能把整个棋盘消除完全，经过实验一般10*20的棋盘在不考虑 无牌可消 的情况下可以在3-4次循环内消除完整。</span><br>\t<span class=\"hljs-comment\">//！注意此代码中的方法并不好，更好的方法应该是无限循环，当无牌可消的情况下加入重列动作，直到消除完整。</span><br>\t<span class=\"hljs-comment\">//将待点击队列qClick改为优先队列（以起终点距离step排序，近的优先）在连连看生成代码较完善的情况下，可以极大的减少 无牌可消 的情况。</span><br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt; <span class=\"hljs-number\">5</span>; k++)<br>\t&#123;<br>\t\t<span class=\"hljs-comment\">//bool checkOver()函数 检查当前棋盘是否已经消除完毕</span><br>\t\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">checkOver</span>())<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">break</span>;<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; sizeY; i++)<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; sizeX; j++)<br>\t\t\t&#123;<br>\t\t\t\t<span class=\"hljs-comment\">//对每一个点bfs展开</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> (map[i][j] != <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">//0是空地</span><br>\t\t\t\t&#123;<br>\t\t\t\t\tPointDir p1;<br>\t\t\t\t\tp1.x = j;<br>\t\t\t\t\tp1.y = i;<br>\t\t\t\t\tPointDir p2;<br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">bfs</span>(j, i, p2.x, p2.y))<br>\t\t\t\t\t&#123;<br>\t\t\t\t\t\t<span class=\"hljs-comment\">//若找到可连接终点，将起点终点推入待点击队列</span><br>\t\t\t\t\t\tqClick.<span class=\"hljs-built_in\">push</span>(p1);<br>\t\t\t\t\t\tqClick.<span class=\"hljs-built_in\">push</span>(p2);<br>\t\t\t\t\t&#125;<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-消除的实现：\"><a href=\"#5-消除的实现：\" class=\"headerlink\" title=\"5.消除的实现：\"></a>5.消除的实现：</h3><ul>\n<li>主要WinAPI函数：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//设置鼠标位置</span><br><span class=\"hljs-function\">BOOL <span class=\"hljs-title\">SetCursorPos</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> X, <span class=\"hljs-type\">int</span> Y)</span></span>;<br><span class=\"hljs-comment\">//鼠标事件(模拟鼠标点击行为)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">mouse_event</span><span class=\"hljs-params\">(DWORD dwFlags, DWORD dx, DWORD dy, DWORD dwData, ULONG_PTR dwExtraInfo)</span></span>;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>过程：</li>\n</ul>\n<p>按照待消除队列依次模拟鼠标移动点击消除便是。</p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span> (!qClick.<span class=\"hljs-built_in\">empty</span>())<br>&#123;<br>\tPointDir p;<br>\tp = qClick.<span class=\"hljs-built_in\">front</span>();<br>\t<span class=\"hljs-comment\">//设置鼠标位置</span><br>\t<span class=\"hljs-built_in\">SetCursorPos</span>(windowX + raceX + p.x * (blockSizeX + blank), windowY + raceY + p.y * (blockSizeY + blank));<br>\t<span class=\"hljs-comment\">//模拟鼠标点击，先按下(LEFTDOWN)再放开(LEFTUP)</span><br>\t<span class=\"hljs-built_in\">mouse_event</span>(MOUSEEVENTF_LEFTDOWN, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>\t<span class=\"hljs-built_in\">Sleep</span>(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">//要留给某些应用的反应时间</span><br>\t<span class=\"hljs-built_in\">mouse_event</span>(MOUSEEVENTF_LEFTUP, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>\tqClick.<span class=\"hljs-built_in\">pop</span>();<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"SQL查询表中是否存在符合条件的记录","date":"2020-02-14T08:51:52.000Z","updated":"2021-01-08T09:01:30.639Z","url":"https://maoxian.fun/archives/sql查询表中是否存在符合条件的记录","_content":"\n判断记录是否存在，最主要的问题就是性能问题\n\n话不多说，直接上结果\n\n```\n-- 存在返回 1, 不存在返回 0\nselect ifnull((select 1 from tableName where conditions limit 1 ), 0)﻿ as existed\n```\n\nifnull 函数：如果第一个参数值为null，返回第二个参数的值，如果不为 null 则返回第一个参数的值\n\n错误示范：\n\n```\nselect COUNT(*) from tableName where conditions\n```\n\n根据结果的数量进行比较，简单易懂。但是count(*)统计全表数量，性能开销较大","source":"_posts/early/SQL查询表中是否存在符合条件的记录-sql查询表中是否存在符合条件的记录.md","raw":"---\ntitle: SQL查询表中是否存在符合条件的记录\ndate: 2020-02-14 16:51:52.0\nupdated: 2021-01-08 17:01:30.639\nurl: https://maoxian.fun/archives/sql查询表中是否存在符合条件的记录\ncategories: \n- 程序\n- Sql\ntags: \n- 程序\n- 代码\n- Sql\n---\n\n判断记录是否存在，最主要的问题就是性能问题\n\n话不多说，直接上结果\n\n```\n-- 存在返回 1, 不存在返回 0\nselect ifnull((select 1 from tableName where conditions limit 1 ), 0)﻿ as existed\n```\n\nifnull 函数：如果第一个参数值为null，返回第二个参数的值，如果不为 null 则返回第一个参数的值\n\n错误示范：\n\n```\nselect COUNT(*) from tableName where conditions\n```\n\n根据结果的数量进行比较，简单易懂。但是count(*)统计全表数量，性能开销较大","slug":"early/SQL查询表中是否存在符合条件的记录-sql查询表中是否存在符合条件的记录","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec91d2c0006v0l463ug0gxn","content":"<p>判断记录是否存在，最主要的问题就是性能问题</p>\n<p>话不多说，直接上结果</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\">-- 存在返回 1, 不存在返回 0<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-built_in\">ifnull</span>((<span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">from</span> tableName <span class=\"hljs-keyword\">where</span> conditions <span class=\"hljs-keyword\">limit</span> <span class=\"hljs-number\">1</span> ), <span class=\"hljs-number\">0</span>)﻿ <span class=\"hljs-keyword\">as</span> existed<br></code></pre></td></tr></table></figure>\n\n<p>ifnull 函数：如果第一个参数值为null，返回第二个参数的值，如果不为 null 则返回第一个参数的值</p>\n<p>错误示范：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-built_in\">COUNT</span>(*) <span class=\"hljs-keyword\">from</span> tableName <span class=\"hljs-keyword\">where</span> conditions<br></code></pre></td></tr></table></figure>\n\n<p>根据结果的数量进行比较，简单易懂。但是count(*)统计全表数量，性能开销较大</p>\n","site":{"data":{}},"excerpt":"","more":"<p>判断记录是否存在，最主要的问题就是性能问题</p>\n<p>话不多说，直接上结果</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\">-- 存在返回 1, 不存在返回 0<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-built_in\">ifnull</span>((<span class=\"hljs-keyword\">select</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">from</span> tableName <span class=\"hljs-keyword\">where</span> conditions <span class=\"hljs-keyword\">limit</span> <span class=\"hljs-number\">1</span> ), <span class=\"hljs-number\">0</span>)﻿ <span class=\"hljs-keyword\">as</span> existed<br></code></pre></td></tr></table></figure>\n\n<p>ifnull 函数：如果第一个参数值为null，返回第二个参数的值，如果不为 null 则返回第一个参数的值</p>\n<p>错误示范：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-built_in\">COUNT</span>(*) <span class=\"hljs-keyword\">from</span> tableName <span class=\"hljs-keyword\">where</span> conditions<br></code></pre></td></tr></table></figure>\n\n<p>根据结果的数量进行比较，简单易懂。但是count(*)统计全表数量，性能开销较大</p>\n"},{"title":"SQL根据不同的条件查询count","date":"2020-04-15T08:51:57.000Z","updated":"2021-01-08T09:05:04.560Z","url":"https://maoxian.fun/archives/sql根据不同的条件查询count","_content":"\n在一条语句中根据不同的条件count对应的数据。\n\n```sql\nselect count(if(条件, true, null)), count(if(条件, true, null)) from table;\n```\n\n以上语句可以根据两个不同的条件一次计算出对应的count值，很明显的用到的是IF函数。IF( expr1, expr2, expr3)。\n\n> 以下来自[官方文档](https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html)的说明\n>\n> If expr1 is TRUE (expr1 <> 0 and expr1 <> NULL), IF() returns expr2. Otherwise, it returns expr3.\n\n用到count中，即if的条件为真，则if子句返回true，否则返回null。count子句依据该返回值进行计数。\n\n具体的条件依据需求变化，例如需要去重，可以变为count(distinct if(条件, expr2, expr3))\n\n同理，if也可用于sum等其他聚合函数计算。\n\n**注意：**\n\n*第一条sql语句中的返回值不一定为true, null 可依据需求调整，该文章仅作参考。*\n\n*该文章测试环境为* ***Mysql 5.7.25***","source":"_posts/early/SQL根据不同的条件查询count-sql根据不同的条件查询count.md","raw":"---\ntitle: SQL根据不同的条件查询count\ndate: 2020-04-15 16:51:57.0\nupdated: 2021-01-08 17:05:04.56\nurl: https://maoxian.fun/archives/sql根据不同的条件查询count\ncategories: \n- 程序\n- Sql\ntags: \n- 程序\n- 代码\n- Sql\n---\n\n在一条语句中根据不同的条件count对应的数据。\n\n```sql\nselect count(if(条件, true, null)), count(if(条件, true, null)) from table;\n```\n\n以上语句可以根据两个不同的条件一次计算出对应的count值，很明显的用到的是IF函数。IF( expr1, expr2, expr3)。\n\n> 以下来自[官方文档](https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html)的说明\n>\n> If expr1 is TRUE (expr1 <> 0 and expr1 <> NULL), IF() returns expr2. Otherwise, it returns expr3.\n\n用到count中，即if的条件为真，则if子句返回true，否则返回null。count子句依据该返回值进行计数。\n\n具体的条件依据需求变化，例如需要去重，可以变为count(distinct if(条件, expr2, expr3))\n\n同理，if也可用于sum等其他聚合函数计算。\n\n**注意：**\n\n*第一条sql语句中的返回值不一定为true, null 可依据需求调整，该文章仅作参考。*\n\n*该文章测试环境为* ***Mysql 5.7.25***","slug":"early/SQL根据不同的条件查询count-sql根据不同的条件查询count","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec91d2d0007v0l475la4nt0","content":"<p>在一条语句中根据不同的条件count对应的数据。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-built_in\">count</span>(if(条件, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-keyword\">null</span>)), <span class=\"hljs-built_in\">count</span>(if(条件, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-keyword\">null</span>)) <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">table</span>;<br></code></pre></td></tr></table></figure>\n\n<p>以上语句可以根据两个不同的条件一次计算出对应的count值，很明显的用到的是IF函数。IF( expr1, expr2, expr3)。</p>\n<blockquote>\n<p>以下来自<a href=\"https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html\">官方文档</a>的说明</p>\n<p>If expr1 is TRUE (expr1 &lt;&gt; 0 and expr1 &lt;&gt; NULL), IF() returns expr2. Otherwise, it returns expr3.</p>\n</blockquote>\n<p>用到count中，即if的条件为真，则if子句返回true，否则返回null。count子句依据该返回值进行计数。</p>\n<p>具体的条件依据需求变化，例如需要去重，可以变为count(distinct if(条件, expr2, expr3))</p>\n<p>同理，if也可用于sum等其他聚合函数计算。</p>\n<p><strong>注意：</strong></p>\n<p><em>第一条sql语句中的返回值不一定为true, null 可依据需求调整，该文章仅作参考。</em></p>\n<p><em>该文章测试环境为</em> <em><strong>Mysql 5.7.25</strong></em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在一条语句中根据不同的条件count对应的数据。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-built_in\">count</span>(if(条件, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-keyword\">null</span>)), <span class=\"hljs-built_in\">count</span>(if(条件, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-keyword\">null</span>)) <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">table</span>;<br></code></pre></td></tr></table></figure>\n\n<p>以上语句可以根据两个不同的条件一次计算出对应的count值，很明显的用到的是IF函数。IF( expr1, expr2, expr3)。</p>\n<blockquote>\n<p>以下来自<a href=\"https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html\">官方文档</a>的说明</p>\n<p>If expr1 is TRUE (expr1 &lt;&gt; 0 and expr1 &lt;&gt; NULL), IF() returns expr2. Otherwise, it returns expr3.</p>\n</blockquote>\n<p>用到count中，即if的条件为真，则if子句返回true，否则返回null。count子句依据该返回值进行计数。</p>\n<p>具体的条件依据需求变化，例如需要去重，可以变为count(distinct if(条件, expr2, expr3))</p>\n<p>同理，if也可用于sum等其他聚合函数计算。</p>\n<p><strong>注意：</strong></p>\n<p><em>第一条sql语句中的返回值不一定为true, null 可依据需求调整，该文章仅作参考。</em></p>\n<p><em>该文章测试环境为</em> <em><strong>Mysql 5.7.25</strong></em></p>\n"},{"title":"SVN的使用及代码合并","date":"2020-03-13T08:51:54.000Z","updated":"2021-01-08T09:02:27.557Z","url":"https://maoxian.fun/archives/svn的使用及代码合并","_content":"\n## 客户端使用\n\n下载地址[在此](https://tortoisesvn.net/downloads.html)\n\n安装过程省略。\n\n安装后，软件默认设置为英文，有需要可以右键任意位置，打开下拉菜单中svn里setting选项，将语言设置为中文，但是建议使用英文。\n\n安装后，在需要作为代码仓库的目录下建立一个文件夹，右键该文件夹，选择SVN Checkout 选项。\n\n![img](SVN的使用及代码合并/d48d1fa265fd71a1f8f9515e0125b963-112214-1610094767.png)\n\nUrl中填写的是svn的仓库地址，可以在自己的服务器上搭建Svn仓库，一般填写由仓库管理员给定的仓库地址\n\ndirectory中是刚刚选择的文件夹\n\n之后点击ok在弹窗中填入账号密码（由svn服务器管理员提供），正确后默认会拉取仓库里最新的文件\n\n正确配置好svn服务器路径后，会在该文件夹下生成一个隐藏文件夹”.svn”，删除该文件夹就会解除关联。\n\n配置好后右键该文件夹，右键菜单上会多出两个选项，Svn Update 和Svn Commit ，一个更新，一个提交。\n\nUpdate没什么好说的，就是同步服务器上的最新代码到本地。注意在更新时，如果本地对应文件被修改过，一般不会更新。\n\nCommit，提交本地的文件到服务器上。\n\n![img](SVN的使用及代码合并/76063b91901bf8a4bfe859dde2898c7b-3dae24-1610094773.png)\n\n上方文本框内填写备注，备注本次提交的内容（一般都要求写）\n\n下方文本框内显示的是本次提交的版本与服务器上版本不同的文件，提交时注意比较提交文件是否正确、是否无意中**覆盖了别人代码**、提交代码前注意**上锁**（右键项目文件夹GetLock），提交后注意**解锁 ReleaseLock**。\n\n## 代码合并\n\n代码合并通常使用BeyoundCompare软件进行代码合并，稳妥的做法是**另开**一个文件夹，对svn服务端上的项目文件夹**加锁**，**分别复制** svn服务端上的项目和本地项目，使用该软件合并代码，并在**本地测试通过后** commit合并后的项目文件，最后同样注意**解锁**。","source":"_posts/early/SVN的使用及代码合并.md","raw":"---\ntitle: SVN的使用及代码合并\ndate: 2020-03-13 16:51:54.0\nupdated: 2021-01-08 17:02:27.557\nurl: https://maoxian.fun/archives/svn的使用及代码合并\ncategories: \n- 程序\ntags: \n- 程序\n- 代码\n---\n\n## 客户端使用\n\n下载地址[在此](https://tortoisesvn.net/downloads.html)\n\n安装过程省略。\n\n安装后，软件默认设置为英文，有需要可以右键任意位置，打开下拉菜单中svn里setting选项，将语言设置为中文，但是建议使用英文。\n\n安装后，在需要作为代码仓库的目录下建立一个文件夹，右键该文件夹，选择SVN Checkout 选项。\n\n![img](SVN的使用及代码合并/d48d1fa265fd71a1f8f9515e0125b963-112214-1610094767.png)\n\nUrl中填写的是svn的仓库地址，可以在自己的服务器上搭建Svn仓库，一般填写由仓库管理员给定的仓库地址\n\ndirectory中是刚刚选择的文件夹\n\n之后点击ok在弹窗中填入账号密码（由svn服务器管理员提供），正确后默认会拉取仓库里最新的文件\n\n正确配置好svn服务器路径后，会在该文件夹下生成一个隐藏文件夹”.svn”，删除该文件夹就会解除关联。\n\n配置好后右键该文件夹，右键菜单上会多出两个选项，Svn Update 和Svn Commit ，一个更新，一个提交。\n\nUpdate没什么好说的，就是同步服务器上的最新代码到本地。注意在更新时，如果本地对应文件被修改过，一般不会更新。\n\nCommit，提交本地的文件到服务器上。\n\n![img](SVN的使用及代码合并/76063b91901bf8a4bfe859dde2898c7b-3dae24-1610094773.png)\n\n上方文本框内填写备注，备注本次提交的内容（一般都要求写）\n\n下方文本框内显示的是本次提交的版本与服务器上版本不同的文件，提交时注意比较提交文件是否正确、是否无意中**覆盖了别人代码**、提交代码前注意**上锁**（右键项目文件夹GetLock），提交后注意**解锁 ReleaseLock**。\n\n## 代码合并\n\n代码合并通常使用BeyoundCompare软件进行代码合并，稳妥的做法是**另开**一个文件夹，对svn服务端上的项目文件夹**加锁**，**分别复制** svn服务端上的项目和本地项目，使用该软件合并代码，并在**本地测试通过后** commit合并后的项目文件，最后同样注意**解锁**。","slug":"early/SVN的使用及代码合并","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec91d2f0009v0l46irz7huv","content":"<h2 id=\"客户端使用\"><a href=\"#客户端使用\" class=\"headerlink\" title=\"客户端使用\"></a>客户端使用</h2><p>下载地址<a href=\"https://tortoisesvn.net/downloads.html\">在此</a></p>\n<p>安装过程省略。</p>\n<p>安装后，软件默认设置为英文，有需要可以右键任意位置，打开下拉菜单中svn里setting选项，将语言设置为中文，但是建议使用英文。</p>\n<p>安装后，在需要作为代码仓库的目录下建立一个文件夹，右键该文件夹，选择SVN Checkout 选项。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/svn%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6/d48d1fa265fd71a1f8f9515e0125b963-112214-1610094767.png\" class=\"\" title=\"img\">\n\n<p>Url中填写的是svn的仓库地址，可以在自己的服务器上搭建Svn仓库，一般填写由仓库管理员给定的仓库地址</p>\n<p>directory中是刚刚选择的文件夹</p>\n<p>之后点击ok在弹窗中填入账号密码（由svn服务器管理员提供），正确后默认会拉取仓库里最新的文件</p>\n<p>正确配置好svn服务器路径后，会在该文件夹下生成一个隐藏文件夹”.svn”，删除该文件夹就会解除关联。</p>\n<p>配置好后右键该文件夹，右键菜单上会多出两个选项，Svn Update 和Svn Commit ，一个更新，一个提交。</p>\n<p>Update没什么好说的，就是同步服务器上的最新代码到本地。注意在更新时，如果本地对应文件被修改过，一般不会更新。</p>\n<p>Commit，提交本地的文件到服务器上。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/svn%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6/76063b91901bf8a4bfe859dde2898c7b-3dae24-1610094773.png\" class=\"\" title=\"img\">\n\n<p>上方文本框内填写备注，备注本次提交的内容（一般都要求写）</p>\n<p>下方文本框内显示的是本次提交的版本与服务器上版本不同的文件，提交时注意比较提交文件是否正确、是否无意中<strong>覆盖了别人代码</strong>、提交代码前注意<strong>上锁</strong>（右键项目文件夹GetLock），提交后注意<strong>解锁 ReleaseLock</strong>。</p>\n<h2 id=\"代码合并\"><a href=\"#代码合并\" class=\"headerlink\" title=\"代码合并\"></a>代码合并</h2><p>代码合并通常使用BeyoundCompare软件进行代码合并，稳妥的做法是<strong>另开</strong>一个文件夹，对svn服务端上的项目文件夹<strong>加锁</strong>，<strong>分别复制</strong> svn服务端上的项目和本地项目，使用该软件合并代码，并在<strong>本地测试通过后</strong> commit合并后的项目文件，最后同样注意<strong>解锁</strong>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"客户端使用\"><a href=\"#客户端使用\" class=\"headerlink\" title=\"客户端使用\"></a>客户端使用</h2><p>下载地址<a href=\"https://tortoisesvn.net/downloads.html\">在此</a></p>\n<p>安装过程省略。</p>\n<p>安装后，软件默认设置为英文，有需要可以右键任意位置，打开下拉菜单中svn里setting选项，将语言设置为中文，但是建议使用英文。</p>\n<p>安装后，在需要作为代码仓库的目录下建立一个文件夹，右键该文件夹，选择SVN Checkout 选项。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/svn%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6/d48d1fa265fd71a1f8f9515e0125b963-112214-1610094767.png\" class=\"\" title=\"img\">\n\n<p>Url中填写的是svn的仓库地址，可以在自己的服务器上搭建Svn仓库，一般填写由仓库管理员给定的仓库地址</p>\n<p>directory中是刚刚选择的文件夹</p>\n<p>之后点击ok在弹窗中填入账号密码（由svn服务器管理员提供），正确后默认会拉取仓库里最新的文件</p>\n<p>正确配置好svn服务器路径后，会在该文件夹下生成一个隐藏文件夹”.svn”，删除该文件夹就会解除关联。</p>\n<p>配置好后右键该文件夹，右键菜单上会多出两个选项，Svn Update 和Svn Commit ，一个更新，一个提交。</p>\n<p>Update没什么好说的，就是同步服务器上的最新代码到本地。注意在更新时，如果本地对应文件被修改过，一般不会更新。</p>\n<p>Commit，提交本地的文件到服务器上。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/svn%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6/76063b91901bf8a4bfe859dde2898c7b-3dae24-1610094773.png\" class=\"\" title=\"img\">\n\n<p>上方文本框内填写备注，备注本次提交的内容（一般都要求写）</p>\n<p>下方文本框内显示的是本次提交的版本与服务器上版本不同的文件，提交时注意比较提交文件是否正确、是否无意中<strong>覆盖了别人代码</strong>、提交代码前注意<strong>上锁</strong>（右键项目文件夹GetLock），提交后注意<strong>解锁 ReleaseLock</strong>。</p>\n<h2 id=\"代码合并\"><a href=\"#代码合并\" class=\"headerlink\" title=\"代码合并\"></a>代码合并</h2><p>代码合并通常使用BeyoundCompare软件进行代码合并，稳妥的做法是<strong>另开</strong>一个文件夹，对svn服务端上的项目文件夹<strong>加锁</strong>，<strong>分别复制</strong> svn服务端上的项目和本地项目，使用该软件合并代码，并在<strong>本地测试通过后</strong> commit合并后的项目文件，最后同样注意<strong>解锁</strong>。</p>\n"},{"title":"Vue项目在Nginx非root目录下部署的问题","date":"2020-10-21T08:51:59.000Z","updated":"2021-01-08T09:07:55.884Z","url":"https://maoxian.fun/archives/vue项目在nginx非root目录下部署的问题","_content":"\n## 错误排查\n\n最近在部署Vue项目时，出现如下错误：\n\n![img](Vue项目在Nginx非root目录下部署的问题/009501e2311bca14f237f5d30a9f8ac2-378b44-1610095800.png)\n\n一开始以为是常见的无限路由导致的爆栈这类基础问题，但是考虑到在本地调试时一切正常，并且在本次版本更新前生产环境也正常运行。于是直接被整懵，一度怀疑是更新了依赖包版本导致的问题。在尝试了调整路由配置、依赖包版本回退、项目回退均无果后，换了台服务器进行部署测试，结果正常运行。\n\n比较后发现，在项目部署的原服务器上，还运行着一个用户端项目，路径如下：\n\n```nginx\n/      用户端\n/admin 管理员端\n```\n\n尝试将管理员端项目部署在原用户端根路径上时，发现又正常，于是推测是项目部署在Nginx的非root即 ‘/’ 根路径上出了问题。\n\n## 解决方案\n\n修改管理员端项目的配置文件\n\n该项目使用的是vue-cli3，故修改vue.config.js文件\n\n```nginx\nmodule.exports = {\n  // publicPath: './',   // 注释原配置\n  publicPath: '/admin/', // 修改为要配置的路径，注意两个斜杠\n  其他配置...\n}\n```\n\n重新build项目，检查打包后的dist文件夹中的index.html文件的资源引用路径是否正确（publicPath打头的路径）\n\n![img](Vue项目在Nginx非root目录下部署的问题/f48c4c3cab9bf32d52e1043e5341c724-54d547-1610095811.png)\n\n修改nginx配置文件，nginx.conf\n\n```nginx\n# 用户端路径，使用root配置\nlocation / {\n    root   html/dist;\n    try_files $uri $uri/ @router;\n    index  index.html index.htm;\n}\n# 管理员端配置，使用alias配置虚拟路径，匹配路径时使用rewrites重写定位\nlocation ^~/admin {\n    alias html/admin/;\n    try_files $uri $uri/ @rewrites;\n}\n# 将管理员端路径重写定位\nlocation @rewrites{\n    rewrite ^/(admin)/(.+)$ /$1/index.html last;\n}\n# 后端代理\nlocation /local {\n    proxy_pass  http://localhost:8080/;\n}\n```\n\n执行 nginx -t 检查配置文件\n\n执行 nginx -s reload 重载配置文件\n\n完事。","source":"_posts/early/Vue项目在Nginx非root目录下部署的问题.md","raw":"---\ntitle: Vue项目在Nginx非root目录下部署的问题\ndate: 2020-10-21 16:51:59.0\nupdated: 2021-01-08 17:07:55.884\nurl: https://maoxian.fun/archives/vue项目在nginx非root目录下部署的问题\ncategories: \n- 程序\n- Web\ntags: \n- 程序\n- 代码\n- Web\n---\n\n## 错误排查\n\n最近在部署Vue项目时，出现如下错误：\n\n![img](Vue项目在Nginx非root目录下部署的问题/009501e2311bca14f237f5d30a9f8ac2-378b44-1610095800.png)\n\n一开始以为是常见的无限路由导致的爆栈这类基础问题，但是考虑到在本地调试时一切正常，并且在本次版本更新前生产环境也正常运行。于是直接被整懵，一度怀疑是更新了依赖包版本导致的问题。在尝试了调整路由配置、依赖包版本回退、项目回退均无果后，换了台服务器进行部署测试，结果正常运行。\n\n比较后发现，在项目部署的原服务器上，还运行着一个用户端项目，路径如下：\n\n```nginx\n/      用户端\n/admin 管理员端\n```\n\n尝试将管理员端项目部署在原用户端根路径上时，发现又正常，于是推测是项目部署在Nginx的非root即 ‘/’ 根路径上出了问题。\n\n## 解决方案\n\n修改管理员端项目的配置文件\n\n该项目使用的是vue-cli3，故修改vue.config.js文件\n\n```nginx\nmodule.exports = {\n  // publicPath: './',   // 注释原配置\n  publicPath: '/admin/', // 修改为要配置的路径，注意两个斜杠\n  其他配置...\n}\n```\n\n重新build项目，检查打包后的dist文件夹中的index.html文件的资源引用路径是否正确（publicPath打头的路径）\n\n![img](Vue项目在Nginx非root目录下部署的问题/f48c4c3cab9bf32d52e1043e5341c724-54d547-1610095811.png)\n\n修改nginx配置文件，nginx.conf\n\n```nginx\n# 用户端路径，使用root配置\nlocation / {\n    root   html/dist;\n    try_files $uri $uri/ @router;\n    index  index.html index.htm;\n}\n# 管理员端配置，使用alias配置虚拟路径，匹配路径时使用rewrites重写定位\nlocation ^~/admin {\n    alias html/admin/;\n    try_files $uri $uri/ @rewrites;\n}\n# 将管理员端路径重写定位\nlocation @rewrites{\n    rewrite ^/(admin)/(.+)$ /$1/index.html last;\n}\n# 后端代理\nlocation /local {\n    proxy_pass  http://localhost:8080/;\n}\n```\n\n执行 nginx -t 检查配置文件\n\n执行 nginx -s reload 重载配置文件\n\n完事。","slug":"early/Vue项目在Nginx非root目录下部署的问题","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec91d2i000dv0l4dbit1x4b","content":"<h2 id=\"错误排查\"><a href=\"#错误排查\" class=\"headerlink\" title=\"错误排查\"></a>错误排查</h2><p>最近在部署Vue项目时，出现如下错误：</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/Web/vue%E9%A1%B9%E7%9B%AE%E5%9C%A8nginx%E9%9D%9Eroot%E7%9B%AE%E5%BD%95%E4%B8%8B%E9%83%A8%E7%BD%B2%E7%9A%84%E9%97%AE%E9%A2%98/009501e2311bca14f237f5d30a9f8ac2-378b44-1610095800.png\" class=\"\" title=\"img\">\n\n<p>一开始以为是常见的无限路由导致的爆栈这类基础问题，但是考虑到在本地调试时一切正常，并且在本次版本更新前生产环境也正常运行。于是直接被整懵，一度怀疑是更新了依赖包版本导致的问题。在尝试了调整路由配置、依赖包版本回退、项目回退均无果后，换了台服务器进行部署测试，结果正常运行。</p>\n<p>比较后发现，在项目部署的原服务器上，还运行着一个用户端项目，路径如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\">/      用户端<br>/<span class=\"hljs-attribute\">admin</span> 管理员端<br></code></pre></td></tr></table></figure>\n\n<p>尝试将管理员端项目部署在原用户端根路径上时，发现又正常，于是推测是项目部署在Nginx的非root即 ‘/’ 根路径上出了问题。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>修改管理员端项目的配置文件</p>\n<p>该项目使用的是vue-cli3，故修改vue.config.js文件</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\">module.<span class=\"hljs-attribute\">exports</span> = &#123;<br>  // publicPath: &#x27;./&#x27;,   // 注释原配置<br>  publicPath: &#x27;/admin/&#x27;, // 修改为要配置的路径，注意两个斜杠<br>  其他配置...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>重新build项目，检查打包后的dist文件夹中的index.html文件的资源引用路径是否正确（publicPath打头的路径）</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/Web/vue%E9%A1%B9%E7%9B%AE%E5%9C%A8nginx%E9%9D%9Eroot%E7%9B%AE%E5%BD%95%E4%B8%8B%E9%83%A8%E7%BD%B2%E7%9A%84%E9%97%AE%E9%A2%98/f48c4c3cab9bf32d52e1043e5341c724-54d547-1610095811.png\" class=\"\" title=\"img\">\n\n<p>修改nginx配置文件，nginx.conf</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-comment\"># 用户端路径，使用root配置</span><br><span class=\"hljs-section\">location</span> / &#123;<br>    <span class=\"hljs-attribute\">root</span>   html/dist;<br>    <span class=\"hljs-attribute\">try_files</span> <span class=\"hljs-variable\">$uri</span> <span class=\"hljs-variable\">$uri</span>/ <span class=\"hljs-variable\">@router</span>;<br>    <span class=\"hljs-attribute\">index</span>  index.html index.htm;<br>&#125;<br><span class=\"hljs-comment\"># 管理员端配置，使用alias配置虚拟路径，匹配路径时使用rewrites重写定位</span><br><span class=\"hljs-section\">location</span><span class=\"hljs-regexp\"> ^~/admin</span> &#123;<br>    <span class=\"hljs-attribute\">alias</span> html/admin/;<br>    <span class=\"hljs-attribute\">try_files</span> <span class=\"hljs-variable\">$uri</span> <span class=\"hljs-variable\">$uri</span>/ <span class=\"hljs-variable\">@rewrites</span>;<br>&#125;<br><span class=\"hljs-comment\"># 将管理员端路径重写定位</span><br><span class=\"hljs-section\">location</span> <span class=\"hljs-variable\">@rewrites</span>&#123;<br>    <span class=\"hljs-attribute\">rewrite</span><span class=\"hljs-regexp\"> ^/(admin)/(.+)$</span> /<span class=\"hljs-variable\">$1</span>/index.html <span class=\"hljs-literal\">last</span>;<br>&#125;<br><span class=\"hljs-comment\"># 后端代理</span><br><span class=\"hljs-section\">location</span> /local &#123;<br>    <span class=\"hljs-attribute\">proxy_pass</span>  http://localhost:8080/;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>执行 nginx -t 检查配置文件</p>\n<p>执行 nginx -s reload 重载配置文件</p>\n<p>完事。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"错误排查\"><a href=\"#错误排查\" class=\"headerlink\" title=\"错误排查\"></a>错误排查</h2><p>最近在部署Vue项目时，出现如下错误：</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/Web/vue%E9%A1%B9%E7%9B%AE%E5%9C%A8nginx%E9%9D%9Eroot%E7%9B%AE%E5%BD%95%E4%B8%8B%E9%83%A8%E7%BD%B2%E7%9A%84%E9%97%AE%E9%A2%98/009501e2311bca14f237f5d30a9f8ac2-378b44-1610095800.png\" class=\"\" title=\"img\">\n\n<p>一开始以为是常见的无限路由导致的爆栈这类基础问题，但是考虑到在本地调试时一切正常，并且在本次版本更新前生产环境也正常运行。于是直接被整懵，一度怀疑是更新了依赖包版本导致的问题。在尝试了调整路由配置、依赖包版本回退、项目回退均无果后，换了台服务器进行部署测试，结果正常运行。</p>\n<p>比较后发现，在项目部署的原服务器上，还运行着一个用户端项目，路径如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\">/      用户端<br>/<span class=\"hljs-attribute\">admin</span> 管理员端<br></code></pre></td></tr></table></figure>\n\n<p>尝试将管理员端项目部署在原用户端根路径上时，发现又正常，于是推测是项目部署在Nginx的非root即 ‘/’ 根路径上出了问题。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>修改管理员端项目的配置文件</p>\n<p>该项目使用的是vue-cli3，故修改vue.config.js文件</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\">module.<span class=\"hljs-attribute\">exports</span> = &#123;<br>  // publicPath: &#x27;./&#x27;,   // 注释原配置<br>  publicPath: &#x27;/admin/&#x27;, // 修改为要配置的路径，注意两个斜杠<br>  其他配置...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>重新build项目，检查打包后的dist文件夹中的index.html文件的资源引用路径是否正确（publicPath打头的路径）</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/Web/vue%E9%A1%B9%E7%9B%AE%E5%9C%A8nginx%E9%9D%9Eroot%E7%9B%AE%E5%BD%95%E4%B8%8B%E9%83%A8%E7%BD%B2%E7%9A%84%E9%97%AE%E9%A2%98/f48c4c3cab9bf32d52e1043e5341c724-54d547-1610095811.png\" class=\"\" title=\"img\">\n\n<p>修改nginx配置文件，nginx.conf</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-comment\"># 用户端路径，使用root配置</span><br><span class=\"hljs-section\">location</span> / &#123;<br>    <span class=\"hljs-attribute\">root</span>   html/dist;<br>    <span class=\"hljs-attribute\">try_files</span> <span class=\"hljs-variable\">$uri</span> <span class=\"hljs-variable\">$uri</span>/ <span class=\"hljs-variable\">@router</span>;<br>    <span class=\"hljs-attribute\">index</span>  index.html index.htm;<br>&#125;<br><span class=\"hljs-comment\"># 管理员端配置，使用alias配置虚拟路径，匹配路径时使用rewrites重写定位</span><br><span class=\"hljs-section\">location</span><span class=\"hljs-regexp\"> ^~/admin</span> &#123;<br>    <span class=\"hljs-attribute\">alias</span> html/admin/;<br>    <span class=\"hljs-attribute\">try_files</span> <span class=\"hljs-variable\">$uri</span> <span class=\"hljs-variable\">$uri</span>/ <span class=\"hljs-variable\">@rewrites</span>;<br>&#125;<br><span class=\"hljs-comment\"># 将管理员端路径重写定位</span><br><span class=\"hljs-section\">location</span> <span class=\"hljs-variable\">@rewrites</span>&#123;<br>    <span class=\"hljs-attribute\">rewrite</span><span class=\"hljs-regexp\"> ^/(admin)/(.+)$</span> /<span class=\"hljs-variable\">$1</span>/index.html <span class=\"hljs-literal\">last</span>;<br>&#125;<br><span class=\"hljs-comment\"># 后端代理</span><br><span class=\"hljs-section\">location</span> /local &#123;<br>    <span class=\"hljs-attribute\">proxy_pass</span>  http://localhost:8080/;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>执行 nginx -t 检查配置文件</p>\n<p>执行 nginx -s reload 重载配置文件</p>\n<p>完事。</p>\n"},{"title":"SpringBoot Web 项目开发 (二) 工程结构","date":"2019-06-26T08:51:50.000Z","updated":"2021-01-08T08:54:14.462Z","url":"https://maoxian.fun/archives/springbootweb项目开发二工程结构","_content":"\n上一篇文章中，我们已经搭建好了springboot web项目的基本架构，但是web开发当然只有这些是不够的，而一个项目当然也需要一个比较好的结构划分，\n\n![img](springbootweb项目开发二工程结构/image-9b8189d3e15f07574698cf9232d72c34-bb380d-1610093408.png)\n\n- main 主要的源代码区\n  - java 具体的代码层\n    - config 配置，springboot的一些配置类可以放在这里，例如swagger的配置类等\n    - error 异常处理，自定义的异常处理类等\n    - interceptor 拦截器\n    - utils 工具类，放置项目中通用的工具\n    - validator 通用的校验工具\n    - controller 控制器，在微服务架构中主要是api的定义、参数的校验以及调用service服务层进行业务处理\n    - service 业务层，主要的业务逻辑都在这里，数据库dao层的调用、复杂数据的生成处理、密码的加密解密、文件处理等\n    - dao 持久化层，数据库处理层，只有该层可以控制数据库\n  - resources 资源层\n    - mapping 示例项目中是存放mybatis-generater生成的mapping文件\n    - static 静态资源\n    - templates 模板页面，如thymeleaf等编写的模板页面\n    - application.properties springboot的配置文件\n    - mybatis-generator.xml mybatis-generator插件的配置文件\n- test 测试层，测试代码\n- pom.xml Maven项目依赖管理的配置文件","source":"_posts/early/springbootweb项目开发二工程结构.md","raw":"---\ntitle: SpringBoot Web 项目开发 (二) 工程结构\ndate: 2019-06-26 16:51:50.0\nupdated: 2021-01-08 16:54:14.462\nurl: https://maoxian.fun/archives/springbootweb项目开发二工程结构\ncategories: \n- 程序\n- SpringBoot\ntags: \n- 程序\n- Spring\n- Web\n---\n\n上一篇文章中，我们已经搭建好了springboot web项目的基本架构，但是web开发当然只有这些是不够的，而一个项目当然也需要一个比较好的结构划分，\n\n![img](springbootweb项目开发二工程结构/image-9b8189d3e15f07574698cf9232d72c34-bb380d-1610093408.png)\n\n- main 主要的源代码区\n  - java 具体的代码层\n    - config 配置，springboot的一些配置类可以放在这里，例如swagger的配置类等\n    - error 异常处理，自定义的异常处理类等\n    - interceptor 拦截器\n    - utils 工具类，放置项目中通用的工具\n    - validator 通用的校验工具\n    - controller 控制器，在微服务架构中主要是api的定义、参数的校验以及调用service服务层进行业务处理\n    - service 业务层，主要的业务逻辑都在这里，数据库dao层的调用、复杂数据的生成处理、密码的加密解密、文件处理等\n    - dao 持久化层，数据库处理层，只有该层可以控制数据库\n  - resources 资源层\n    - mapping 示例项目中是存放mybatis-generater生成的mapping文件\n    - static 静态资源\n    - templates 模板页面，如thymeleaf等编写的模板页面\n    - application.properties springboot的配置文件\n    - mybatis-generator.xml mybatis-generator插件的配置文件\n- test 测试层，测试代码\n- pom.xml Maven项目依赖管理的配置文件","slug":"early/springbootweb项目开发二工程结构","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec91d2k000fv0l47uoygpcz","content":"<p>上一篇文章中，我们已经搭建好了springboot web项目的基本架构，但是web开发当然只有这些是不够的，而一个项目当然也需要一个比较好的结构划分，</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/SpringBoot/springboot-web-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-%E4%BA%8C-%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84/image-9b8189d3e15f07574698cf9232d72c34-bb380d-1610093408.png\" class=\"\" title=\"img\">\n\n<ul>\n<li>main 主要的源代码区<ul>\n<li>java 具体的代码层<ul>\n<li>config 配置，springboot的一些配置类可以放在这里，例如swagger的配置类等</li>\n<li>error 异常处理，自定义的异常处理类等</li>\n<li>interceptor 拦截器</li>\n<li>utils 工具类，放置项目中通用的工具</li>\n<li>validator 通用的校验工具</li>\n<li>controller 控制器，在微服务架构中主要是api的定义、参数的校验以及调用service服务层进行业务处理</li>\n<li>service 业务层，主要的业务逻辑都在这里，数据库dao层的调用、复杂数据的生成处理、密码的加密解密、文件处理等</li>\n<li>dao 持久化层，数据库处理层，只有该层可以控制数据库</li>\n</ul>\n</li>\n<li>resources 资源层<ul>\n<li>mapping 示例项目中是存放mybatis-generater生成的mapping文件</li>\n<li>static 静态资源</li>\n<li>templates 模板页面，如thymeleaf等编写的模板页面</li>\n<li>application.properties springboot的配置文件</li>\n<li>mybatis-generator.xml mybatis-generator插件的配置文件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>test 测试层，测试代码</li>\n<li>pom.xml Maven项目依赖管理的配置文件</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇文章中，我们已经搭建好了springboot web项目的基本架构，但是web开发当然只有这些是不够的，而一个项目当然也需要一个比较好的结构划分，</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/SpringBoot/springboot-web-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-%E4%BA%8C-%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84/image-9b8189d3e15f07574698cf9232d72c34-bb380d-1610093408.png\" class=\"\" title=\"img\">\n\n<ul>\n<li>main 主要的源代码区<ul>\n<li>java 具体的代码层<ul>\n<li>config 配置，springboot的一些配置类可以放在这里，例如swagger的配置类等</li>\n<li>error 异常处理，自定义的异常处理类等</li>\n<li>interceptor 拦截器</li>\n<li>utils 工具类，放置项目中通用的工具</li>\n<li>validator 通用的校验工具</li>\n<li>controller 控制器，在微服务架构中主要是api的定义、参数的校验以及调用service服务层进行业务处理</li>\n<li>service 业务层，主要的业务逻辑都在这里，数据库dao层的调用、复杂数据的生成处理、密码的加密解密、文件处理等</li>\n<li>dao 持久化层，数据库处理层，只有该层可以控制数据库</li>\n</ul>\n</li>\n<li>resources 资源层<ul>\n<li>mapping 示例项目中是存放mybatis-generater生成的mapping文件</li>\n<li>static 静态资源</li>\n<li>templates 模板页面，如thymeleaf等编写的模板页面</li>\n<li>application.properties springboot的配置文件</li>\n<li>mybatis-generator.xml mybatis-generator插件的配置文件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>test 测试层，测试代码</li>\n<li>pom.xml Maven项目依赖管理的配置文件</li>\n</ul>\n"},{"title":"Sqlite Attach和Detach","date":"2020-03-19T08:51:57.000Z","updated":"2021-01-08T09:05:49.215Z","url":"https://maoxian.fun/archives/sqliteattach和detach","_content":"\nsqlite是基于文件的数据库，正常使用sql语句操作一般都是同一个数据库，即同一个文件。若要同时操作多个sqlite数据库呢，这时候就可以用Attach和Detach语法。\n\nAttach 附加数据库，将一个数据库文件附加到当前连接上。\n\nDetach 分离数据库，跟Attach相反，即分离附加的数据库。\n\n假设现在有两个数据库文件，”Main.db”和”Main_Bak.db”。\n\nMain数据库中有一个user表如下：\n\n![img](sqliteattach和detach/70b3338d971672a212404a0d8a3e1aae-63131e-1610094720.png)\n\nMain_Bak数据库为空，没有任何表和数据。\n\n现在仅连接Main_Bak数据库。\n\n```sqlite\nattach database 'Main.db' as MainDB; # 路径应为绝对路径，此处略去了\n```\n\n表示将Main.db这个数据库文件附加到当前连接的数据库上，也就是现在可以同时操作两个数据库，Main中的表即可以通过”MainDB.表名”的形式索引到。\n\n测试一下\n\n```sqlite\nselect * from MainDB.user; # 在Main_Bak数据库中查询Main数据库的信息\n```\n\n![img](sqliteattach和detach/2c09e4b145e3277cd3158227524bda29-18f894-1610094731.png)\n\n结果正确\n\n```sqlite\ncreate table user_bak as select * from MainDB.user; # 以Main数据库中user表的结构和数据在Main_bak数据库中建表\n```\n\n![img](sqliteattach和detach/484fbfae2091eca9b1211cead74bf72e-e3a9f9-1610094740.png)\n\n操作成功，同时操作了两个数据库文件。\n\n最后分离已附加上的数据库\n\ndetach database MainDB;\n\n若此时再次执行上文中的查询语句便会报错\n\n![img](sqliteattach和detach/f208d5e5ce8e1fcec42f85b52ed231be-98f0dd-1610094747.png)\n\n参考资料:\n\nhttps://www.sqlite.org/lang_attach.html\n\nhttps://www.runoob.com/sqlite/sqlite-attach-database.html","source":"_posts/early/sqliteattach和detach.md","raw":"---\ntitle: Sqlite Attach和Detach\ndate: 2020-03-19 16:51:57.0\nupdated: 2021-01-08 17:05:49.215\nurl: https://maoxian.fun/archives/sqliteattach和detach\ncategories: \n- 程序\n- Sql\ntags: \n- 程序\n- 代码\n- Sql\n---\n\nsqlite是基于文件的数据库，正常使用sql语句操作一般都是同一个数据库，即同一个文件。若要同时操作多个sqlite数据库呢，这时候就可以用Attach和Detach语法。\n\nAttach 附加数据库，将一个数据库文件附加到当前连接上。\n\nDetach 分离数据库，跟Attach相反，即分离附加的数据库。\n\n假设现在有两个数据库文件，”Main.db”和”Main_Bak.db”。\n\nMain数据库中有一个user表如下：\n\n![img](sqliteattach和detach/70b3338d971672a212404a0d8a3e1aae-63131e-1610094720.png)\n\nMain_Bak数据库为空，没有任何表和数据。\n\n现在仅连接Main_Bak数据库。\n\n```sqlite\nattach database 'Main.db' as MainDB; # 路径应为绝对路径，此处略去了\n```\n\n表示将Main.db这个数据库文件附加到当前连接的数据库上，也就是现在可以同时操作两个数据库，Main中的表即可以通过”MainDB.表名”的形式索引到。\n\n测试一下\n\n```sqlite\nselect * from MainDB.user; # 在Main_Bak数据库中查询Main数据库的信息\n```\n\n![img](sqliteattach和detach/2c09e4b145e3277cd3158227524bda29-18f894-1610094731.png)\n\n结果正确\n\n```sqlite\ncreate table user_bak as select * from MainDB.user; # 以Main数据库中user表的结构和数据在Main_bak数据库中建表\n```\n\n![img](sqliteattach和detach/484fbfae2091eca9b1211cead74bf72e-e3a9f9-1610094740.png)\n\n操作成功，同时操作了两个数据库文件。\n\n最后分离已附加上的数据库\n\ndetach database MainDB;\n\n若此时再次执行上文中的查询语句便会报错\n\n![img](sqliteattach和detach/f208d5e5ce8e1fcec42f85b52ed231be-98f0dd-1610094747.png)\n\n参考资料:\n\nhttps://www.sqlite.org/lang_attach.html\n\nhttps://www.runoob.com/sqlite/sqlite-attach-database.html","slug":"early/sqliteattach和detach","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec91d2m000iv0l4b8yd7td4","content":"<p>sqlite是基于文件的数据库，正常使用sql语句操作一般都是同一个数据库，即同一个文件。若要同时操作多个sqlite数据库呢，这时候就可以用Attach和Detach语法。</p>\n<p>Attach 附加数据库，将一个数据库文件附加到当前连接上。</p>\n<p>Detach 分离数据库，跟Attach相反，即分离附加的数据库。</p>\n<p>假设现在有两个数据库文件，”Main.db”和”Main_Bak.db”。</p>\n<p>Main数据库中有一个user表如下：</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/Sql/sqlite-attach%E5%92%8Cdetach/70b3338d971672a212404a0d8a3e1aae-63131e-1610094720.png\" class=\"\" title=\"img\">\n\n<p>Main_Bak数据库为空，没有任何表和数据。</p>\n<p>现在仅连接Main_Bak数据库。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sqlite\">attach database &#x27;Main.db&#x27; as MainDB; # 路径应为绝对路径，此处略去了<br></code></pre></td></tr></table></figure>\n\n<p>表示将Main.db这个数据库文件附加到当前连接的数据库上，也就是现在可以同时操作两个数据库，Main中的表即可以通过”MainDB.表名”的形式索引到。</p>\n<p>测试一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sqlite\">select * from MainDB.user; # 在Main_Bak数据库中查询Main数据库的信息<br></code></pre></td></tr></table></figure>\n\n<img src=\"/%E7%A8%8B%E5%BA%8F/Sql/sqlite-attach%E5%92%8Cdetach/2c09e4b145e3277cd3158227524bda29-18f894-1610094731.png\" class=\"\" title=\"img\">\n\n<p>结果正确</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sqlite\">create table user_bak as select * from MainDB.user; # 以Main数据库中user表的结构和数据在Main_bak数据库中建表<br></code></pre></td></tr></table></figure>\n\n<img src=\"/%E7%A8%8B%E5%BA%8F/Sql/sqlite-attach%E5%92%8Cdetach/484fbfae2091eca9b1211cead74bf72e-e3a9f9-1610094740.png\" class=\"\" title=\"img\">\n\n<p>操作成功，同时操作了两个数据库文件。</p>\n<p>最后分离已附加上的数据库</p>\n<p>detach database MainDB;</p>\n<p>若此时再次执行上文中的查询语句便会报错</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/Sql/sqlite-attach%E5%92%8Cdetach/f208d5e5ce8e1fcec42f85b52ed231be-98f0dd-1610094747.png\" class=\"\" title=\"img\">\n\n<p>参考资料:</p>\n<p><a href=\"https://www.sqlite.org/lang_attach.html\">https://www.sqlite.org/lang_attach.html</a></p>\n<p><a href=\"https://www.runoob.com/sqlite/sqlite-attach-database.html\">https://www.runoob.com/sqlite/sqlite-attach-database.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>sqlite是基于文件的数据库，正常使用sql语句操作一般都是同一个数据库，即同一个文件。若要同时操作多个sqlite数据库呢，这时候就可以用Attach和Detach语法。</p>\n<p>Attach 附加数据库，将一个数据库文件附加到当前连接上。</p>\n<p>Detach 分离数据库，跟Attach相反，即分离附加的数据库。</p>\n<p>假设现在有两个数据库文件，”Main.db”和”Main_Bak.db”。</p>\n<p>Main数据库中有一个user表如下：</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/Sql/sqlite-attach%E5%92%8Cdetach/70b3338d971672a212404a0d8a3e1aae-63131e-1610094720.png\" class=\"\" title=\"img\">\n\n<p>Main_Bak数据库为空，没有任何表和数据。</p>\n<p>现在仅连接Main_Bak数据库。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sqlite\">attach database &#x27;Main.db&#x27; as MainDB; # 路径应为绝对路径，此处略去了<br></code></pre></td></tr></table></figure>\n\n<p>表示将Main.db这个数据库文件附加到当前连接的数据库上，也就是现在可以同时操作两个数据库，Main中的表即可以通过”MainDB.表名”的形式索引到。</p>\n<p>测试一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sqlite\">select * from MainDB.user; # 在Main_Bak数据库中查询Main数据库的信息<br></code></pre></td></tr></table></figure>\n\n<img src=\"/%E7%A8%8B%E5%BA%8F/Sql/sqlite-attach%E5%92%8Cdetach/2c09e4b145e3277cd3158227524bda29-18f894-1610094731.png\" class=\"\" title=\"img\">\n\n<p>结果正确</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sqlite\">create table user_bak as select * from MainDB.user; # 以Main数据库中user表的结构和数据在Main_bak数据库中建表<br></code></pre></td></tr></table></figure>\n\n<img src=\"/%E7%A8%8B%E5%BA%8F/Sql/sqlite-attach%E5%92%8Cdetach/484fbfae2091eca9b1211cead74bf72e-e3a9f9-1610094740.png\" class=\"\" title=\"img\">\n\n<p>操作成功，同时操作了两个数据库文件。</p>\n<p>最后分离已附加上的数据库</p>\n<p>detach database MainDB;</p>\n<p>若此时再次执行上文中的查询语句便会报错</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/Sql/sqlite-attach%E5%92%8Cdetach/f208d5e5ce8e1fcec42f85b52ed231be-98f0dd-1610094747.png\" class=\"\" title=\"img\">\n\n<p>参考资料:</p>\n<p><a href=\"https://www.sqlite.org/lang_attach.html\">https://www.sqlite.org/lang_attach.html</a></p>\n<p><a href=\"https://www.runoob.com/sqlite/sqlite-attach-database.html\">https://www.runoob.com/sqlite/sqlite-attach-database.html</a></p>\n"},{"title":"为什么要写博客","date":"2019-04-08T06:59:59.000Z","updated":"2021-01-08T09:11:15.520Z","url":"https://maoxian.fun/archives/为什么要写博客","_content":"\n# 为什么要写博客？\n\n为什么写博客，原因嘛，那是一开始看见别人有自己名字的网站，觉得有个自己的网站很酷，想着自己怎么也是计算机的捣鼓个玩玩，各种忙活之后就有了这儿。\n\n**写博客是个注重坚持的行为，这是一个锻炼自己的方式。**\n\n首先，我个人认为博客是写给自己的，其次，才是写给别人看的。具体的原因嘛，往下看呗~\n\n- **强化知识。**\n\n* **“如果你不能把一件事情讲清楚，那么十有八九你并没有完全理解它”**\n\n博客是对自己知识的学习和再整理，单单是读书，可能读完就忘了，但是读完书之后，将自己的理解经过大脑的思考和再创造之后以博文的形式再发布出来，这明显可以提高对这部分知识的理解。\n\n- **提高语言的组织能力。**博客，不论是写给自己还是写给别人看的，最重要的一点就是 你要让人看懂。写博客难的不是去讨论这个什么技术，而是怎样写的通俗易懂。\n- **形成自己的知识体系。**人这一辈子啊，毕竟不能只苟在某个小圈子里不是，总得要学许多不同的东西，以我自己来说，你以后会在这发现许多不同的东西（当然前提是我不偷懒）包括但不限于编程，语言，摄影作品等等等等等。\n- **很好的刺激自己学习的理由。**要写博客嘛，自己都不会的话怎么能有产出呢？要有干货那就要先把它学完呗。（当然不要像我一样偷懒）\n- 还有别的，容我想到了再说。\n\n其实吧，博客这种东西，特别是独立博客，更多的就是记录自己的成长，更好地了解自己成长过程中收获的经验。\n\n然而建博好久了，还是没写几篇...","source":"_posts/early/为什么要写博客-为什么要写博客.md","raw":"---\ntitle: 为什么要写博客\ndate: 2019-04-08 14:59:59.0\nupdated: 2021-01-08 17:11:15.52\nurl: https://maoxian.fun/archives/为什么要写博客\ncategories: \n- 闲聊\ntags: \n---\n\n# 为什么要写博客？\n\n为什么写博客，原因嘛，那是一开始看见别人有自己名字的网站，觉得有个自己的网站很酷，想着自己怎么也是计算机的捣鼓个玩玩，各种忙活之后就有了这儿。\n\n**写博客是个注重坚持的行为，这是一个锻炼自己的方式。**\n\n首先，我个人认为博客是写给自己的，其次，才是写给别人看的。具体的原因嘛，往下看呗~\n\n- **强化知识。**\n\n* **“如果你不能把一件事情讲清楚，那么十有八九你并没有完全理解它”**\n\n博客是对自己知识的学习和再整理，单单是读书，可能读完就忘了，但是读完书之后，将自己的理解经过大脑的思考和再创造之后以博文的形式再发布出来，这明显可以提高对这部分知识的理解。\n\n- **提高语言的组织能力。**博客，不论是写给自己还是写给别人看的，最重要的一点就是 你要让人看懂。写博客难的不是去讨论这个什么技术，而是怎样写的通俗易懂。\n- **形成自己的知识体系。**人这一辈子啊，毕竟不能只苟在某个小圈子里不是，总得要学许多不同的东西，以我自己来说，你以后会在这发现许多不同的东西（当然前提是我不偷懒）包括但不限于编程，语言，摄影作品等等等等等。\n- **很好的刺激自己学习的理由。**要写博客嘛，自己都不会的话怎么能有产出呢？要有干货那就要先把它学完呗。（当然不要像我一样偷懒）\n- 还有别的，容我想到了再说。\n\n其实吧，博客这种东西，特别是独立博客，更多的就是记录自己的成长，更好地了解自己成长过程中收获的经验。\n\n然而建博好久了，还是没写几篇...","slug":"early/为什么要写博客-为什么要写博客","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec91d2o000lv0l40to09ppn","content":"<h1 id=\"为什么要写博客？\"><a href=\"#为什么要写博客？\" class=\"headerlink\" title=\"为什么要写博客？\"></a>为什么要写博客？</h1><p>为什么写博客，原因嘛，那是一开始看见别人有自己名字的网站，觉得有个自己的网站很酷，想着自己怎么也是计算机的捣鼓个玩玩，各种忙活之后就有了这儿。</p>\n<p><strong>写博客是个注重坚持的行为，这是一个锻炼自己的方式。</strong></p>\n<p>首先，我个人认为博客是写给自己的，其次，才是写给别人看的。具体的原因嘛，往下看呗~</p>\n<ul>\n<li><strong>强化知识。</strong></li>\n</ul>\n<ul>\n<li><strong>“如果你不能把一件事情讲清楚，那么十有八九你并没有完全理解它”</strong></li>\n</ul>\n<p>博客是对自己知识的学习和再整理，单单是读书，可能读完就忘了，但是读完书之后，将自己的理解经过大脑的思考和再创造之后以博文的形式再发布出来，这明显可以提高对这部分知识的理解。</p>\n<ul>\n<li><strong>提高语言的组织能力。</strong>博客，不论是写给自己还是写给别人看的，最重要的一点就是 你要让人看懂。写博客难的不是去讨论这个什么技术，而是怎样写的通俗易懂。</li>\n<li><strong>形成自己的知识体系。</strong>人这一辈子啊，毕竟不能只苟在某个小圈子里不是，总得要学许多不同的东西，以我自己来说，你以后会在这发现许多不同的东西（当然前提是我不偷懒）包括但不限于编程，语言，摄影作品等等等等等。</li>\n<li><strong>很好的刺激自己学习的理由。</strong>要写博客嘛，自己都不会的话怎么能有产出呢？要有干货那就要先把它学完呗。（当然不要像我一样偷懒）</li>\n<li>还有别的，容我想到了再说。</li>\n</ul>\n<p>其实吧，博客这种东西，特别是独立博客，更多的就是记录自己的成长，更好地了解自己成长过程中收获的经验。</p>\n<p>然而建博好久了，还是没写几篇…</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"为什么要写博客？\"><a href=\"#为什么要写博客？\" class=\"headerlink\" title=\"为什么要写博客？\"></a>为什么要写博客？</h1><p>为什么写博客，原因嘛，那是一开始看见别人有自己名字的网站，觉得有个自己的网站很酷，想着自己怎么也是计算机的捣鼓个玩玩，各种忙活之后就有了这儿。</p>\n<p><strong>写博客是个注重坚持的行为，这是一个锻炼自己的方式。</strong></p>\n<p>首先，我个人认为博客是写给自己的，其次，才是写给别人看的。具体的原因嘛，往下看呗~</p>\n<ul>\n<li><strong>强化知识。</strong></li>\n</ul>\n<ul>\n<li><strong>“如果你不能把一件事情讲清楚，那么十有八九你并没有完全理解它”</strong></li>\n</ul>\n<p>博客是对自己知识的学习和再整理，单单是读书，可能读完就忘了，但是读完书之后，将自己的理解经过大脑的思考和再创造之后以博文的形式再发布出来，这明显可以提高对这部分知识的理解。</p>\n<ul>\n<li><strong>提高语言的组织能力。</strong>博客，不论是写给自己还是写给别人看的，最重要的一点就是 你要让人看懂。写博客难的不是去讨论这个什么技术，而是怎样写的通俗易懂。</li>\n<li><strong>形成自己的知识体系。</strong>人这一辈子啊，毕竟不能只苟在某个小圈子里不是，总得要学许多不同的东西，以我自己来说，你以后会在这发现许多不同的东西（当然前提是我不偷懒）包括但不限于编程，语言，摄影作品等等等等等。</li>\n<li><strong>很好的刺激自己学习的理由。</strong>要写博客嘛，自己都不会的话怎么能有产出呢？要有干货那就要先把它学完呗。（当然不要像我一样偷懒）</li>\n<li>还有别的，容我想到了再说。</li>\n</ul>\n<p>其实吧，博客这种东西，特别是独立博客，更多的就是记录自己的成长，更好地了解自己成长过程中收获的经验。</p>\n<p>然而建博好久了，还是没写几篇…</p>\n"},{"title":"关于数据结构的一些想法","date":"2021-07-18T16:30:29.227Z","updated":"2021-07-18T16:32:14.531Z","url":"https://maoxian.fun/archives/guan-yu-shu-ju-jie-gou-de-yi-xie-xiang-fa","_content":"\n## 前言\n写这篇文章的动机呢，其实是洗澡的时候突然想到，并结合平时中的一些感受所产生的：大多数学数据结构的人，总是给我一种为了学数据结构而学的感觉。\n## 问题\n数据结构和算法，这两个好兄弟不论是在本科的课程里还是在面试中，都是最基础的考察项目。但是大多数人，在刚刚入门的时候，比如刚学习完一门语言的语法，准备深入学习的时候，就会有人告诉说：该学数据结构了。然后从天而降一个链表让你学，学会了用就完事了，迷迷糊糊学完之后，又塞来一个二叉树...\n## 关系\n一般在教材中，每个不同的结构都是分成不同的章节进行讲解的，通常是列表、树、图...这样的顺序展开。从分类和学习进度上，这样并没有问题，但是在学习的时候，由于每个部分被分成不同的章节，而在表面上看起来没有关联。\n这就是问题所在，每一种数据结构都是层层递进的。\n## 开始\n每一个数据结构和算法都是根据需要而被一个个发明创造出来的。链表、栈、树、图...这些东西不是一开始就存在，而是根据需要而被前辈发明出来，并且经过抽象和提炼后，总结出最基础、最**常用**的这几种结构作为入门。但是我们在学习的时候，不是为了学习掌握这种结构，而是需要掌握如何**创造**结构。\n数组不够灵活，所以有了能够灵活分配空间的单链表；单链表只能向后不能往前，所以就有了前后指针的双向链表；数组和链表的操作太多了，我只需要排队或者做一个桶的功能，所以屏蔽了多余的功能，有了以数组或链表为基础的栈和队列；链表是一维的线性结构，查找只能从头或尾巴依次遍历，效率太低怎么办？把一维的线性结构转换为非线性的，把单链表的next指针拆分成两个(left和right)并规定比我小的在左边，大的在右边，于是便有了二叉排序树；排序树依赖插入顺序，最差情况(左斜树或右斜树)还是退化成一个链表，那就规定左右子树的高度差不能超过1，不平衡的时候需要通过左右旋的操作保持平衡，这就成了AVL平衡树。在此基础上，对**条件、性能的不同要求**，从而不断的改造出了B树、红黑树等等亚种。\n那图呢？一样的，链表和数组既然只能存储一维的信息，那用两个链表或者数组套起来，不就是二维的吗？链表的每个节点保存每个子链表的头结点，每个一级数组保存子数组的起点，不就是二维的吗？此上结合数论，将图拆分成点和边分别存储，于是就有了以数组为基础的邻接表，以链表为基础的十字链两种存储图的方式，甚至还有结合数组和链表的多重邻接表。\n## 结论\n说了这么多，其实总结就一些。学数据结构学的不是结构本身，而是研究结构是如何被创造出来的，如何根据需要 去创造新的高效的方案。换句话说，就是无招胜有招，在掌握本质之后，就可以根据需要直接创造出需要的结构。","source":"_posts/early/关于数据结构的一些想法-guan-yu-shu-ju-jie-gou-de-yi-xie-xiang-fa.md","raw":"---\ntitle: 关于数据结构的一些想法\ndate: 2021-07-19 00:30:29.227\nupdated: 2021-07-19 00:32:14.531\nurl: https://maoxian.fun/archives/guan-yu-shu-ju-jie-gou-de-yi-xie-xiang-fa\ncategories: \n- 数据结构-算法\n- 闲聊\ntags: \n- 程序\n- 代码\n- 数据结构\n---\n\n## 前言\n写这篇文章的动机呢，其实是洗澡的时候突然想到，并结合平时中的一些感受所产生的：大多数学数据结构的人，总是给我一种为了学数据结构而学的感觉。\n## 问题\n数据结构和算法，这两个好兄弟不论是在本科的课程里还是在面试中，都是最基础的考察项目。但是大多数人，在刚刚入门的时候，比如刚学习完一门语言的语法，准备深入学习的时候，就会有人告诉说：该学数据结构了。然后从天而降一个链表让你学，学会了用就完事了，迷迷糊糊学完之后，又塞来一个二叉树...\n## 关系\n一般在教材中，每个不同的结构都是分成不同的章节进行讲解的，通常是列表、树、图...这样的顺序展开。从分类和学习进度上，这样并没有问题，但是在学习的时候，由于每个部分被分成不同的章节，而在表面上看起来没有关联。\n这就是问题所在，每一种数据结构都是层层递进的。\n## 开始\n每一个数据结构和算法都是根据需要而被一个个发明创造出来的。链表、栈、树、图...这些东西不是一开始就存在，而是根据需要而被前辈发明出来，并且经过抽象和提炼后，总结出最基础、最**常用**的这几种结构作为入门。但是我们在学习的时候，不是为了学习掌握这种结构，而是需要掌握如何**创造**结构。\n数组不够灵活，所以有了能够灵活分配空间的单链表；单链表只能向后不能往前，所以就有了前后指针的双向链表；数组和链表的操作太多了，我只需要排队或者做一个桶的功能，所以屏蔽了多余的功能，有了以数组或链表为基础的栈和队列；链表是一维的线性结构，查找只能从头或尾巴依次遍历，效率太低怎么办？把一维的线性结构转换为非线性的，把单链表的next指针拆分成两个(left和right)并规定比我小的在左边，大的在右边，于是便有了二叉排序树；排序树依赖插入顺序，最差情况(左斜树或右斜树)还是退化成一个链表，那就规定左右子树的高度差不能超过1，不平衡的时候需要通过左右旋的操作保持平衡，这就成了AVL平衡树。在此基础上，对**条件、性能的不同要求**，从而不断的改造出了B树、红黑树等等亚种。\n那图呢？一样的，链表和数组既然只能存储一维的信息，那用两个链表或者数组套起来，不就是二维的吗？链表的每个节点保存每个子链表的头结点，每个一级数组保存子数组的起点，不就是二维的吗？此上结合数论，将图拆分成点和边分别存储，于是就有了以数组为基础的邻接表，以链表为基础的十字链两种存储图的方式，甚至还有结合数组和链表的多重邻接表。\n## 结论\n说了这么多，其实总结就一些。学数据结构学的不是结构本身，而是研究结构是如何被创造出来的，如何根据需要 去创造新的高效的方案。换句话说，就是无招胜有招，在掌握本质之后，就可以根据需要直接创造出需要的结构。","slug":"early/关于数据结构的一些想法-guan-yu-shu-ju-jie-gou-de-yi-xie-xiang-fa","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec91d2p000ov0l4ey2kcgtb","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>写这篇文章的动机呢，其实是洗澡的时候突然想到，并结合平时中的一些感受所产生的：大多数学数据结构的人，总是给我一种为了学数据结构而学的感觉。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>数据结构和算法，这两个好兄弟不论是在本科的课程里还是在面试中，都是最基础的考察项目。但是大多数人，在刚刚入门的时候，比如刚学习完一门语言的语法，准备深入学习的时候，就会有人告诉说：该学数据结构了。然后从天而降一个链表让你学，学会了用就完事了，迷迷糊糊学完之后，又塞来一个二叉树…</p>\n<h2 id=\"关系\"><a href=\"#关系\" class=\"headerlink\" title=\"关系\"></a>关系</h2><p>一般在教材中，每个不同的结构都是分成不同的章节进行讲解的，通常是列表、树、图…这样的顺序展开。从分类和学习进度上，这样并没有问题，但是在学习的时候，由于每个部分被分成不同的章节，而在表面上看起来没有关联。<br>这就是问题所在，每一种数据结构都是层层递进的。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>每一个数据结构和算法都是根据需要而被一个个发明创造出来的。链表、栈、树、图…这些东西不是一开始就存在，而是根据需要而被前辈发明出来，并且经过抽象和提炼后，总结出最基础、最<strong>常用</strong>的这几种结构作为入门。但是我们在学习的时候，不是为了学习掌握这种结构，而是需要掌握如何<strong>创造</strong>结构。<br>数组不够灵活，所以有了能够灵活分配空间的单链表；单链表只能向后不能往前，所以就有了前后指针的双向链表；数组和链表的操作太多了，我只需要排队或者做一个桶的功能，所以屏蔽了多余的功能，有了以数组或链表为基础的栈和队列；链表是一维的线性结构，查找只能从头或尾巴依次遍历，效率太低怎么办？把一维的线性结构转换为非线性的，把单链表的next指针拆分成两个(left和right)并规定比我小的在左边，大的在右边，于是便有了二叉排序树；排序树依赖插入顺序，最差情况(左斜树或右斜树)还是退化成一个链表，那就规定左右子树的高度差不能超过1，不平衡的时候需要通过左右旋的操作保持平衡，这就成了AVL平衡树。在此基础上，对<strong>条件、性能的不同要求</strong>，从而不断的改造出了B树、红黑树等等亚种。<br>那图呢？一样的，链表和数组既然只能存储一维的信息，那用两个链表或者数组套起来，不就是二维的吗？链表的每个节点保存每个子链表的头结点，每个一级数组保存子数组的起点，不就是二维的吗？此上结合数论，将图拆分成点和边分别存储，于是就有了以数组为基础的邻接表，以链表为基础的十字链两种存储图的方式，甚至还有结合数组和链表的多重邻接表。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>说了这么多，其实总结就一些。学数据结构学的不是结构本身，而是研究结构是如何被创造出来的，如何根据需要 去创造新的高效的方案。换句话说，就是无招胜有招，在掌握本质之后，就可以根据需要直接创造出需要的结构。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>写这篇文章的动机呢，其实是洗澡的时候突然想到，并结合平时中的一些感受所产生的：大多数学数据结构的人，总是给我一种为了学数据结构而学的感觉。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>数据结构和算法，这两个好兄弟不论是在本科的课程里还是在面试中，都是最基础的考察项目。但是大多数人，在刚刚入门的时候，比如刚学习完一门语言的语法，准备深入学习的时候，就会有人告诉说：该学数据结构了。然后从天而降一个链表让你学，学会了用就完事了，迷迷糊糊学完之后，又塞来一个二叉树…</p>\n<h2 id=\"关系\"><a href=\"#关系\" class=\"headerlink\" title=\"关系\"></a>关系</h2><p>一般在教材中，每个不同的结构都是分成不同的章节进行讲解的，通常是列表、树、图…这样的顺序展开。从分类和学习进度上，这样并没有问题，但是在学习的时候，由于每个部分被分成不同的章节，而在表面上看起来没有关联。<br>这就是问题所在，每一种数据结构都是层层递进的。</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>每一个数据结构和算法都是根据需要而被一个个发明创造出来的。链表、栈、树、图…这些东西不是一开始就存在，而是根据需要而被前辈发明出来，并且经过抽象和提炼后，总结出最基础、最<strong>常用</strong>的这几种结构作为入门。但是我们在学习的时候，不是为了学习掌握这种结构，而是需要掌握如何<strong>创造</strong>结构。<br>数组不够灵活，所以有了能够灵活分配空间的单链表；单链表只能向后不能往前，所以就有了前后指针的双向链表；数组和链表的操作太多了，我只需要排队或者做一个桶的功能，所以屏蔽了多余的功能，有了以数组或链表为基础的栈和队列；链表是一维的线性结构，查找只能从头或尾巴依次遍历，效率太低怎么办？把一维的线性结构转换为非线性的，把单链表的next指针拆分成两个(left和right)并规定比我小的在左边，大的在右边，于是便有了二叉排序树；排序树依赖插入顺序，最差情况(左斜树或右斜树)还是退化成一个链表，那就规定左右子树的高度差不能超过1，不平衡的时候需要通过左右旋的操作保持平衡，这就成了AVL平衡树。在此基础上，对<strong>条件、性能的不同要求</strong>，从而不断的改造出了B树、红黑树等等亚种。<br>那图呢？一样的，链表和数组既然只能存储一维的信息，那用两个链表或者数组套起来，不就是二维的吗？链表的每个节点保存每个子链表的头结点，每个一级数组保存子数组的起点，不就是二维的吗？此上结合数论，将图拆分成点和边分别存储，于是就有了以数组为基础的邻接表，以链表为基础的十字链两种存储图的方式，甚至还有结合数组和链表的多重邻接表。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>说了这么多，其实总结就一些。学数据结构学的不是结构本身，而是研究结构是如何被创造出来的，如何根据需要 去创造新的高效的方案。换句话说，就是无招胜有招，在掌握本质之后，就可以根据需要直接创造出需要的结构。</p>\n"},{"title":"关于计算机的 Boot","date":"2020-04-16T08:51:57.000Z","updated":"2021-01-08T09:06:39.693Z","url":"https://maoxian.fun/archives/15关于计算机的bootmd","_content":"\nboot是bootstrap的简写形式，当然这里的bootstrap不是指[web框架](https://getbootstrap.com/)的bootstrap，而是指计算机的“引导”。\n\nbootstrap原意是靴子，但是这跟计算机有什么关系呢？\n\n这源于一句谚语：\n\n> pull oneself up by one’s bootstraps\n>\n> 拽着鞋带把自己拉起来\n\n这个句子很有意思，就像左脚踩右脚不断交替就能上天一样。\n\n工程师把这个用来比喻计算机启动的过程，原因是因为：计算机上的大多数程序是由其他程序加载到计算机上的，那就意味着需要有一个机制将初始程序加载到计算机上。换句话说就是，计算机需要启动才能运行程序，而运行程序则需要启动计算机，而这明显是不能实现的。\n\n*解释清楚死锁，我们就雇你；雇我我就解释给你听；来吧，我们讨论一下薪水的事情吧！*\n\n早期的工程师使用各种方法把程序放入内存中以临时解决该问题，直到后来**Rom**的出现彻底解决了这个问题。\n\n> Read-only memory (ROM) is a type of non-volatile memory used in computers and other electronic devices. Data stored in ROM cannot be electronically modified after the manufacture of the memory device. \n>\n> \n> 摘自[wiki](https://en.wikipedia.org/wiki/Read-only_memory)\n\n翻译：只读存储器是一种在计算机和其他电子设备中使用的非易失性存储设备。存储在Rom中的数据一经制造就无法以电子方式修改。\n\n\n\n当然，随着科技的发展，Rom已经发展出了许多种类：可编程只读存储器（PROM）、可擦可编程序只读存储器（EPROM）和电可擦可编程只读存储器ROMROM（EEPROM），Rom已经不再是出厂就无法修改，从而也衍生出刷BIOS、刷Rom等操作了。\n\n而现在，这个Rom就存在计算机的主板上，里面写入的程序呢，就是**BIOS**。\n\n**BIOS ( Basic Input Output System )** ，是计算机启动后运行的第一个程序。这个程序的功能就是最基本的输入输出、计算机自检和系统自启功能。\n\n计算机启动后，运行BIOS，首先进行自检，检查计算机上的硬件（CPU、内存等）是否满足运行的条件，若没有问题则转入下一阶段，否则报警并中止。\n\n自检没有问题，那么下一步就是决定启动顺序。\n\n经常装系统的同学可能很熟悉这个操作：插上U盘，按下开机键（短接电源），猛按f8或者某个按键，在屏幕弹出来的窗口上选择U盘，然后就进入PE或者是系统安装程序进行系统的安装。\n\n![img](关于计算机的Boot/2d1575284cf52f1871bd04a7cf2d75b4-5a96bb-1610095398.png)\n\nBIOS启动后，需要运行下一个程序，也就是要找到下一个启动程序所在的存储设备（例如硬盘或者U盘）。\n\nBIOS根据用户选择的启动设备或者是默认的启动顺序，判断该设备是否可用于引导（判断设备的第一个扇区，最前面的512字节的最后两个字节是否是0x55和0xAA，这512个字节就叫MBR 主引导记录）\n\n现在知道设备可用于启动了，那么现在就需要知道该到哪去运行下一个程序。而MBR中存储的就是操作系统在该设备上的位置，下一步就显而易见了，找到操作系统，启动！\n\n![img](关于计算机的Boot/b864d20e64f6e15e211f6017b3af5981-d3c0bd-1610095362.png)\n\n文章篇幅看似挺长，对于今天的计算机来讲，不过是“弹指一瞬间”，按下开机按钮，不出一会屏幕上就显示出操作系统的启动动画，或者对于土豪玩家，说不定已经能看到桌面了（汗。\n\n当然，上文中描述的启动顺序也并不完整，其中省略了一些关于分区表的部分，并且文章中说的MBR+BIOS的引导启动已经是过去式了，现在的引导方式也都变成了GPT+UEFI的形式。\n\nMBR和GPT其实都是分区表的两种种类，MBR是512字节，一个主分区的扇区总数不超过2^32即逻辑地址有32位，而每个扇区大小512字节，2^32\\*512即2T，所以MBR支持的最大容量为2T；而GPT逻辑地址提升至64位，则理论最大分区大小为2^64-1\\*512即18eb（1eb=1024pb=1024^2tb）。\n\nUEFI和BIOS的话，可以说UEFI相当于BIOS的升级版，兼容性、容错性、纠错性等更好，具体参见[Wiki](https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface)。\n\n总的来说，系统启动的过程就像多米诺骨牌一样，由小到大，从一开始的BIOS逐步启动到操作系统。","source":"_posts/early/关于计算机的Boot.md","raw":"---\ntitle: 关于计算机的 Boot\ndate: 2020-04-16 16:51:57.0\nupdated: 2021-01-08 17:06:39.693\nurl: https://maoxian.fun/archives/15关于计算机的bootmd\ncategories: \n- 程序\n- 闲聊\ntags: \n- 程序\n- 代码\n---\n\nboot是bootstrap的简写形式，当然这里的bootstrap不是指[web框架](https://getbootstrap.com/)的bootstrap，而是指计算机的“引导”。\n\nbootstrap原意是靴子，但是这跟计算机有什么关系呢？\n\n这源于一句谚语：\n\n> pull oneself up by one’s bootstraps\n>\n> 拽着鞋带把自己拉起来\n\n这个句子很有意思，就像左脚踩右脚不断交替就能上天一样。\n\n工程师把这个用来比喻计算机启动的过程，原因是因为：计算机上的大多数程序是由其他程序加载到计算机上的，那就意味着需要有一个机制将初始程序加载到计算机上。换句话说就是，计算机需要启动才能运行程序，而运行程序则需要启动计算机，而这明显是不能实现的。\n\n*解释清楚死锁，我们就雇你；雇我我就解释给你听；来吧，我们讨论一下薪水的事情吧！*\n\n早期的工程师使用各种方法把程序放入内存中以临时解决该问题，直到后来**Rom**的出现彻底解决了这个问题。\n\n> Read-only memory (ROM) is a type of non-volatile memory used in computers and other electronic devices. Data stored in ROM cannot be electronically modified after the manufacture of the memory device. \n>\n> \n> 摘自[wiki](https://en.wikipedia.org/wiki/Read-only_memory)\n\n翻译：只读存储器是一种在计算机和其他电子设备中使用的非易失性存储设备。存储在Rom中的数据一经制造就无法以电子方式修改。\n\n\n\n当然，随着科技的发展，Rom已经发展出了许多种类：可编程只读存储器（PROM）、可擦可编程序只读存储器（EPROM）和电可擦可编程只读存储器ROMROM（EEPROM），Rom已经不再是出厂就无法修改，从而也衍生出刷BIOS、刷Rom等操作了。\n\n而现在，这个Rom就存在计算机的主板上，里面写入的程序呢，就是**BIOS**。\n\n**BIOS ( Basic Input Output System )** ，是计算机启动后运行的第一个程序。这个程序的功能就是最基本的输入输出、计算机自检和系统自启功能。\n\n计算机启动后，运行BIOS，首先进行自检，检查计算机上的硬件（CPU、内存等）是否满足运行的条件，若没有问题则转入下一阶段，否则报警并中止。\n\n自检没有问题，那么下一步就是决定启动顺序。\n\n经常装系统的同学可能很熟悉这个操作：插上U盘，按下开机键（短接电源），猛按f8或者某个按键，在屏幕弹出来的窗口上选择U盘，然后就进入PE或者是系统安装程序进行系统的安装。\n\n![img](关于计算机的Boot/2d1575284cf52f1871bd04a7cf2d75b4-5a96bb-1610095398.png)\n\nBIOS启动后，需要运行下一个程序，也就是要找到下一个启动程序所在的存储设备（例如硬盘或者U盘）。\n\nBIOS根据用户选择的启动设备或者是默认的启动顺序，判断该设备是否可用于引导（判断设备的第一个扇区，最前面的512字节的最后两个字节是否是0x55和0xAA，这512个字节就叫MBR 主引导记录）\n\n现在知道设备可用于启动了，那么现在就需要知道该到哪去运行下一个程序。而MBR中存储的就是操作系统在该设备上的位置，下一步就显而易见了，找到操作系统，启动！\n\n![img](关于计算机的Boot/b864d20e64f6e15e211f6017b3af5981-d3c0bd-1610095362.png)\n\n文章篇幅看似挺长，对于今天的计算机来讲，不过是“弹指一瞬间”，按下开机按钮，不出一会屏幕上就显示出操作系统的启动动画，或者对于土豪玩家，说不定已经能看到桌面了（汗。\n\n当然，上文中描述的启动顺序也并不完整，其中省略了一些关于分区表的部分，并且文章中说的MBR+BIOS的引导启动已经是过去式了，现在的引导方式也都变成了GPT+UEFI的形式。\n\nMBR和GPT其实都是分区表的两种种类，MBR是512字节，一个主分区的扇区总数不超过2^32即逻辑地址有32位，而每个扇区大小512字节，2^32\\*512即2T，所以MBR支持的最大容量为2T；而GPT逻辑地址提升至64位，则理论最大分区大小为2^64-1\\*512即18eb（1eb=1024pb=1024^2tb）。\n\nUEFI和BIOS的话，可以说UEFI相当于BIOS的升级版，兼容性、容错性、纠错性等更好，具体参见[Wiki](https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface)。\n\n总的来说，系统启动的过程就像多米诺骨牌一样，由小到大，从一开始的BIOS逐步启动到操作系统。","slug":"early/关于计算机的Boot","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec91d2q000rv0l4c9rvhhjy","content":"<p>boot是bootstrap的简写形式，当然这里的bootstrap不是指<a href=\"https://getbootstrap.com/\">web框架</a>的bootstrap，而是指计算机的“引导”。</p>\n<p>bootstrap原意是靴子，但是这跟计算机有什么关系呢？</p>\n<p>这源于一句谚语：</p>\n<blockquote>\n<p>pull oneself up by one’s bootstraps</p>\n<p>拽着鞋带把自己拉起来</p>\n</blockquote>\n<p>这个句子很有意思，就像左脚踩右脚不断交替就能上天一样。</p>\n<p>工程师把这个用来比喻计算机启动的过程，原因是因为：计算机上的大多数程序是由其他程序加载到计算机上的，那就意味着需要有一个机制将初始程序加载到计算机上。换句话说就是，计算机需要启动才能运行程序，而运行程序则需要启动计算机，而这明显是不能实现的。</p>\n<p><em>解释清楚死锁，我们就雇你；雇我我就解释给你听；来吧，我们讨论一下薪水的事情吧！</em></p>\n<p>早期的工程师使用各种方法把程序放入内存中以临时解决该问题，直到后来<strong>Rom</strong>的出现彻底解决了这个问题。</p>\n<blockquote>\n<p>Read-only memory (ROM) is a type of non-volatile memory used in computers and other electronic devices. Data stored in ROM cannot be electronically modified after the manufacture of the memory device. </p>\n<p>摘自<a href=\"https://en.wikipedia.org/wiki/Read-only_memory\">wiki</a></p>\n</blockquote>\n<p>翻译：只读存储器是一种在计算机和其他电子设备中使用的非易失性存储设备。存储在Rom中的数据一经制造就无法以电子方式修改。</p>\n<p>当然，随着科技的发展，Rom已经发展出了许多种类：可编程只读存储器（PROM）、可擦可编程序只读存储器（EPROM）和电可擦可编程只读存储器ROMROM（EEPROM），Rom已经不再是出厂就无法修改，从而也衍生出刷BIOS、刷Rom等操作了。</p>\n<p>而现在，这个Rom就存在计算机的主板上，里面写入的程序呢，就是<strong>BIOS</strong>。</p>\n<p><strong>BIOS ( Basic Input Output System )</strong> ，是计算机启动后运行的第一个程序。这个程序的功能就是最基本的输入输出、计算机自检和系统自启功能。</p>\n<p>计算机启动后，运行BIOS，首先进行自检，检查计算机上的硬件（CPU、内存等）是否满足运行的条件，若没有问题则转入下一阶段，否则报警并中止。</p>\n<p>自检没有问题，那么下一步就是决定启动顺序。</p>\n<p>经常装系统的同学可能很熟悉这个操作：插上U盘，按下开机键（短接电源），猛按f8或者某个按键，在屏幕弹出来的窗口上选择U盘，然后就进入PE或者是系统安装程序进行系统的安装。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E9%97%B2%E8%81%8A/%E5%85%B3%E4%BA%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84-boot/2d1575284cf52f1871bd04a7cf2d75b4-5a96bb-1610095398.png\" class=\"\" title=\"img\">\n\n<p>BIOS启动后，需要运行下一个程序，也就是要找到下一个启动程序所在的存储设备（例如硬盘或者U盘）。</p>\n<p>BIOS根据用户选择的启动设备或者是默认的启动顺序，判断该设备是否可用于引导（判断设备的第一个扇区，最前面的512字节的最后两个字节是否是0x55和0xAA，这512个字节就叫MBR 主引导记录）</p>\n<p>现在知道设备可用于启动了，那么现在就需要知道该到哪去运行下一个程序。而MBR中存储的就是操作系统在该设备上的位置，下一步就显而易见了，找到操作系统，启动！</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E9%97%B2%E8%81%8A/%E5%85%B3%E4%BA%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84-boot/b864d20e64f6e15e211f6017b3af5981-d3c0bd-1610095362.png\" class=\"\" title=\"img\">\n\n<p>文章篇幅看似挺长，对于今天的计算机来讲，不过是“弹指一瞬间”，按下开机按钮，不出一会屏幕上就显示出操作系统的启动动画，或者对于土豪玩家，说不定已经能看到桌面了（汗。</p>\n<p>当然，上文中描述的启动顺序也并不完整，其中省略了一些关于分区表的部分，并且文章中说的MBR+BIOS的引导启动已经是过去式了，现在的引导方式也都变成了GPT+UEFI的形式。</p>\n<p>MBR和GPT其实都是分区表的两种种类，MBR是512字节，一个主分区的扇区总数不超过2^32即逻辑地址有32位，而每个扇区大小512字节，2^32*512即2T，所以MBR支持的最大容量为2T；而GPT逻辑地址提升至64位，则理论最大分区大小为2^64-1*512即18eb（1eb=1024pb=1024^2tb）。</p>\n<p>UEFI和BIOS的话，可以说UEFI相当于BIOS的升级版，兼容性、容错性、纠错性等更好，具体参见<a href=\"https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface\">Wiki</a>。</p>\n<p>总的来说，系统启动的过程就像多米诺骨牌一样，由小到大，从一开始的BIOS逐步启动到操作系统。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>boot是bootstrap的简写形式，当然这里的bootstrap不是指<a href=\"https://getbootstrap.com/\">web框架</a>的bootstrap，而是指计算机的“引导”。</p>\n<p>bootstrap原意是靴子，但是这跟计算机有什么关系呢？</p>\n<p>这源于一句谚语：</p>\n<blockquote>\n<p>pull oneself up by one’s bootstraps</p>\n<p>拽着鞋带把自己拉起来</p>\n</blockquote>\n<p>这个句子很有意思，就像左脚踩右脚不断交替就能上天一样。</p>\n<p>工程师把这个用来比喻计算机启动的过程，原因是因为：计算机上的大多数程序是由其他程序加载到计算机上的，那就意味着需要有一个机制将初始程序加载到计算机上。换句话说就是，计算机需要启动才能运行程序，而运行程序则需要启动计算机，而这明显是不能实现的。</p>\n<p><em>解释清楚死锁，我们就雇你；雇我我就解释给你听；来吧，我们讨论一下薪水的事情吧！</em></p>\n<p>早期的工程师使用各种方法把程序放入内存中以临时解决该问题，直到后来<strong>Rom</strong>的出现彻底解决了这个问题。</p>\n<blockquote>\n<p>Read-only memory (ROM) is a type of non-volatile memory used in computers and other electronic devices. Data stored in ROM cannot be electronically modified after the manufacture of the memory device. </p>\n<p>摘自<a href=\"https://en.wikipedia.org/wiki/Read-only_memory\">wiki</a></p>\n</blockquote>\n<p>翻译：只读存储器是一种在计算机和其他电子设备中使用的非易失性存储设备。存储在Rom中的数据一经制造就无法以电子方式修改。</p>\n<p>当然，随着科技的发展，Rom已经发展出了许多种类：可编程只读存储器（PROM）、可擦可编程序只读存储器（EPROM）和电可擦可编程只读存储器ROMROM（EEPROM），Rom已经不再是出厂就无法修改，从而也衍生出刷BIOS、刷Rom等操作了。</p>\n<p>而现在，这个Rom就存在计算机的主板上，里面写入的程序呢，就是<strong>BIOS</strong>。</p>\n<p><strong>BIOS ( Basic Input Output System )</strong> ，是计算机启动后运行的第一个程序。这个程序的功能就是最基本的输入输出、计算机自检和系统自启功能。</p>\n<p>计算机启动后，运行BIOS，首先进行自检，检查计算机上的硬件（CPU、内存等）是否满足运行的条件，若没有问题则转入下一阶段，否则报警并中止。</p>\n<p>自检没有问题，那么下一步就是决定启动顺序。</p>\n<p>经常装系统的同学可能很熟悉这个操作：插上U盘，按下开机键（短接电源），猛按f8或者某个按键，在屏幕弹出来的窗口上选择U盘，然后就进入PE或者是系统安装程序进行系统的安装。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E9%97%B2%E8%81%8A/%E5%85%B3%E4%BA%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84-boot/2d1575284cf52f1871bd04a7cf2d75b4-5a96bb-1610095398.png\" class=\"\" title=\"img\">\n\n<p>BIOS启动后，需要运行下一个程序，也就是要找到下一个启动程序所在的存储设备（例如硬盘或者U盘）。</p>\n<p>BIOS根据用户选择的启动设备或者是默认的启动顺序，判断该设备是否可用于引导（判断设备的第一个扇区，最前面的512字节的最后两个字节是否是0x55和0xAA，这512个字节就叫MBR 主引导记录）</p>\n<p>现在知道设备可用于启动了，那么现在就需要知道该到哪去运行下一个程序。而MBR中存储的就是操作系统在该设备上的位置，下一步就显而易见了，找到操作系统，启动！</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E9%97%B2%E8%81%8A/%E5%85%B3%E4%BA%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84-boot/b864d20e64f6e15e211f6017b3af5981-d3c0bd-1610095362.png\" class=\"\" title=\"img\">\n\n<p>文章篇幅看似挺长，对于今天的计算机来讲，不过是“弹指一瞬间”，按下开机按钮，不出一会屏幕上就显示出操作系统的启动动画，或者对于土豪玩家，说不定已经能看到桌面了（汗。</p>\n<p>当然，上文中描述的启动顺序也并不完整，其中省略了一些关于分区表的部分，并且文章中说的MBR+BIOS的引导启动已经是过去式了，现在的引导方式也都变成了GPT+UEFI的形式。</p>\n<p>MBR和GPT其实都是分区表的两种种类，MBR是512字节，一个主分区的扇区总数不超过2^32即逻辑地址有32位，而每个扇区大小512字节，2^32*512即2T，所以MBR支持的最大容量为2T；而GPT逻辑地址提升至64位，则理论最大分区大小为2^64-1*512即18eb（1eb=1024pb=1024^2tb）。</p>\n<p>UEFI和BIOS的话，可以说UEFI相当于BIOS的升级版，兼容性、容错性、纠错性等更好，具体参见<a href=\"https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface\">Wiki</a>。</p>\n<p>总的来说，系统启动的过程就像多米诺骨牌一样，由小到大，从一开始的BIOS逐步启动到操作系统。</p>\n"},{"title":"好用的软件收集","date":"2019-07-20T08:51:50.000Z","updated":"2021-01-08T08:56:09.406Z","url":"https://maoxian.fun/archives/好用的软件收集","_content":"\n## 前言\n\n平时用到的软件很多，又杂，所以就整篇文章罗列出我自己平时用到的软件，由于本人的兴趣广泛，包括但不限于编程、作图、修图、摄影、写作、游戏、优化、美化等类型，或许也会包含一些有趣的我也不知道用来干什么的小程序或网站等。*同时也作为重装系统之后的软件安装列表。*\n\n*本文章非广告，仅为个人推荐*\n\n##### 服务器篇\n\n1. WordPress\n   - 本博客就是由WordPress驱动的，总的来说就是一个自动建立网站的开源软件。WordPress相当于是个博客管理系统，可以自定义主题，本博客主题为[小影志](https://c7sky.com/)的[C7V5](https://c7sky.com/wordpress-theme-c7v5.html)。\n\n##### 代码相关\n\n1. VsCode\n   - 微软自家的文本编辑器，不是IDE的IDE。通过不同的插件可实现IDE的功能，各种语言或者文章的编写，用过的都懂。\n2. IDEA\n   - 比较Eclipse来说，IDEA在对技术的支持上更方便一些~~（启动速度贼慢）~~，Ultimate版本集成了Spring等web项目，比起eclipse复杂的配置要便利许多。（而且好看）\n3. GitHubDesktop\n   - github的桌面版，傻瓜版的git，只要点点点就可以完成代码提交等基本功能。\n4. PowerDesigner\n   - 强大好用的数据库设计工具。\n5. Navicat\n   - 可视化DBMS。\n6. Beyound Compare\n   - 代码合并工具\n7. Xshell\n   - ssh连接服务器工具\n8. \n\n##### 日常使用\n\n1. 向日葵\n   - 远程控制自己的电脑，个人感觉比[TeamView](https://www.teamviewer.cn/cn/)好使。\n2. EveryThing\n   - 本地文件搜索工具，比系统自带的搜索快多了。\n3. Adobe全家桶\n   - 这还用解释？\n4. 小丸工具箱\n   - 视频剪辑处理的小工具。\n5. FastStone Capture\n   - 截图工具，长图、滚动、短视频录制等。\n6. Office全家桶\n   - 不用解释了吧？\n7. SpaceSniffer\n   - 磁盘空间分析软件，免费。可视化的界面展示各个文件/文件夹占用的大小。","source":"_posts/early/好用的软件收集-好用的软件收集.md","raw":"---\ntitle: 好用的软件收集\ndate: 2019-07-20 16:51:50.0\nupdated: 2021-01-08 16:56:09.406\nurl: https://maoxian.fun/archives/好用的软件收集\ncategories: \ntags: \n---\n\n## 前言\n\n平时用到的软件很多，又杂，所以就整篇文章罗列出我自己平时用到的软件，由于本人的兴趣广泛，包括但不限于编程、作图、修图、摄影、写作、游戏、优化、美化等类型，或许也会包含一些有趣的我也不知道用来干什么的小程序或网站等。*同时也作为重装系统之后的软件安装列表。*\n\n*本文章非广告，仅为个人推荐*\n\n##### 服务器篇\n\n1. WordPress\n   - 本博客就是由WordPress驱动的，总的来说就是一个自动建立网站的开源软件。WordPress相当于是个博客管理系统，可以自定义主题，本博客主题为[小影志](https://c7sky.com/)的[C7V5](https://c7sky.com/wordpress-theme-c7v5.html)。\n\n##### 代码相关\n\n1. VsCode\n   - 微软自家的文本编辑器，不是IDE的IDE。通过不同的插件可实现IDE的功能，各种语言或者文章的编写，用过的都懂。\n2. IDEA\n   - 比较Eclipse来说，IDEA在对技术的支持上更方便一些~~（启动速度贼慢）~~，Ultimate版本集成了Spring等web项目，比起eclipse复杂的配置要便利许多。（而且好看）\n3. GitHubDesktop\n   - github的桌面版，傻瓜版的git，只要点点点就可以完成代码提交等基本功能。\n4. PowerDesigner\n   - 强大好用的数据库设计工具。\n5. Navicat\n   - 可视化DBMS。\n6. Beyound Compare\n   - 代码合并工具\n7. Xshell\n   - ssh连接服务器工具\n8. \n\n##### 日常使用\n\n1. 向日葵\n   - 远程控制自己的电脑，个人感觉比[TeamView](https://www.teamviewer.cn/cn/)好使。\n2. EveryThing\n   - 本地文件搜索工具，比系统自带的搜索快多了。\n3. Adobe全家桶\n   - 这还用解释？\n4. 小丸工具箱\n   - 视频剪辑处理的小工具。\n5. FastStone Capture\n   - 截图工具，长图、滚动、短视频录制等。\n6. Office全家桶\n   - 不用解释了吧？\n7. SpaceSniffer\n   - 磁盘空间分析软件，免费。可视化的界面展示各个文件/文件夹占用的大小。","slug":"early/好用的软件收集-好用的软件收集","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec91d2r000vv0l4ckf1972w","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>平时用到的软件很多，又杂，所以就整篇文章罗列出我自己平时用到的软件，由于本人的兴趣广泛，包括但不限于编程、作图、修图、摄影、写作、游戏、优化、美化等类型，或许也会包含一些有趣的我也不知道用来干什么的小程序或网站等。<em>同时也作为重装系统之后的软件安装列表。</em></p>\n<p><em>本文章非广告，仅为个人推荐</em></p>\n<h5 id=\"服务器篇\"><a href=\"#服务器篇\" class=\"headerlink\" title=\"服务器篇\"></a>服务器篇</h5><ol>\n<li>WordPress<ul>\n<li>本博客就是由WordPress驱动的，总的来说就是一个自动建立网站的开源软件。WordPress相当于是个博客管理系统，可以自定义主题，本博客主题为<a href=\"https://c7sky.com/\">小影志</a>的<a href=\"https://c7sky.com/wordpress-theme-c7v5.html\">C7V5</a>。</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"代码相关\"><a href=\"#代码相关\" class=\"headerlink\" title=\"代码相关\"></a>代码相关</h5><ol>\n<li>VsCode<ul>\n<li>微软自家的文本编辑器，不是IDE的IDE。通过不同的插件可实现IDE的功能，各种语言或者文章的编写，用过的都懂。</li>\n</ul>\n</li>\n<li>IDEA<ul>\n<li>比较Eclipse来说，IDEA在对技术的支持上更方便一些<del>（启动速度贼慢）</del>，Ultimate版本集成了Spring等web项目，比起eclipse复杂的配置要便利许多。（而且好看）</li>\n</ul>\n</li>\n<li>GitHubDesktop<ul>\n<li>github的桌面版，傻瓜版的git，只要点点点就可以完成代码提交等基本功能。</li>\n</ul>\n</li>\n<li>PowerDesigner<ul>\n<li>强大好用的数据库设计工具。</li>\n</ul>\n</li>\n<li>Navicat<ul>\n<li>可视化DBMS。</li>\n</ul>\n</li>\n<li>Beyound Compare<ul>\n<li>代码合并工具</li>\n</ul>\n</li>\n<li>Xshell<ul>\n<li>ssh连接服务器工具</li>\n</ul>\n</li>\n<li></li>\n</ol>\n<h5 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h5><ol>\n<li>向日葵<ul>\n<li>远程控制自己的电脑，个人感觉比<a href=\"https://www.teamviewer.cn/cn/\">TeamView</a>好使。</li>\n</ul>\n</li>\n<li>EveryThing<ul>\n<li>本地文件搜索工具，比系统自带的搜索快多了。</li>\n</ul>\n</li>\n<li>Adobe全家桶<ul>\n<li>这还用解释？</li>\n</ul>\n</li>\n<li>小丸工具箱<ul>\n<li>视频剪辑处理的小工具。</li>\n</ul>\n</li>\n<li>FastStone Capture<ul>\n<li>截图工具，长图、滚动、短视频录制等。</li>\n</ul>\n</li>\n<li>Office全家桶<ul>\n<li>不用解释了吧？</li>\n</ul>\n</li>\n<li>SpaceSniffer<ul>\n<li>磁盘空间分析软件，免费。可视化的界面展示各个文件/文件夹占用的大小。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>平时用到的软件很多，又杂，所以就整篇文章罗列出我自己平时用到的软件，由于本人的兴趣广泛，包括但不限于编程、作图、修图、摄影、写作、游戏、优化、美化等类型，或许也会包含一些有趣的我也不知道用来干什么的小程序或网站等。<em>同时也作为重装系统之后的软件安装列表。</em></p>\n<p><em>本文章非广告，仅为个人推荐</em></p>\n<h5 id=\"服务器篇\"><a href=\"#服务器篇\" class=\"headerlink\" title=\"服务器篇\"></a>服务器篇</h5><ol>\n<li>WordPress<ul>\n<li>本博客就是由WordPress驱动的，总的来说就是一个自动建立网站的开源软件。WordPress相当于是个博客管理系统，可以自定义主题，本博客主题为<a href=\"https://c7sky.com/\">小影志</a>的<a href=\"https://c7sky.com/wordpress-theme-c7v5.html\">C7V5</a>。</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"代码相关\"><a href=\"#代码相关\" class=\"headerlink\" title=\"代码相关\"></a>代码相关</h5><ol>\n<li>VsCode<ul>\n<li>微软自家的文本编辑器，不是IDE的IDE。通过不同的插件可实现IDE的功能，各种语言或者文章的编写，用过的都懂。</li>\n</ul>\n</li>\n<li>IDEA<ul>\n<li>比较Eclipse来说，IDEA在对技术的支持上更方便一些<del>（启动速度贼慢）</del>，Ultimate版本集成了Spring等web项目，比起eclipse复杂的配置要便利许多。（而且好看）</li>\n</ul>\n</li>\n<li>GitHubDesktop<ul>\n<li>github的桌面版，傻瓜版的git，只要点点点就可以完成代码提交等基本功能。</li>\n</ul>\n</li>\n<li>PowerDesigner<ul>\n<li>强大好用的数据库设计工具。</li>\n</ul>\n</li>\n<li>Navicat<ul>\n<li>可视化DBMS。</li>\n</ul>\n</li>\n<li>Beyound Compare<ul>\n<li>代码合并工具</li>\n</ul>\n</li>\n<li>Xshell<ul>\n<li>ssh连接服务器工具</li>\n</ul>\n</li>\n<li></li>\n</ol>\n<h5 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h5><ol>\n<li>向日葵<ul>\n<li>远程控制自己的电脑，个人感觉比<a href=\"https://www.teamviewer.cn/cn/\">TeamView</a>好使。</li>\n</ul>\n</li>\n<li>EveryThing<ul>\n<li>本地文件搜索工具，比系统自带的搜索快多了。</li>\n</ul>\n</li>\n<li>Adobe全家桶<ul>\n<li>这还用解释？</li>\n</ul>\n</li>\n<li>小丸工具箱<ul>\n<li>视频剪辑处理的小工具。</li>\n</ul>\n</li>\n<li>FastStone Capture<ul>\n<li>截图工具，长图、滚动、短视频录制等。</li>\n</ul>\n</li>\n<li>Office全家桶<ul>\n<li>不用解释了吧？</li>\n</ul>\n</li>\n<li>SpaceSniffer<ul>\n<li>磁盘空间分析软件，免费。可视化的界面展示各个文件/文件夹占用的大小。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"数据结构-链表","date":"2019-07-17T07:34:02.000Z","updated":"2022-05-03T05:53:34.826Z","url":"https://maoxian.fun/archives/shu-ju-jie-gou-lian-biao","_content":"\n链表是线性表的一种，是一种基础的数据结构，相对于数组更加的灵活。本文以**单链表**为例、用 **C++** 语言描述介绍链表的原理与实现。\n\n## 数组\n\n在讨论链表之前，先来看一下另一种线性表——数组。数组是储存在一块连续分配的内存中的，通过对元素下标、元素类型和数组首地址的运算，我们可以很方便的得到元素在内存中的地址。以一维数组为例，数组中的每个元素都是按照顺序依次储存在一块连续分配的内存中。\n\n![数组在内存中的分配](数据结构-链表/Memory.jpg)\n\n数组由于是分配在连续的内存空间上，在随机读取方面具有极大的优势，但是在程序中数组的大小是固定的，一旦定义了一个数组，就不能对其大小进行调整。所以我们在设定时往往以最大的需求来定义数组，而有些时候这会造成一些空间上的浪费。\n\n## 链表\n\n链表是一种灵活的数据结构，在内存上是不连续的。\n\n### 结构\n\n链表中的每个元素称为节点Node。节点在内存中是随机分布的，每个节点分为两个部分，存放数据的数据域和保存地址的指针域。\n\n![img](数据结构-链表/Node-cf7df3e42588b5b990f72608ca0fd257-cd4fc8-1610089027.jpeg)\n\n单链表由一个头节点Node *head（指向第一个节点的地址）和各节点组成，从头节点开始，通过指针将每个节点依次连接起来，最后一个指针置空（指向nullptr）。\n\n![img](数据结构-链表/delete-d9814b52ffbb9a97cf928c54c7395c43-ca62e2-1610089087.jpeg)\n\n在单链表中，每个节点除了本身的数据之外保存的还有下一个节点的地址，对链表的访问也只能从头节点出发，直到找到目标。节点的储存是分散的，只是通过指针将每个节点串了起来，形成一个完整的链，从而提高了数据储存的灵活性。缺点则是当要访问某一元素的时候，必须从头开始遍历，时间复杂度为O(n)。\n\n### 节点的插入与删除\n\n链表中每个节点通过指针连接，因此，插入与删除节点的时候只要修改对应指针的指向。\n\n![Insert](数据结构-链表/Insert.jpg)\n\n插入节点时，首先将要插入的野生节点的指针指向要插入的后一个节点（图中节点2），再将前一个节点的指针指向野生节点。\n\n![delete](数据结构-链表/delete.jpg)\n\n删除节点与插入类似，只要将前一节点（head）的指针指向被删除后一节点（节点2），同时别忘了将节点1的内存空间回收。\n\n### 分类\n\n单链表是链表中最简单的一个类型，链表还有双链表、循环链表。\n\n![doubleNode](数据结构-链表/doubleNode.jpg)\n\n双链表是在单链表的基础上，在节点的指针域中增加一个指针*prevNode(previous node)指向前一个节点，实现对链表的双向访问。\n\n![cycleList](数据结构-链表/cycleList.jpg)\n\n循环链表是在单/双链表的基础上，将尾节点的*nextNode指针指向头节点，使链表形成一个环状结构。","source":"_posts/early/数据结构-链表.md","raw":"---\ntitle: 数据结构-链表\ndate: 2019-07-17 15:34:02.0\nupdated: 2022-05-03 13:53:34.826\nurl: https://maoxian.fun/archives/shu-ju-jie-gou-lian-biao\ncategories: \n- 程序\n- 数据结构-算法\ntags: \n- 程序\n- 代码\n- 数据结构\n---\n\n链表是线性表的一种，是一种基础的数据结构，相对于数组更加的灵活。本文以**单链表**为例、用 **C++** 语言描述介绍链表的原理与实现。\n\n## 数组\n\n在讨论链表之前，先来看一下另一种线性表——数组。数组是储存在一块连续分配的内存中的，通过对元素下标、元素类型和数组首地址的运算，我们可以很方便的得到元素在内存中的地址。以一维数组为例，数组中的每个元素都是按照顺序依次储存在一块连续分配的内存中。\n\n![数组在内存中的分配](数据结构-链表/Memory.jpg)\n\n数组由于是分配在连续的内存空间上，在随机读取方面具有极大的优势，但是在程序中数组的大小是固定的，一旦定义了一个数组，就不能对其大小进行调整。所以我们在设定时往往以最大的需求来定义数组，而有些时候这会造成一些空间上的浪费。\n\n## 链表\n\n链表是一种灵活的数据结构，在内存上是不连续的。\n\n### 结构\n\n链表中的每个元素称为节点Node。节点在内存中是随机分布的，每个节点分为两个部分，存放数据的数据域和保存地址的指针域。\n\n![img](数据结构-链表/Node-cf7df3e42588b5b990f72608ca0fd257-cd4fc8-1610089027.jpeg)\n\n单链表由一个头节点Node *head（指向第一个节点的地址）和各节点组成，从头节点开始，通过指针将每个节点依次连接起来，最后一个指针置空（指向nullptr）。\n\n![img](数据结构-链表/delete-d9814b52ffbb9a97cf928c54c7395c43-ca62e2-1610089087.jpeg)\n\n在单链表中，每个节点除了本身的数据之外保存的还有下一个节点的地址，对链表的访问也只能从头节点出发，直到找到目标。节点的储存是分散的，只是通过指针将每个节点串了起来，形成一个完整的链，从而提高了数据储存的灵活性。缺点则是当要访问某一元素的时候，必须从头开始遍历，时间复杂度为O(n)。\n\n### 节点的插入与删除\n\n链表中每个节点通过指针连接，因此，插入与删除节点的时候只要修改对应指针的指向。\n\n![Insert](数据结构-链表/Insert.jpg)\n\n插入节点时，首先将要插入的野生节点的指针指向要插入的后一个节点（图中节点2），再将前一个节点的指针指向野生节点。\n\n![delete](数据结构-链表/delete.jpg)\n\n删除节点与插入类似，只要将前一节点（head）的指针指向被删除后一节点（节点2），同时别忘了将节点1的内存空间回收。\n\n### 分类\n\n单链表是链表中最简单的一个类型，链表还有双链表、循环链表。\n\n![doubleNode](数据结构-链表/doubleNode.jpg)\n\n双链表是在单链表的基础上，在节点的指针域中增加一个指针*prevNode(previous node)指向前一个节点，实现对链表的双向访问。\n\n![cycleList](数据结构-链表/cycleList.jpg)\n\n循环链表是在单/双链表的基础上，将尾节点的*nextNode指针指向头节点，使链表形成一个环状结构。","slug":"early/数据结构-链表","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec91d2t0013v0l4hffw5sds","content":"<p>链表是线性表的一种，是一种基础的数据结构，相对于数组更加的灵活。本文以<strong>单链表</strong>为例、用 <strong>C++</strong> 语言描述介绍链表的原理与实现。</p>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>在讨论链表之前，先来看一下另一种线性表——数组。数组是储存在一块连续分配的内存中的，通过对元素下标、元素类型和数组首地址的运算，我们可以很方便的得到元素在内存中的地址。以一维数组为例，数组中的每个元素都是按照顺序依次储存在一块连续分配的内存中。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/Memory.jpg\" class=\"\" title=\"数组在内存中的分配\">\n\n<p>数组由于是分配在连续的内存空间上，在随机读取方面具有极大的优势，但是在程序中数组的大小是固定的，一旦定义了一个数组，就不能对其大小进行调整。所以我们在设定时往往以最大的需求来定义数组，而有些时候这会造成一些空间上的浪费。</p>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><p>链表是一种灵活的数据结构，在内存上是不连续的。</p>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p>链表中的每个元素称为节点Node。节点在内存中是随机分布的，每个节点分为两个部分，存放数据的数据域和保存地址的指针域。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/Node-cf7df3e42588b5b990f72608ca0fd257-cd4fc8-1610089027.jpeg\" class=\"\" title=\"img\">\n\n<p>单链表由一个头节点Node *head（指向第一个节点的地址）和各节点组成，从头节点开始，通过指针将每个节点依次连接起来，最后一个指针置空（指向nullptr）。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/delete-d9814b52ffbb9a97cf928c54c7395c43-ca62e2-1610089087.jpeg\" class=\"\" title=\"img\">\n\n<p>在单链表中，每个节点除了本身的数据之外保存的还有下一个节点的地址，对链表的访问也只能从头节点出发，直到找到目标。节点的储存是分散的，只是通过指针将每个节点串了起来，形成一个完整的链，从而提高了数据储存的灵活性。缺点则是当要访问某一元素的时候，必须从头开始遍历，时间复杂度为O(n)。</p>\n<h3 id=\"节点的插入与删除\"><a href=\"#节点的插入与删除\" class=\"headerlink\" title=\"节点的插入与删除\"></a>节点的插入与删除</h3><p>链表中每个节点通过指针连接，因此，插入与删除节点的时候只要修改对应指针的指向。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/Insert.jpg\" class=\"\" title=\"Insert\">\n\n<p>插入节点时，首先将要插入的野生节点的指针指向要插入的后一个节点（图中节点2），再将前一个节点的指针指向野生节点。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/delete.jpg\" class=\"\" title=\"delete\">\n\n<p>删除节点与插入类似，只要将前一节点（head）的指针指向被删除后一节点（节点2），同时别忘了将节点1的内存空间回收。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><p>单链表是链表中最简单的一个类型，链表还有双链表、循环链表。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/doubleNode.jpg\" class=\"\" title=\"doubleNode\">\n\n<p>双链表是在单链表的基础上，在节点的指针域中增加一个指针*prevNode(previous node)指向前一个节点，实现对链表的双向访问。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/cycleList.jpg\" class=\"\" title=\"cycleList\">\n\n<p>循环链表是在单/双链表的基础上，将尾节点的*nextNode指针指向头节点，使链表形成一个环状结构。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>链表是线性表的一种，是一种基础的数据结构，相对于数组更加的灵活。本文以<strong>单链表</strong>为例、用 <strong>C++</strong> 语言描述介绍链表的原理与实现。</p>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>在讨论链表之前，先来看一下另一种线性表——数组。数组是储存在一块连续分配的内存中的，通过对元素下标、元素类型和数组首地址的运算，我们可以很方便的得到元素在内存中的地址。以一维数组为例，数组中的每个元素都是按照顺序依次储存在一块连续分配的内存中。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/Memory.jpg\" class=\"\" title=\"数组在内存中的分配\">\n\n<p>数组由于是分配在连续的内存空间上，在随机读取方面具有极大的优势，但是在程序中数组的大小是固定的，一旦定义了一个数组，就不能对其大小进行调整。所以我们在设定时往往以最大的需求来定义数组，而有些时候这会造成一些空间上的浪费。</p>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><p>链表是一种灵活的数据结构，在内存上是不连续的。</p>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p>链表中的每个元素称为节点Node。节点在内存中是随机分布的，每个节点分为两个部分，存放数据的数据域和保存地址的指针域。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/Node-cf7df3e42588b5b990f72608ca0fd257-cd4fc8-1610089027.jpeg\" class=\"\" title=\"img\">\n\n<p>单链表由一个头节点Node *head（指向第一个节点的地址）和各节点组成，从头节点开始，通过指针将每个节点依次连接起来，最后一个指针置空（指向nullptr）。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/delete-d9814b52ffbb9a97cf928c54c7395c43-ca62e2-1610089087.jpeg\" class=\"\" title=\"img\">\n\n<p>在单链表中，每个节点除了本身的数据之外保存的还有下一个节点的地址，对链表的访问也只能从头节点出发，直到找到目标。节点的储存是分散的，只是通过指针将每个节点串了起来，形成一个完整的链，从而提高了数据储存的灵活性。缺点则是当要访问某一元素的时候，必须从头开始遍历，时间复杂度为O(n)。</p>\n<h3 id=\"节点的插入与删除\"><a href=\"#节点的插入与删除\" class=\"headerlink\" title=\"节点的插入与删除\"></a>节点的插入与删除</h3><p>链表中每个节点通过指针连接，因此，插入与删除节点的时候只要修改对应指针的指向。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/Insert.jpg\" class=\"\" title=\"Insert\">\n\n<p>插入节点时，首先将要插入的野生节点的指针指向要插入的后一个节点（图中节点2），再将前一个节点的指针指向野生节点。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/delete.jpg\" class=\"\" title=\"delete\">\n\n<p>删除节点与插入类似，只要将前一节点（head）的指针指向被删除后一节点（节点2），同时别忘了将节点1的内存空间回收。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><p>单链表是链表中最简单的一个类型，链表还有双链表、循环链表。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/doubleNode.jpg\" class=\"\" title=\"doubleNode\">\n\n<p>双链表是在单链表的基础上，在节点的指针域中增加一个指针*prevNode(previous node)指向前一个节点，实现对链表的双向访问。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/cycleList.jpg\" class=\"\" title=\"cycleList\">\n\n<p>循环链表是在单/双链表的基础上，将尾节点的*nextNode指针指向头节点，使链表形成一个环状结构。</p>\n"},{"title":"编码算法","date":"2022-01-27T14:24:12.960Z","updated":"2022-05-01T02:19:28.711Z","url":"https://maoxian.fun/archives/bian-ma-suan-fa","_content":"\n# 前言\n严格来说，编码并不算在信息安全里，只是将信息使用另一个形式进行传输或者是表面上的不可阅读而已。\n\n\n# 算法\n## Base64\n网上说的最多的就是Base64。“用Base64加密一下“，这种说法是不严谨的，因为它只能够实现肉眼上的不可读。\nBase64算法是一种编码算法，将二进制数据使用64个ASKII字符表达，主要用于解决二进制数据在不同端的不兼容问题。一些特殊的二进制流在不同的设备、系统中可能表示的意义不同，同时老设备、早期的软件、系统、协议对二进制数据的处理方式也可能不相同，但是基于ASKII的编码在大多数设备的行为都是一致的。\n\n### 原理\n将 字符/二进制 数据按字节(ASKII | 8位)进行拆分，其中若拆分后二进制不足8位则在前面补0，拆分之后检查，如果总字节数不能被3整除(最少3个字节才能转换成4个Base64字节)，则在最后补0使总字节数可被3整除，再以6位为一组按照Base64映射表进行编码(2^6=64)，编码后，按照之前末尾补零的数量，在编码末尾添加对应的'='表示补0的数量。\n\n**Base64映射表**\n\n| 数值 | 字符 |     | 数值 | 字符 |     | 数值 | 字符 |     | 数值 | 字符 |\n|:---- |:---- | --- |:---- |:---- | --- |:---- | ---- | --- | ---- | ---- |\n| 0    | A    |     | 16   | Q    |     | 32   | g    |     | 48   | w    |\n| 1    | B    |     | 17   | R    |     | 33   | h    |     | 49   | x    |\n| 2    | C    |     | 18   | S    |     | 34   | i    |     | 50   | y    |\n| 3    | D    |     | 19   | T    |     | 35   | j    |     | 51   | z    |\n| 4    | E    |     | 20   | U    |     | 36   | k    |     | 52   | 0    |\n| 5    | F    |     | 21   | V    |     | 37   | l    |     | 53   | 1    |\n| 6    | G    |     | 22   | W    |     | 38   | m    |     | 54   | 2    |\n| 7    | H    |     | 23   | X    |     | 39   | n    |     | 55   | 3    |\n| 8    | I    |     | 24   | Y    |     | 40   | o    |     | 56   | 4    |\n| 9    | J    |     | 25   | Z    |     | 41   | p    |     | 57   | 5    |\n| 10   | K    |     | 26   | a    |     | 42   | q    |     | 58   | 6    |\n| 11   | L    |     | 27   | b    |     | 43   | r    |     | 59   | 7    |\n| 12   | M    |     | 28   | c    |     | 44   | s    |     | 60   | 8    |\n| 13   | N    |     | 29   | d    |     | 45   | t    |     | 61   | 9    |\n| 14   | O    |     | 30   | e    |     | 46   | u    |     | 62   | +    |\n| 15   | P    |     | 31   | f    |     | 47   | v    |     | 63   | /    |\n\n**举例说明**\n这里以文本数据进行解释说明，容易理解。\n<table style=\"text-align: center\">\n  <tr>\n    <td>文本</td>\n    <td colspan=\"6\">Mx</td>\n  </tr>\n  <tr>\n    <td>字符</td>\n    <td colspan=\"3\">M</td>\n    <td colspan=\"3\">x</td>\n    <td>按照字符拆分</td>\n  </tr>\n  <tr>\n    <td>Askii码</td>\n    <td colspan=\"3\">1001101</td>\n    <td colspan=\"3\">1111000</td>\n    <td>字符对应的askii码</td>\n  </tr>\n  <tr>\n    <td>补零</td>\n    <td colspan=\"3\"><b>0</b>1001101</td>\n    <td colspan=\"3\"><b>0</b>1111000</td>\n    <td>在前面补零至8位</td>\n  </tr>\n  <tr>\n    <td>分组</td>\n    <td colspan=\"2\">010011</td>\n    <td colspan=\"2\">010111</td>\n    <td colspan=\"2\">1000<b>00</b></td>\n    <td>按6位一组重新分组</td>\n  </tr>\n  <tr>\n    <td>编号</td>\n    <td colspan=\"2\">19</td>\n    <td colspan=\"2\">23</td>\n    <td colspan=\"2\">32</td>\n    <td>转换10进制</td>\n  </tr>\n  <tr>\n    <td>转码</td>\n    <td colspan=\"2\">T</td>\n    <td colspan=\"2\">X</td>\n    <td colspan=\"2\">g</td>\n    <td>根据编号和表格进行编码</td>\n  </tr>\n  <tr>\n    <td>结果</td>\n    <td colspan=\"6\">TXg=</td>\n    <td>由于总字节数为2，不能被3整除，所以补1个等号</td>\n  </tr>\n</table>\n\n\n### 使用场景\n1. 一些文本传输协议不支持\"不可见字符\"的传输，如SMTP等，需要将其转码成可见文本进行传输。\n2. 将小图片或小文件转换成base64后，就可以将二进制数据当作字符串在不同异构系统中进行传输、保存。\n3. 肉眼上的不可见，base64本身算法不复杂，编码和解码本身性能开销很小，但是对于人脑还是较麻烦的。","source":"_posts/early/编码算法-bian-ma-suan-fa.md","raw":"---\ntitle: 编码算法\ndate: 2022-01-27 22:24:12.96\nupdated: 2022-05-01 10:19:28.711\nurl: https://maoxian.fun/archives/bian-ma-suan-fa\ncategories: \n- 算法相关\ntags: \n- 算法\n- 编码\n- Base64\n---\n\n# 前言\n严格来说，编码并不算在信息安全里，只是将信息使用另一个形式进行传输或者是表面上的不可阅读而已。\n\n\n# 算法\n## Base64\n网上说的最多的就是Base64。“用Base64加密一下“，这种说法是不严谨的，因为它只能够实现肉眼上的不可读。\nBase64算法是一种编码算法，将二进制数据使用64个ASKII字符表达，主要用于解决二进制数据在不同端的不兼容问题。一些特殊的二进制流在不同的设备、系统中可能表示的意义不同，同时老设备、早期的软件、系统、协议对二进制数据的处理方式也可能不相同，但是基于ASKII的编码在大多数设备的行为都是一致的。\n\n### 原理\n将 字符/二进制 数据按字节(ASKII | 8位)进行拆分，其中若拆分后二进制不足8位则在前面补0，拆分之后检查，如果总字节数不能被3整除(最少3个字节才能转换成4个Base64字节)，则在最后补0使总字节数可被3整除，再以6位为一组按照Base64映射表进行编码(2^6=64)，编码后，按照之前末尾补零的数量，在编码末尾添加对应的'='表示补0的数量。\n\n**Base64映射表**\n\n| 数值 | 字符 |     | 数值 | 字符 |     | 数值 | 字符 |     | 数值 | 字符 |\n|:---- |:---- | --- |:---- |:---- | --- |:---- | ---- | --- | ---- | ---- |\n| 0    | A    |     | 16   | Q    |     | 32   | g    |     | 48   | w    |\n| 1    | B    |     | 17   | R    |     | 33   | h    |     | 49   | x    |\n| 2    | C    |     | 18   | S    |     | 34   | i    |     | 50   | y    |\n| 3    | D    |     | 19   | T    |     | 35   | j    |     | 51   | z    |\n| 4    | E    |     | 20   | U    |     | 36   | k    |     | 52   | 0    |\n| 5    | F    |     | 21   | V    |     | 37   | l    |     | 53   | 1    |\n| 6    | G    |     | 22   | W    |     | 38   | m    |     | 54   | 2    |\n| 7    | H    |     | 23   | X    |     | 39   | n    |     | 55   | 3    |\n| 8    | I    |     | 24   | Y    |     | 40   | o    |     | 56   | 4    |\n| 9    | J    |     | 25   | Z    |     | 41   | p    |     | 57   | 5    |\n| 10   | K    |     | 26   | a    |     | 42   | q    |     | 58   | 6    |\n| 11   | L    |     | 27   | b    |     | 43   | r    |     | 59   | 7    |\n| 12   | M    |     | 28   | c    |     | 44   | s    |     | 60   | 8    |\n| 13   | N    |     | 29   | d    |     | 45   | t    |     | 61   | 9    |\n| 14   | O    |     | 30   | e    |     | 46   | u    |     | 62   | +    |\n| 15   | P    |     | 31   | f    |     | 47   | v    |     | 63   | /    |\n\n**举例说明**\n这里以文本数据进行解释说明，容易理解。\n<table style=\"text-align: center\">\n  <tr>\n    <td>文本</td>\n    <td colspan=\"6\">Mx</td>\n  </tr>\n  <tr>\n    <td>字符</td>\n    <td colspan=\"3\">M</td>\n    <td colspan=\"3\">x</td>\n    <td>按照字符拆分</td>\n  </tr>\n  <tr>\n    <td>Askii码</td>\n    <td colspan=\"3\">1001101</td>\n    <td colspan=\"3\">1111000</td>\n    <td>字符对应的askii码</td>\n  </tr>\n  <tr>\n    <td>补零</td>\n    <td colspan=\"3\"><b>0</b>1001101</td>\n    <td colspan=\"3\"><b>0</b>1111000</td>\n    <td>在前面补零至8位</td>\n  </tr>\n  <tr>\n    <td>分组</td>\n    <td colspan=\"2\">010011</td>\n    <td colspan=\"2\">010111</td>\n    <td colspan=\"2\">1000<b>00</b></td>\n    <td>按6位一组重新分组</td>\n  </tr>\n  <tr>\n    <td>编号</td>\n    <td colspan=\"2\">19</td>\n    <td colspan=\"2\">23</td>\n    <td colspan=\"2\">32</td>\n    <td>转换10进制</td>\n  </tr>\n  <tr>\n    <td>转码</td>\n    <td colspan=\"2\">T</td>\n    <td colspan=\"2\">X</td>\n    <td colspan=\"2\">g</td>\n    <td>根据编号和表格进行编码</td>\n  </tr>\n  <tr>\n    <td>结果</td>\n    <td colspan=\"6\">TXg=</td>\n    <td>由于总字节数为2，不能被3整除，所以补1个等号</td>\n  </tr>\n</table>\n\n\n### 使用场景\n1. 一些文本传输协议不支持\"不可见字符\"的传输，如SMTP等，需要将其转码成可见文本进行传输。\n2. 将小图片或小文件转换成base64后，就可以将二进制数据当作字符串在不同异构系统中进行传输、保存。\n3. 肉眼上的不可见，base64本身算法不复杂，编码和解码本身性能开销很小，但是对于人脑还是较麻烦的。","slug":"early/编码算法-bian-ma-suan-fa","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec91d2u0017v0l488s8b1bf","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>严格来说，编码并不算在信息安全里，只是将信息使用另一个形式进行传输或者是表面上的不可阅读而已。</p>\n<h1 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h1><h2 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h2><p>网上说的最多的就是Base64。“用Base64加密一下“，这种说法是不严谨的，因为它只能够实现肉眼上的不可读。<br>Base64算法是一种编码算法，将二进制数据使用64个ASKII字符表达，主要用于解决二进制数据在不同端的不兼容问题。一些特殊的二进制流在不同的设备、系统中可能表示的意义不同，同时老设备、早期的软件、系统、协议对二进制数据的处理方式也可能不相同，但是基于ASKII的编码在大多数设备的行为都是一致的。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>将 字符/二进制 数据按字节(ASKII | 8位)进行拆分，其中若拆分后二进制不足8位则在前面补0，拆分之后检查，如果总字节数不能被3整除(最少3个字节才能转换成4个Base64字节)，则在最后补0使总字节数可被3整除，再以6位为一组按照Base64映射表进行编码(2^6=64)，编码后，按照之前末尾补零的数量，在编码末尾添加对应的’=’表示补0的数量。</p>\n<p><strong>Base64映射表</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数值</th>\n<th align=\"left\">字符</th>\n<th></th>\n<th align=\"left\">数值</th>\n<th align=\"left\">字符</th>\n<th></th>\n<th align=\"left\">数值</th>\n<th>字符</th>\n<th></th>\n<th>数值</th>\n<th>字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">0</td>\n<td align=\"left\">A</td>\n<td></td>\n<td align=\"left\">16</td>\n<td align=\"left\">Q</td>\n<td></td>\n<td align=\"left\">32</td>\n<td>g</td>\n<td></td>\n<td>48</td>\n<td>w</td>\n</tr>\n<tr>\n<td align=\"left\">1</td>\n<td align=\"left\">B</td>\n<td></td>\n<td align=\"left\">17</td>\n<td align=\"left\">R</td>\n<td></td>\n<td align=\"left\">33</td>\n<td>h</td>\n<td></td>\n<td>49</td>\n<td>x</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">C</td>\n<td></td>\n<td align=\"left\">18</td>\n<td align=\"left\">S</td>\n<td></td>\n<td align=\"left\">34</td>\n<td>i</td>\n<td></td>\n<td>50</td>\n<td>y</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">D</td>\n<td></td>\n<td align=\"left\">19</td>\n<td align=\"left\">T</td>\n<td></td>\n<td align=\"left\">35</td>\n<td>j</td>\n<td></td>\n<td>51</td>\n<td>z</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">E</td>\n<td></td>\n<td align=\"left\">20</td>\n<td align=\"left\">U</td>\n<td></td>\n<td align=\"left\">36</td>\n<td>k</td>\n<td></td>\n<td>52</td>\n<td>0</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">F</td>\n<td></td>\n<td align=\"left\">21</td>\n<td align=\"left\">V</td>\n<td></td>\n<td align=\"left\">37</td>\n<td>l</td>\n<td></td>\n<td>53</td>\n<td>1</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">G</td>\n<td></td>\n<td align=\"left\">22</td>\n<td align=\"left\">W</td>\n<td></td>\n<td align=\"left\">38</td>\n<td>m</td>\n<td></td>\n<td>54</td>\n<td>2</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\">H</td>\n<td></td>\n<td align=\"left\">23</td>\n<td align=\"left\">X</td>\n<td></td>\n<td align=\"left\">39</td>\n<td>n</td>\n<td></td>\n<td>55</td>\n<td>3</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\">I</td>\n<td></td>\n<td align=\"left\">24</td>\n<td align=\"left\">Y</td>\n<td></td>\n<td align=\"left\">40</td>\n<td>o</td>\n<td></td>\n<td>56</td>\n<td>4</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\">J</td>\n<td></td>\n<td align=\"left\">25</td>\n<td align=\"left\">Z</td>\n<td></td>\n<td align=\"left\">41</td>\n<td>p</td>\n<td></td>\n<td>57</td>\n<td>5</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\">K</td>\n<td></td>\n<td align=\"left\">26</td>\n<td align=\"left\">a</td>\n<td></td>\n<td align=\"left\">42</td>\n<td>q</td>\n<td></td>\n<td>58</td>\n<td>6</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\">L</td>\n<td></td>\n<td align=\"left\">27</td>\n<td align=\"left\">b</td>\n<td></td>\n<td align=\"left\">43</td>\n<td>r</td>\n<td></td>\n<td>59</td>\n<td>7</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\">M</td>\n<td></td>\n<td align=\"left\">28</td>\n<td align=\"left\">c</td>\n<td></td>\n<td align=\"left\">44</td>\n<td>s</td>\n<td></td>\n<td>60</td>\n<td>8</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\">N</td>\n<td></td>\n<td align=\"left\">29</td>\n<td align=\"left\">d</td>\n<td></td>\n<td align=\"left\">45</td>\n<td>t</td>\n<td></td>\n<td>61</td>\n<td>9</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\">O</td>\n<td></td>\n<td align=\"left\">30</td>\n<td align=\"left\">e</td>\n<td></td>\n<td align=\"left\">46</td>\n<td>u</td>\n<td></td>\n<td>62</td>\n<td>+</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\">P</td>\n<td></td>\n<td align=\"left\">31</td>\n<td align=\"left\">f</td>\n<td></td>\n<td align=\"left\">47</td>\n<td>v</td>\n<td></td>\n<td>63</td>\n<td>/</td>\n</tr>\n</tbody></table>\n<p><strong>举例说明</strong><br>这里以文本数据进行解释说明，容易理解。</p>\n<table style=\"text-align: center\">\n  <tr>\n    <td>文本</td>\n    <td colspan=\"6\">Mx</td>\n  </tr>\n  <tr>\n    <td>字符</td>\n    <td colspan=\"3\">M</td>\n    <td colspan=\"3\">x</td>\n    <td>按照字符拆分</td>\n  </tr>\n  <tr>\n    <td>Askii码</td>\n    <td colspan=\"3\">1001101</td>\n    <td colspan=\"3\">1111000</td>\n    <td>字符对应的askii码</td>\n  </tr>\n  <tr>\n    <td>补零</td>\n    <td colspan=\"3\"><b>0</b>1001101</td>\n    <td colspan=\"3\"><b>0</b>1111000</td>\n    <td>在前面补零至8位</td>\n  </tr>\n  <tr>\n    <td>分组</td>\n    <td colspan=\"2\">010011</td>\n    <td colspan=\"2\">010111</td>\n    <td colspan=\"2\">1000<b>00</b></td>\n    <td>按6位一组重新分组</td>\n  </tr>\n  <tr>\n    <td>编号</td>\n    <td colspan=\"2\">19</td>\n    <td colspan=\"2\">23</td>\n    <td colspan=\"2\">32</td>\n    <td>转换10进制</td>\n  </tr>\n  <tr>\n    <td>转码</td>\n    <td colspan=\"2\">T</td>\n    <td colspan=\"2\">X</td>\n    <td colspan=\"2\">g</td>\n    <td>根据编号和表格进行编码</td>\n  </tr>\n  <tr>\n    <td>结果</td>\n    <td colspan=\"6\">TXg=</td>\n    <td>由于总字节数为2，不能被3整除，所以补1个等号</td>\n  </tr>\n</table>\n\n\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ol>\n<li>一些文本传输协议不支持”不可见字符”的传输，如SMTP等，需要将其转码成可见文本进行传输。</li>\n<li>将小图片或小文件转换成base64后，就可以将二进制数据当作字符串在不同异构系统中进行传输、保存。</li>\n<li>肉眼上的不可见，base64本身算法不复杂，编码和解码本身性能开销很小，但是对于人脑还是较麻烦的。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>严格来说，编码并不算在信息安全里，只是将信息使用另一个形式进行传输或者是表面上的不可阅读而已。</p>\n<h1 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h1><h2 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h2><p>网上说的最多的就是Base64。“用Base64加密一下“，这种说法是不严谨的，因为它只能够实现肉眼上的不可读。<br>Base64算法是一种编码算法，将二进制数据使用64个ASKII字符表达，主要用于解决二进制数据在不同端的不兼容问题。一些特殊的二进制流在不同的设备、系统中可能表示的意义不同，同时老设备、早期的软件、系统、协议对二进制数据的处理方式也可能不相同，但是基于ASKII的编码在大多数设备的行为都是一致的。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>将 字符/二进制 数据按字节(ASKII | 8位)进行拆分，其中若拆分后二进制不足8位则在前面补0，拆分之后检查，如果总字节数不能被3整除(最少3个字节才能转换成4个Base64字节)，则在最后补0使总字节数可被3整除，再以6位为一组按照Base64映射表进行编码(2^6=64)，编码后，按照之前末尾补零的数量，在编码末尾添加对应的’=’表示补0的数量。</p>\n<p><strong>Base64映射表</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数值</th>\n<th align=\"left\">字符</th>\n<th></th>\n<th align=\"left\">数值</th>\n<th align=\"left\">字符</th>\n<th></th>\n<th align=\"left\">数值</th>\n<th>字符</th>\n<th></th>\n<th>数值</th>\n<th>字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">0</td>\n<td align=\"left\">A</td>\n<td></td>\n<td align=\"left\">16</td>\n<td align=\"left\">Q</td>\n<td></td>\n<td align=\"left\">32</td>\n<td>g</td>\n<td></td>\n<td>48</td>\n<td>w</td>\n</tr>\n<tr>\n<td align=\"left\">1</td>\n<td align=\"left\">B</td>\n<td></td>\n<td align=\"left\">17</td>\n<td align=\"left\">R</td>\n<td></td>\n<td align=\"left\">33</td>\n<td>h</td>\n<td></td>\n<td>49</td>\n<td>x</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">C</td>\n<td></td>\n<td align=\"left\">18</td>\n<td align=\"left\">S</td>\n<td></td>\n<td align=\"left\">34</td>\n<td>i</td>\n<td></td>\n<td>50</td>\n<td>y</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">D</td>\n<td></td>\n<td align=\"left\">19</td>\n<td align=\"left\">T</td>\n<td></td>\n<td align=\"left\">35</td>\n<td>j</td>\n<td></td>\n<td>51</td>\n<td>z</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">E</td>\n<td></td>\n<td align=\"left\">20</td>\n<td align=\"left\">U</td>\n<td></td>\n<td align=\"left\">36</td>\n<td>k</td>\n<td></td>\n<td>52</td>\n<td>0</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">F</td>\n<td></td>\n<td align=\"left\">21</td>\n<td align=\"left\">V</td>\n<td></td>\n<td align=\"left\">37</td>\n<td>l</td>\n<td></td>\n<td>53</td>\n<td>1</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">G</td>\n<td></td>\n<td align=\"left\">22</td>\n<td align=\"left\">W</td>\n<td></td>\n<td align=\"left\">38</td>\n<td>m</td>\n<td></td>\n<td>54</td>\n<td>2</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\">H</td>\n<td></td>\n<td align=\"left\">23</td>\n<td align=\"left\">X</td>\n<td></td>\n<td align=\"left\">39</td>\n<td>n</td>\n<td></td>\n<td>55</td>\n<td>3</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\">I</td>\n<td></td>\n<td align=\"left\">24</td>\n<td align=\"left\">Y</td>\n<td></td>\n<td align=\"left\">40</td>\n<td>o</td>\n<td></td>\n<td>56</td>\n<td>4</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\">J</td>\n<td></td>\n<td align=\"left\">25</td>\n<td align=\"left\">Z</td>\n<td></td>\n<td align=\"left\">41</td>\n<td>p</td>\n<td></td>\n<td>57</td>\n<td>5</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\">K</td>\n<td></td>\n<td align=\"left\">26</td>\n<td align=\"left\">a</td>\n<td></td>\n<td align=\"left\">42</td>\n<td>q</td>\n<td></td>\n<td>58</td>\n<td>6</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\">L</td>\n<td></td>\n<td align=\"left\">27</td>\n<td align=\"left\">b</td>\n<td></td>\n<td align=\"left\">43</td>\n<td>r</td>\n<td></td>\n<td>59</td>\n<td>7</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\">M</td>\n<td></td>\n<td align=\"left\">28</td>\n<td align=\"left\">c</td>\n<td></td>\n<td align=\"left\">44</td>\n<td>s</td>\n<td></td>\n<td>60</td>\n<td>8</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\">N</td>\n<td></td>\n<td align=\"left\">29</td>\n<td align=\"left\">d</td>\n<td></td>\n<td align=\"left\">45</td>\n<td>t</td>\n<td></td>\n<td>61</td>\n<td>9</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\">O</td>\n<td></td>\n<td align=\"left\">30</td>\n<td align=\"left\">e</td>\n<td></td>\n<td align=\"left\">46</td>\n<td>u</td>\n<td></td>\n<td>62</td>\n<td>+</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\">P</td>\n<td></td>\n<td align=\"left\">31</td>\n<td align=\"left\">f</td>\n<td></td>\n<td align=\"left\">47</td>\n<td>v</td>\n<td></td>\n<td>63</td>\n<td>/</td>\n</tr>\n</tbody></table>\n<p><strong>举例说明</strong><br>这里以文本数据进行解释说明，容易理解。</p>\n<table style=\"text-align: center\">\n  <tr>\n    <td>文本</td>\n    <td colspan=\"6\">Mx</td>\n  </tr>\n  <tr>\n    <td>字符</td>\n    <td colspan=\"3\">M</td>\n    <td colspan=\"3\">x</td>\n    <td>按照字符拆分</td>\n  </tr>\n  <tr>\n    <td>Askii码</td>\n    <td colspan=\"3\">1001101</td>\n    <td colspan=\"3\">1111000</td>\n    <td>字符对应的askii码</td>\n  </tr>\n  <tr>\n    <td>补零</td>\n    <td colspan=\"3\"><b>0</b>1001101</td>\n    <td colspan=\"3\"><b>0</b>1111000</td>\n    <td>在前面补零至8位</td>\n  </tr>\n  <tr>\n    <td>分组</td>\n    <td colspan=\"2\">010011</td>\n    <td colspan=\"2\">010111</td>\n    <td colspan=\"2\">1000<b>00</b></td>\n    <td>按6位一组重新分组</td>\n  </tr>\n  <tr>\n    <td>编号</td>\n    <td colspan=\"2\">19</td>\n    <td colspan=\"2\">23</td>\n    <td colspan=\"2\">32</td>\n    <td>转换10进制</td>\n  </tr>\n  <tr>\n    <td>转码</td>\n    <td colspan=\"2\">T</td>\n    <td colspan=\"2\">X</td>\n    <td colspan=\"2\">g</td>\n    <td>根据编号和表格进行编码</td>\n  </tr>\n  <tr>\n    <td>结果</td>\n    <td colspan=\"6\">TXg=</td>\n    <td>由于总字节数为2，不能被3整除，所以补1个等号</td>\n  </tr>\n</table>\n\n\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ol>\n<li>一些文本传输协议不支持”不可见字符”的传输，如SMTP等，需要将其转码成可见文本进行传输。</li>\n<li>将小图片或小文件转换成base64后，就可以将二进制数据当作字符串在不同异构系统中进行传输、保存。</li>\n<li>肉眼上的不可见，base64本身算法不复杂，编码和解码本身性能开销很小，但是对于人脑还是较麻烦的。</li>\n</ol>\n"},{"title":"编程的乐趣","date":"2020-06-23T08:51:59.000Z","updated":"2021-01-08T09:08:35.299Z","url":"https://maoxian.fun/archives/编程的乐趣","_content":"\n>编程为什么有趣？作为回报，它的从业者期望得到什么样的快乐？\n>\n>首先是一种创建事物的纯粹快乐。如同小孩在玩泥巴时感到愉快一样，成年人喜欢创建事物，特别是自己进行设计。我想这种快乐是上帝创造世界的折射，一种呈现在每片独特、崭新的树叶和雪花上的喜悦。\n>\n>其次，快乐来自于开发对其他人有用的东西。内心深处，我们期望其他人使用我们的劳动成果，并能对他们有所帮助。从这个方面，这同小孩用粘土为 “爸爸办公室” 捏制铅笔盒没有本质的区别。第三是整个过程体现出魔术般的力量 —— 将相互啮合的零部件组装在一起，看到它们精妙地运行，得到预先所希望的结果。比起弹珠游戏或点唱机所具有的迷人魅力，程序化的计算机毫不逊色。\n>\n>第四是学习的乐趣，来自于这项工作的非重复特性。人们所面临的问题，在某个或其它方面总有些不同。因而解决问题的人可以从中学习新的事物：有时是实践上的，有时是理论上的，或者兼而有之。\n>\n>最后，乐趣还来自于工作在如此易于驾驭的介质上。程序员，就像诗人一样，几乎仅仅工作在单纯的思考中。程序员凭空地运用自己的想象，来建造自己的 “城堡”。很少有这样的介质 —— 创造的方式如此得灵活，如此得易于精炼和重建，如此得容易实现概念上的设想。（不过我们将会看到，容易驾驭的特性也有它自己的问题）\n>\n>然而程序毕竟同诗歌不同，它是实实在在的东西；可以移动和运行，能独立产生可见的输出；能打印结果，绘制图形，发出声音，移动支架。神话和传说中的魔术在我们的时代已变成了现实。在键盘上键入正确的咒语，屏幕会活动、变幻，显示出前所未有的或是已经存在的事物。\n>\n>编程非常有趣，在于它不仅满足了我们内心深处进行创造的渴望，而且还愉悦了每个人内在的情感。\n>\n>\n>\n>-- 摘自《人月神话》","source":"_posts/early/编程的乐趣-编程的乐趣.md","raw":"---\ntitle: 编程的乐趣\ndate: 2020-06-23 16:51:59.0\nupdated: 2021-01-08 17:08:35.299\nurl: https://maoxian.fun/archives/编程的乐趣\ncategories: \n- 程序\n- 闲聊\ntags: \n- 程序\n- 代码\n---\n\n>编程为什么有趣？作为回报，它的从业者期望得到什么样的快乐？\n>\n>首先是一种创建事物的纯粹快乐。如同小孩在玩泥巴时感到愉快一样，成年人喜欢创建事物，特别是自己进行设计。我想这种快乐是上帝创造世界的折射，一种呈现在每片独特、崭新的树叶和雪花上的喜悦。\n>\n>其次，快乐来自于开发对其他人有用的东西。内心深处，我们期望其他人使用我们的劳动成果，并能对他们有所帮助。从这个方面，这同小孩用粘土为 “爸爸办公室” 捏制铅笔盒没有本质的区别。第三是整个过程体现出魔术般的力量 —— 将相互啮合的零部件组装在一起，看到它们精妙地运行，得到预先所希望的结果。比起弹珠游戏或点唱机所具有的迷人魅力，程序化的计算机毫不逊色。\n>\n>第四是学习的乐趣，来自于这项工作的非重复特性。人们所面临的问题，在某个或其它方面总有些不同。因而解决问题的人可以从中学习新的事物：有时是实践上的，有时是理论上的，或者兼而有之。\n>\n>最后，乐趣还来自于工作在如此易于驾驭的介质上。程序员，就像诗人一样，几乎仅仅工作在单纯的思考中。程序员凭空地运用自己的想象，来建造自己的 “城堡”。很少有这样的介质 —— 创造的方式如此得灵活，如此得易于精炼和重建，如此得容易实现概念上的设想。（不过我们将会看到，容易驾驭的特性也有它自己的问题）\n>\n>然而程序毕竟同诗歌不同，它是实实在在的东西；可以移动和运行，能独立产生可见的输出；能打印结果，绘制图形，发出声音，移动支架。神话和传说中的魔术在我们的时代已变成了现实。在键盘上键入正确的咒语，屏幕会活动、变幻，显示出前所未有的或是已经存在的事物。\n>\n>编程非常有趣，在于它不仅满足了我们内心深处进行创造的渴望，而且还愉悦了每个人内在的情感。\n>\n>\n>\n>-- 摘自《人月神话》","slug":"early/编程的乐趣-编程的乐趣","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec91d2v001bv0l437jxf8av","content":"<blockquote>\n<p>编程为什么有趣？作为回报，它的从业者期望得到什么样的快乐？</p>\n<p>首先是一种创建事物的纯粹快乐。如同小孩在玩泥巴时感到愉快一样，成年人喜欢创建事物，特别是自己进行设计。我想这种快乐是上帝创造世界的折射，一种呈现在每片独特、崭新的树叶和雪花上的喜悦。</p>\n<p>其次，快乐来自于开发对其他人有用的东西。内心深处，我们期望其他人使用我们的劳动成果，并能对他们有所帮助。从这个方面，这同小孩用粘土为 “爸爸办公室” 捏制铅笔盒没有本质的区别。第三是整个过程体现出魔术般的力量 —— 将相互啮合的零部件组装在一起，看到它们精妙地运行，得到预先所希望的结果。比起弹珠游戏或点唱机所具有的迷人魅力，程序化的计算机毫不逊色。</p>\n<p>第四是学习的乐趣，来自于这项工作的非重复特性。人们所面临的问题，在某个或其它方面总有些不同。因而解决问题的人可以从中学习新的事物：有时是实践上的，有时是理论上的，或者兼而有之。</p>\n<p>最后，乐趣还来自于工作在如此易于驾驭的介质上。程序员，就像诗人一样，几乎仅仅工作在单纯的思考中。程序员凭空地运用自己的想象，来建造自己的 “城堡”。很少有这样的介质 —— 创造的方式如此得灵活，如此得易于精炼和重建，如此得容易实现概念上的设想。（不过我们将会看到，容易驾驭的特性也有它自己的问题）</p>\n<p>然而程序毕竟同诗歌不同，它是实实在在的东西；可以移动和运行，能独立产生可见的输出；能打印结果，绘制图形，发出声音，移动支架。神话和传说中的魔术在我们的时代已变成了现实。在键盘上键入正确的咒语，屏幕会活动、变幻，显示出前所未有的或是已经存在的事物。</p>\n<p>编程非常有趣，在于它不仅满足了我们内心深处进行创造的渴望，而且还愉悦了每个人内在的情感。</p>\n<p>– 摘自《人月神话》</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>编程为什么有趣？作为回报，它的从业者期望得到什么样的快乐？</p>\n<p>首先是一种创建事物的纯粹快乐。如同小孩在玩泥巴时感到愉快一样，成年人喜欢创建事物，特别是自己进行设计。我想这种快乐是上帝创造世界的折射，一种呈现在每片独特、崭新的树叶和雪花上的喜悦。</p>\n<p>其次，快乐来自于开发对其他人有用的东西。内心深处，我们期望其他人使用我们的劳动成果，并能对他们有所帮助。从这个方面，这同小孩用粘土为 “爸爸办公室” 捏制铅笔盒没有本质的区别。第三是整个过程体现出魔术般的力量 —— 将相互啮合的零部件组装在一起，看到它们精妙地运行，得到预先所希望的结果。比起弹珠游戏或点唱机所具有的迷人魅力，程序化的计算机毫不逊色。</p>\n<p>第四是学习的乐趣，来自于这项工作的非重复特性。人们所面临的问题，在某个或其它方面总有些不同。因而解决问题的人可以从中学习新的事物：有时是实践上的，有时是理论上的，或者兼而有之。</p>\n<p>最后，乐趣还来自于工作在如此易于驾驭的介质上。程序员，就像诗人一样，几乎仅仅工作在单纯的思考中。程序员凭空地运用自己的想象，来建造自己的 “城堡”。很少有这样的介质 —— 创造的方式如此得灵活，如此得易于精炼和重建，如此得容易实现概念上的设想。（不过我们将会看到，容易驾驭的特性也有它自己的问题）</p>\n<p>然而程序毕竟同诗歌不同，它是实实在在的东西；可以移动和运行，能独立产生可见的输出；能打印结果，绘制图形，发出声音，移动支架。神话和传说中的魔术在我们的时代已变成了现实。在键盘上键入正确的咒语，屏幕会活动、变幻，显示出前所未有的或是已经存在的事物。</p>\n<p>编程非常有趣，在于它不仅满足了我们内心深处进行创造的渴望，而且还愉悦了每个人内在的情感。</p>\n<p>– 摘自《人月神话》</p>\n</blockquote>\n"},{"title":"计算机中的会话(Session)","date":"2022-05-05T03:22:03.783Z","updated":"2022-05-05T03:22:03.783Z","url":"https://maoxian.fun/archives/ji-suan-ji-zhong-de-hui-hua-session","_content":"\n# 前言\n首先明确，这里主要论述的Session并不是指具体的各个语言的实现，而是单指Session（会话）的技术。\n\n# 定义\n标准HTTP协议请求本身是无状态的，也就是说，用户A和B同时向服务器发送了一个请求，服务器是无法判断这两个请求分别是来自于A还是B还是C。\n\n为了实现有状态的HTTP请求，即在业务上服务端需要知道每一个请求分别来自于谁，就需要在HTTP的基础上，在应用业务上实现这么一个功能来维持用户的状态，从而将登录、和后续用户操作等等多个独立的HTTP请求联系起来，这就是Session。\n\n换个说法，将客户端和服务端之间的多个独立HTTP请求起来关联，并识别请求的用户身份，能够实现这样一种功能的，就是Session（会话）\n\n# 实现\n\n那么，Session的实现方案有哪些？Token、JWT、PHP Session和Tomcat Session等等都是什么鬼？\n\n一个个来说这些东西，但是先说一下Cookie。\n\n## Cookie\ncookie是*由浏览器*实现的一个最基本的功能，诞生之初就是为了分辨用户身份而存储在客户端内存或硬盘上的数据块，大小通常为4kb。\n\n**优点：**\n\t1. Cookie历史较久，功能基本比较完善，具有生存周期Expires、有效访问路径Path、域名等等属性完善其安全性和有效性。\n\t2. 可以由服务端在请求的Response中带上Set-Cookie属性对客户端的Cookie进行设置而不需要前端额外实现。\n\t3. 浏览器在请求时会自动带上该网站对应的Cookie发送给服务端。\n\n**缺点：**\n\t1. 通常大小为4kb，在现代化网站中，可能不够用。\n\t2. 浏览器会在每个HTTP请求中，都自动带上Cookie进行请求，若Cookie较多，占用服务器带宽。\n\t3. 容易被污染，从而导致隐私泄漏，商家可依此完善用户画像，实现广告跟踪。\n\t4. Cookie可被用户禁用，影响业务。\n\t5. 非浏览器应用，如App，没有Cookie。\n\n## PHP、Tomcat 默认的Session\n大多数Web容器、应用框架都提供了Session的一种默认实现方式，基本原理就是在客户端的Cookie中放一个SessionID，然后在服务器的内存中以SessionID作为key，存储对应用户的状态数据。PHP中是PHPSESSID，Tomcat是JSESSIONID。\n\n## Token、JWT\nToken（令牌）是将用户的状态数据直接存储到客户端，而不是存储在服务端中。用户在登录成功之后，服务端将用户信息和其他数据通过某种规则和编码转换成一个Token字符串，并返回给客户端，客户端在请求服务端时，带上这个Token，服务端只需要验证这个Token是否正确、有效，就可以从里面得到用户信息，而不需要在服务器上花费空间进行存储。\n\n类似的比喻，比如试卷、合同上的签名和印章，在验证文件内容真伪时，只需要验证签名或印章的痕迹是否真实有效，即可认为文件内容是否有效。\n\n[JWT(JSON Web Tokens)](https://jwt.io/)，就是Token的一种标准(RFC 7519)，定义了一种基于Json的Token方案，包含了用户数据、校验字段以及签名策略，使jwt本身可以包含用户数据，并且不会被篡改。\n\n## 演化\n这里以一个简单的web应用进行演化。\n\n在Http协议诞生之初，只是为了从服务端获取简单的静态Html数据，静态页面嘛，直接Get完请求就可以了，也不需要处理上下文之间的交互。但是渐渐的，网站有了用户账号的设计，BBS、电商、即时聊天、游戏对战等等一系列需要客户端和服务端有状态的会话需求，服务端需要知道每一个无状态的HTTP请求对应的用户是谁，所以就需要在HTTP请求中带上身份识别，这时候就可以利用**Cookie**。\n\n用户在登录成功时，服务端通过Set-Cookie在客户端的Cookie中保存用户身份，比如用户的ID，那么用户在登录成功后，选好商品添加购物车的时候，欸就可以把Cookie中的用户id带上，那么服务端就可以知道，这个购物车的操作是由这个id的用户做的。\n\n乍一看，好像这个方法不错，可以实现用户的状态维持。但是Cookie在客户端上是明文保存的，可以随意修改，如果某个人把cookie里的id进行修改，把id修改成别人的，那不是就可以伪造用户请求了？而且随着业务的发展，用户需要保存的信息也越来越多，比如用户权限、用户身份、上下文一些关联的业务数据等，如果这些数据也都明文保存在客户端，这明显很不安全。\n\n那么就到了**session**（狭义上的），把用户数据存储在服务器的内存里，用户和服务端建立联系的时候，服务端创建一个SessionID，把SessionId放到Cookie里，每次请求带上SessionID，服务端就可以根据这个来查到存储在内存里的用户信息。同时客户端只需要存储SessionID，并且这个id本身只是一个Key，那么就可以使用一些算法，使id变的较长且无规律，不容易被随意修改伪造。到这里，这也是现在大多数web框架内置session的实现方案，简单好用。\n\n经过了多年的发展，这个web应用的用户数量也逐渐多了起来，一台服务器显然不能够很好的满足逐渐膨胀的用户和业务发展，那么就需要添加服务器做负载均衡共同提供服务。\n\n问题来了，之前的用户数据是存放在服务器的内存里的，也就是用户上一次是在A服务器里处理的登录请求，那下一次用户的请求发到了B里，不是就变的没有登录了吗？\n\n处理的方案也有几种：服务器间session复制，服务器间互相同步、互相备份；在负载均衡的时候做粘连，把来自同一个用户的请求粘连在同一个服务器上；session集中存储，利用Redis等高性能第三方存储把session放到业务服务器外等等方案，这些方案都互相有优缺点，这里暂不详细展开。\n\n再回到开始的直接存储用户id的方案上，这个方案最大的问题就是单纯的用户id容易被篡改，那么是不是只要不让他被随意篡改就可以了？一个不会被随意篡改、又不用在服务器上面存储方案是不是就很完美？\n\n这是**Token**的方案，在登录成功后，服务端给用户一个身份凭证，上面有用户的信息，同时，服务端对这个凭证签名，让他不能被随便修改，比如对用户信息和时效信息加上服务端的私钥签名，在没有拿到服务端的私钥下，谁都不能伪造出这份签名，同时又可以通过服务端的公钥进行验证。\n\nToken的方案可以自行设计，不过业界已经有一个广泛应用的标准JWT，大部分场景直接根据这个标准进行开发就可以了。\n\nToken实现了HTTP请求的有状态和服务端的无状态，服务端上的不同服务器不需要花费空间来存储每一个用户的用户数据，转而只需要对token进行验证就可以了，经典的时间换空间，而且可以提高服务器的伸缩性，可以随意的添加业务服务器，而不需要额外处理session的各种问题。\n\n但是把Token当作凭证发放给客户端后，又怎么对客户端的用户进行管理？比如用户修改了密码，之前颁发的凭证需要失效，但是Token是在客户端上的，服务端无法主动失效Token，这是一个问题。那有人肯定会说，可以把Token在服务端上存一份呀，如果失效了给他打个标记，或者直接删除，不是就可以管理了吗？是的，这样确实可以在服务端上对Token进行管理，但是这样，服务端也从无状态变回了有状态，又需要处理Token在服务端上的存储、共享等等问题，和session有什么本质上的区别吗？\n\n上面的不论sessionID还是token都是存放在cookie里的，但是要注意，这个cookie只是浏览器都支持自动处理的一个headers而已，所以在具体实现上，不论是sessionID还是token都可以放到其他的header头里，区别就是需要客户端代码自行处理而已，包括App等非浏览器应用。\n\n综上所述，各种方案实现都有相对应的好处和问题，没有哪种方案是完美的，在一个应用中，需要根据业务本身的用户规模、服务器情况、安全程度、业务逻辑和用户体验，选择适合的方案，或是互相结合在不同的场景使用不同的方案。\n\n## 安全\n互联网应用最重要的问题就是安全，各种Session技术、加密算法都是为了增加攻击成本、提高安全性。\n\n上面的方案中，很明显有一个致命的问题，每个方案基本都依赖于服务端给客户端发送的一组识别用户身份的字符串，那假如有人在中间抓包，拿到这个字符串，是不是就不安全了。是的，这是中间人攻击的一种方式。\n\n如何避免，这个问题如果基于HTTP是没有很好的方案的，较好的方案就是使用HTTPS，基于可信根证书和端到端的加密来实现整个链路上的传输安全。\n\n通过其他字段综合对用户身份进行验证，比如设备MAC、IP地址等信息综合判断。\n\n在核心重要功能如支付，使用二次验证（密码、短信等）。\n\n减少token的有效时间，并在每次请求中对token进行刷新。\n\n安全的前提是客户端安全，如果客户端本身状态危险，那么任何的安全措施都是无效的。\n\n用户需要做的：\n1. 保持操作系统安全，不被挂马、不被其他人操作，这是设备的安全。\n2. 使用可靠的浏览器、确认浏览器的各种设置。\n3. 避免安装不可信的CA根证书（数字证书），证书是保证HTTPS安全的前提，通常受信的证书是内置在操作系统中的，以及用户自行安装的，比如常见的网银证书。如果安装不可信的假CA证书，那么攻击者就可以伪造CA证书，自己对自己的请求进行签发，欺骗客户端，由于客户端安装了假CA证书，并不会对中间人的伪造证书报警。\n4. 确认网站地址正确，确认证书的有效性和签发机构。\n5. 代理，使用代理上网，那么代理本身就是一个中间人......\n6. 注意防范社工，社会工程学攻击。\n\n服务端需要做的：\n1. 使用HTTPS\n2. 业务上对XSS、CROS等等攻击手段进行防范\n3. 使用验证码防止暴力\n4. 保证服务器本身及内网安全\n5. 敏感操作要求二次验证\n6. 对用户设备、ip进行绑定和验证\n7. 不使用任何自己想的奇奇怪怪的加密方式和算法。古典密码学的编码和破译通常依赖于算法本身的设计和对手的想象力和创造力，一但算法公开就不具备安全性，而现代密码学的安全性依赖于密钥而不是算法本身的保密性。而目前常用的密码学算法都是开源且经过了各种专家的验证和分析，适用场景、破解成本、优缺点已经很明确且公开，在不出现重大技术突破的情况下，可以基本保证安全。\n\n# 题外话\n上面所说的都只是互联网应用中认证与授权中的认证，即“我是谁”的问题。而授权则是控制用户对于系统的访问权限。\n\n在系统庞大、功能复杂的情况下，可能会有多个完全不同的域名，或者是其他第三方登录的实现。那么就有了SSO和OAuth\n\nSSO是单点登录，主要是处理一个公司的不同系统下的访问登录问题（如淘宝和天猫，他们的域是不同的，但是可以相互跳转不需要重新认证）\n\nOAuth主要是不同公司间的授权方案，授权用户在第三方应用中访问自己在自己系统的一些隐私数据，比如一些网站的qq登录、微博登录等第三方账号登录。\n\n这部分具体的内容在此不展开描述只是作为相关点提一下，后续可能会继续更新相应文章展开。","source":"_posts/early/计算机中的会话(Session)-ji-suan-ji-zhong-de-hui-hua-session.md","raw":"---\ntitle: 计算机中的会话(Session)\ndate: 2022-05-05 11:22:03.783\nupdated: 2022-05-05 11:22:03.783\nurl: https://maoxian.fun/archives/ji-suan-ji-zhong-de-hui-hua-session\ncategories: \n- 信息安全\ntags: \n- Web\n- Session\n- Cookie\n- 信息安全\n- 认证\n---\n\n# 前言\n首先明确，这里主要论述的Session并不是指具体的各个语言的实现，而是单指Session（会话）的技术。\n\n# 定义\n标准HTTP协议请求本身是无状态的，也就是说，用户A和B同时向服务器发送了一个请求，服务器是无法判断这两个请求分别是来自于A还是B还是C。\n\n为了实现有状态的HTTP请求，即在业务上服务端需要知道每一个请求分别来自于谁，就需要在HTTP的基础上，在应用业务上实现这么一个功能来维持用户的状态，从而将登录、和后续用户操作等等多个独立的HTTP请求联系起来，这就是Session。\n\n换个说法，将客户端和服务端之间的多个独立HTTP请求起来关联，并识别请求的用户身份，能够实现这样一种功能的，就是Session（会话）\n\n# 实现\n\n那么，Session的实现方案有哪些？Token、JWT、PHP Session和Tomcat Session等等都是什么鬼？\n\n一个个来说这些东西，但是先说一下Cookie。\n\n## Cookie\ncookie是*由浏览器*实现的一个最基本的功能，诞生之初就是为了分辨用户身份而存储在客户端内存或硬盘上的数据块，大小通常为4kb。\n\n**优点：**\n\t1. Cookie历史较久，功能基本比较完善，具有生存周期Expires、有效访问路径Path、域名等等属性完善其安全性和有效性。\n\t2. 可以由服务端在请求的Response中带上Set-Cookie属性对客户端的Cookie进行设置而不需要前端额外实现。\n\t3. 浏览器在请求时会自动带上该网站对应的Cookie发送给服务端。\n\n**缺点：**\n\t1. 通常大小为4kb，在现代化网站中，可能不够用。\n\t2. 浏览器会在每个HTTP请求中，都自动带上Cookie进行请求，若Cookie较多，占用服务器带宽。\n\t3. 容易被污染，从而导致隐私泄漏，商家可依此完善用户画像，实现广告跟踪。\n\t4. Cookie可被用户禁用，影响业务。\n\t5. 非浏览器应用，如App，没有Cookie。\n\n## PHP、Tomcat 默认的Session\n大多数Web容器、应用框架都提供了Session的一种默认实现方式，基本原理就是在客户端的Cookie中放一个SessionID，然后在服务器的内存中以SessionID作为key，存储对应用户的状态数据。PHP中是PHPSESSID，Tomcat是JSESSIONID。\n\n## Token、JWT\nToken（令牌）是将用户的状态数据直接存储到客户端，而不是存储在服务端中。用户在登录成功之后，服务端将用户信息和其他数据通过某种规则和编码转换成一个Token字符串，并返回给客户端，客户端在请求服务端时，带上这个Token，服务端只需要验证这个Token是否正确、有效，就可以从里面得到用户信息，而不需要在服务器上花费空间进行存储。\n\n类似的比喻，比如试卷、合同上的签名和印章，在验证文件内容真伪时，只需要验证签名或印章的痕迹是否真实有效，即可认为文件内容是否有效。\n\n[JWT(JSON Web Tokens)](https://jwt.io/)，就是Token的一种标准(RFC 7519)，定义了一种基于Json的Token方案，包含了用户数据、校验字段以及签名策略，使jwt本身可以包含用户数据，并且不会被篡改。\n\n## 演化\n这里以一个简单的web应用进行演化。\n\n在Http协议诞生之初，只是为了从服务端获取简单的静态Html数据，静态页面嘛，直接Get完请求就可以了，也不需要处理上下文之间的交互。但是渐渐的，网站有了用户账号的设计，BBS、电商、即时聊天、游戏对战等等一系列需要客户端和服务端有状态的会话需求，服务端需要知道每一个无状态的HTTP请求对应的用户是谁，所以就需要在HTTP请求中带上身份识别，这时候就可以利用**Cookie**。\n\n用户在登录成功时，服务端通过Set-Cookie在客户端的Cookie中保存用户身份，比如用户的ID，那么用户在登录成功后，选好商品添加购物车的时候，欸就可以把Cookie中的用户id带上，那么服务端就可以知道，这个购物车的操作是由这个id的用户做的。\n\n乍一看，好像这个方法不错，可以实现用户的状态维持。但是Cookie在客户端上是明文保存的，可以随意修改，如果某个人把cookie里的id进行修改，把id修改成别人的，那不是就可以伪造用户请求了？而且随着业务的发展，用户需要保存的信息也越来越多，比如用户权限、用户身份、上下文一些关联的业务数据等，如果这些数据也都明文保存在客户端，这明显很不安全。\n\n那么就到了**session**（狭义上的），把用户数据存储在服务器的内存里，用户和服务端建立联系的时候，服务端创建一个SessionID，把SessionId放到Cookie里，每次请求带上SessionID，服务端就可以根据这个来查到存储在内存里的用户信息。同时客户端只需要存储SessionID，并且这个id本身只是一个Key，那么就可以使用一些算法，使id变的较长且无规律，不容易被随意修改伪造。到这里，这也是现在大多数web框架内置session的实现方案，简单好用。\n\n经过了多年的发展，这个web应用的用户数量也逐渐多了起来，一台服务器显然不能够很好的满足逐渐膨胀的用户和业务发展，那么就需要添加服务器做负载均衡共同提供服务。\n\n问题来了，之前的用户数据是存放在服务器的内存里的，也就是用户上一次是在A服务器里处理的登录请求，那下一次用户的请求发到了B里，不是就变的没有登录了吗？\n\n处理的方案也有几种：服务器间session复制，服务器间互相同步、互相备份；在负载均衡的时候做粘连，把来自同一个用户的请求粘连在同一个服务器上；session集中存储，利用Redis等高性能第三方存储把session放到业务服务器外等等方案，这些方案都互相有优缺点，这里暂不详细展开。\n\n再回到开始的直接存储用户id的方案上，这个方案最大的问题就是单纯的用户id容易被篡改，那么是不是只要不让他被随意篡改就可以了？一个不会被随意篡改、又不用在服务器上面存储方案是不是就很完美？\n\n这是**Token**的方案，在登录成功后，服务端给用户一个身份凭证，上面有用户的信息，同时，服务端对这个凭证签名，让他不能被随便修改，比如对用户信息和时效信息加上服务端的私钥签名，在没有拿到服务端的私钥下，谁都不能伪造出这份签名，同时又可以通过服务端的公钥进行验证。\n\nToken的方案可以自行设计，不过业界已经有一个广泛应用的标准JWT，大部分场景直接根据这个标准进行开发就可以了。\n\nToken实现了HTTP请求的有状态和服务端的无状态，服务端上的不同服务器不需要花费空间来存储每一个用户的用户数据，转而只需要对token进行验证就可以了，经典的时间换空间，而且可以提高服务器的伸缩性，可以随意的添加业务服务器，而不需要额外处理session的各种问题。\n\n但是把Token当作凭证发放给客户端后，又怎么对客户端的用户进行管理？比如用户修改了密码，之前颁发的凭证需要失效，但是Token是在客户端上的，服务端无法主动失效Token，这是一个问题。那有人肯定会说，可以把Token在服务端上存一份呀，如果失效了给他打个标记，或者直接删除，不是就可以管理了吗？是的，这样确实可以在服务端上对Token进行管理，但是这样，服务端也从无状态变回了有状态，又需要处理Token在服务端上的存储、共享等等问题，和session有什么本质上的区别吗？\n\n上面的不论sessionID还是token都是存放在cookie里的，但是要注意，这个cookie只是浏览器都支持自动处理的一个headers而已，所以在具体实现上，不论是sessionID还是token都可以放到其他的header头里，区别就是需要客户端代码自行处理而已，包括App等非浏览器应用。\n\n综上所述，各种方案实现都有相对应的好处和问题，没有哪种方案是完美的，在一个应用中，需要根据业务本身的用户规模、服务器情况、安全程度、业务逻辑和用户体验，选择适合的方案，或是互相结合在不同的场景使用不同的方案。\n\n## 安全\n互联网应用最重要的问题就是安全，各种Session技术、加密算法都是为了增加攻击成本、提高安全性。\n\n上面的方案中，很明显有一个致命的问题，每个方案基本都依赖于服务端给客户端发送的一组识别用户身份的字符串，那假如有人在中间抓包，拿到这个字符串，是不是就不安全了。是的，这是中间人攻击的一种方式。\n\n如何避免，这个问题如果基于HTTP是没有很好的方案的，较好的方案就是使用HTTPS，基于可信根证书和端到端的加密来实现整个链路上的传输安全。\n\n通过其他字段综合对用户身份进行验证，比如设备MAC、IP地址等信息综合判断。\n\n在核心重要功能如支付，使用二次验证（密码、短信等）。\n\n减少token的有效时间，并在每次请求中对token进行刷新。\n\n安全的前提是客户端安全，如果客户端本身状态危险，那么任何的安全措施都是无效的。\n\n用户需要做的：\n1. 保持操作系统安全，不被挂马、不被其他人操作，这是设备的安全。\n2. 使用可靠的浏览器、确认浏览器的各种设置。\n3. 避免安装不可信的CA根证书（数字证书），证书是保证HTTPS安全的前提，通常受信的证书是内置在操作系统中的，以及用户自行安装的，比如常见的网银证书。如果安装不可信的假CA证书，那么攻击者就可以伪造CA证书，自己对自己的请求进行签发，欺骗客户端，由于客户端安装了假CA证书，并不会对中间人的伪造证书报警。\n4. 确认网站地址正确，确认证书的有效性和签发机构。\n5. 代理，使用代理上网，那么代理本身就是一个中间人......\n6. 注意防范社工，社会工程学攻击。\n\n服务端需要做的：\n1. 使用HTTPS\n2. 业务上对XSS、CROS等等攻击手段进行防范\n3. 使用验证码防止暴力\n4. 保证服务器本身及内网安全\n5. 敏感操作要求二次验证\n6. 对用户设备、ip进行绑定和验证\n7. 不使用任何自己想的奇奇怪怪的加密方式和算法。古典密码学的编码和破译通常依赖于算法本身的设计和对手的想象力和创造力，一但算法公开就不具备安全性，而现代密码学的安全性依赖于密钥而不是算法本身的保密性。而目前常用的密码学算法都是开源且经过了各种专家的验证和分析，适用场景、破解成本、优缺点已经很明确且公开，在不出现重大技术突破的情况下，可以基本保证安全。\n\n# 题外话\n上面所说的都只是互联网应用中认证与授权中的认证，即“我是谁”的问题。而授权则是控制用户对于系统的访问权限。\n\n在系统庞大、功能复杂的情况下，可能会有多个完全不同的域名，或者是其他第三方登录的实现。那么就有了SSO和OAuth\n\nSSO是单点登录，主要是处理一个公司的不同系统下的访问登录问题（如淘宝和天猫，他们的域是不同的，但是可以相互跳转不需要重新认证）\n\nOAuth主要是不同公司间的授权方案，授权用户在第三方应用中访问自己在自己系统的一些隐私数据，比如一些网站的qq登录、微博登录等第三方账号登录。\n\n这部分具体的内容在此不展开描述只是作为相关点提一下，后续可能会继续更新相应文章展开。","slug":"early/计算机中的会话(Session)-ji-suan-ji-zhong-de-hui-hua-session","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec91d2x001ev0l446ez83qx","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>首先明确，这里主要论述的Session并不是指具体的各个语言的实现，而是单指Session（会话）的技术。</p>\n<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><p>标准HTTP协议请求本身是无状态的，也就是说，用户A和B同时向服务器发送了一个请求，服务器是无法判断这两个请求分别是来自于A还是B还是C。</p>\n<p>为了实现有状态的HTTP请求，即在业务上服务端需要知道每一个请求分别来自于谁，就需要在HTTP的基础上，在应用业务上实现这么一个功能来维持用户的状态，从而将登录、和后续用户操作等等多个独立的HTTP请求联系起来，这就是Session。</p>\n<p>换个说法，将客户端和服务端之间的多个独立HTTP请求起来关联，并识别请求的用户身份，能够实现这样一种功能的，就是Session（会话）</p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>那么，Session的实现方案有哪些？Token、JWT、PHP Session和Tomcat Session等等都是什么鬼？</p>\n<p>一个个来说这些东西，但是先说一下Cookie。</p>\n<h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><p>cookie是<em>由浏览器</em>实现的一个最基本的功能，诞生之初就是为了分辨用户身份而存储在客户端内存或硬盘上的数据块，大小通常为4kb。</p>\n<p><strong>优点：</strong><br>    1. Cookie历史较久，功能基本比较完善，具有生存周期Expires、有效访问路径Path、域名等等属性完善其安全性和有效性。<br>    2. 可以由服务端在请求的Response中带上Set-Cookie属性对客户端的Cookie进行设置而不需要前端额外实现。<br>    3. 浏览器在请求时会自动带上该网站对应的Cookie发送给服务端。</p>\n<p><strong>缺点：</strong><br>    1. 通常大小为4kb，在现代化网站中，可能不够用。<br>    2. 浏览器会在每个HTTP请求中，都自动带上Cookie进行请求，若Cookie较多，占用服务器带宽。<br>    3. 容易被污染，从而导致隐私泄漏，商家可依此完善用户画像，实现广告跟踪。<br>    4. Cookie可被用户禁用，影响业务。<br>    5. 非浏览器应用，如App，没有Cookie。</p>\n<h2 id=\"PHP、Tomcat-默认的Session\"><a href=\"#PHP、Tomcat-默认的Session\" class=\"headerlink\" title=\"PHP、Tomcat 默认的Session\"></a>PHP、Tomcat 默认的Session</h2><p>大多数Web容器、应用框架都提供了Session的一种默认实现方式，基本原理就是在客户端的Cookie中放一个SessionID，然后在服务器的内存中以SessionID作为key，存储对应用户的状态数据。PHP中是PHPSESSID，Tomcat是JSESSIONID。</p>\n<h2 id=\"Token、JWT\"><a href=\"#Token、JWT\" class=\"headerlink\" title=\"Token、JWT\"></a>Token、JWT</h2><p>Token（令牌）是将用户的状态数据直接存储到客户端，而不是存储在服务端中。用户在登录成功之后，服务端将用户信息和其他数据通过某种规则和编码转换成一个Token字符串，并返回给客户端，客户端在请求服务端时，带上这个Token，服务端只需要验证这个Token是否正确、有效，就可以从里面得到用户信息，而不需要在服务器上花费空间进行存储。</p>\n<p>类似的比喻，比如试卷、合同上的签名和印章，在验证文件内容真伪时，只需要验证签名或印章的痕迹是否真实有效，即可认为文件内容是否有效。</p>\n<p><a href=\"https://jwt.io/\">JWT(JSON Web Tokens)</a>，就是Token的一种标准(RFC 7519)，定义了一种基于Json的Token方案，包含了用户数据、校验字段以及签名策略，使jwt本身可以包含用户数据，并且不会被篡改。</p>\n<h2 id=\"演化\"><a href=\"#演化\" class=\"headerlink\" title=\"演化\"></a>演化</h2><p>这里以一个简单的web应用进行演化。</p>\n<p>在Http协议诞生之初，只是为了从服务端获取简单的静态Html数据，静态页面嘛，直接Get完请求就可以了，也不需要处理上下文之间的交互。但是渐渐的，网站有了用户账号的设计，BBS、电商、即时聊天、游戏对战等等一系列需要客户端和服务端有状态的会话需求，服务端需要知道每一个无状态的HTTP请求对应的用户是谁，所以就需要在HTTP请求中带上身份识别，这时候就可以利用<strong>Cookie</strong>。</p>\n<p>用户在登录成功时，服务端通过Set-Cookie在客户端的Cookie中保存用户身份，比如用户的ID，那么用户在登录成功后，选好商品添加购物车的时候，欸就可以把Cookie中的用户id带上，那么服务端就可以知道，这个购物车的操作是由这个id的用户做的。</p>\n<p>乍一看，好像这个方法不错，可以实现用户的状态维持。但是Cookie在客户端上是明文保存的，可以随意修改，如果某个人把cookie里的id进行修改，把id修改成别人的，那不是就可以伪造用户请求了？而且随着业务的发展，用户需要保存的信息也越来越多，比如用户权限、用户身份、上下文一些关联的业务数据等，如果这些数据也都明文保存在客户端，这明显很不安全。</p>\n<p>那么就到了<strong>session</strong>（狭义上的），把用户数据存储在服务器的内存里，用户和服务端建立联系的时候，服务端创建一个SessionID，把SessionId放到Cookie里，每次请求带上SessionID，服务端就可以根据这个来查到存储在内存里的用户信息。同时客户端只需要存储SessionID，并且这个id本身只是一个Key，那么就可以使用一些算法，使id变的较长且无规律，不容易被随意修改伪造。到这里，这也是现在大多数web框架内置session的实现方案，简单好用。</p>\n<p>经过了多年的发展，这个web应用的用户数量也逐渐多了起来，一台服务器显然不能够很好的满足逐渐膨胀的用户和业务发展，那么就需要添加服务器做负载均衡共同提供服务。</p>\n<p>问题来了，之前的用户数据是存放在服务器的内存里的，也就是用户上一次是在A服务器里处理的登录请求，那下一次用户的请求发到了B里，不是就变的没有登录了吗？</p>\n<p>处理的方案也有几种：服务器间session复制，服务器间互相同步、互相备份；在负载均衡的时候做粘连，把来自同一个用户的请求粘连在同一个服务器上；session集中存储，利用Redis等高性能第三方存储把session放到业务服务器外等等方案，这些方案都互相有优缺点，这里暂不详细展开。</p>\n<p>再回到开始的直接存储用户id的方案上，这个方案最大的问题就是单纯的用户id容易被篡改，那么是不是只要不让他被随意篡改就可以了？一个不会被随意篡改、又不用在服务器上面存储方案是不是就很完美？</p>\n<p>这是<strong>Token</strong>的方案，在登录成功后，服务端给用户一个身份凭证，上面有用户的信息，同时，服务端对这个凭证签名，让他不能被随便修改，比如对用户信息和时效信息加上服务端的私钥签名，在没有拿到服务端的私钥下，谁都不能伪造出这份签名，同时又可以通过服务端的公钥进行验证。</p>\n<p>Token的方案可以自行设计，不过业界已经有一个广泛应用的标准JWT，大部分场景直接根据这个标准进行开发就可以了。</p>\n<p>Token实现了HTTP请求的有状态和服务端的无状态，服务端上的不同服务器不需要花费空间来存储每一个用户的用户数据，转而只需要对token进行验证就可以了，经典的时间换空间，而且可以提高服务器的伸缩性，可以随意的添加业务服务器，而不需要额外处理session的各种问题。</p>\n<p>但是把Token当作凭证发放给客户端后，又怎么对客户端的用户进行管理？比如用户修改了密码，之前颁发的凭证需要失效，但是Token是在客户端上的，服务端无法主动失效Token，这是一个问题。那有人肯定会说，可以把Token在服务端上存一份呀，如果失效了给他打个标记，或者直接删除，不是就可以管理了吗？是的，这样确实可以在服务端上对Token进行管理，但是这样，服务端也从无状态变回了有状态，又需要处理Token在服务端上的存储、共享等等问题，和session有什么本质上的区别吗？</p>\n<p>上面的不论sessionID还是token都是存放在cookie里的，但是要注意，这个cookie只是浏览器都支持自动处理的一个headers而已，所以在具体实现上，不论是sessionID还是token都可以放到其他的header头里，区别就是需要客户端代码自行处理而已，包括App等非浏览器应用。</p>\n<p>综上所述，各种方案实现都有相对应的好处和问题，没有哪种方案是完美的，在一个应用中，需要根据业务本身的用户规模、服务器情况、安全程度、业务逻辑和用户体验，选择适合的方案，或是互相结合在不同的场景使用不同的方案。</p>\n<h2 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h2><p>互联网应用最重要的问题就是安全，各种Session技术、加密算法都是为了增加攻击成本、提高安全性。</p>\n<p>上面的方案中，很明显有一个致命的问题，每个方案基本都依赖于服务端给客户端发送的一组识别用户身份的字符串，那假如有人在中间抓包，拿到这个字符串，是不是就不安全了。是的，这是中间人攻击的一种方式。</p>\n<p>如何避免，这个问题如果基于HTTP是没有很好的方案的，较好的方案就是使用HTTPS，基于可信根证书和端到端的加密来实现整个链路上的传输安全。</p>\n<p>通过其他字段综合对用户身份进行验证，比如设备MAC、IP地址等信息综合判断。</p>\n<p>在核心重要功能如支付，使用二次验证（密码、短信等）。</p>\n<p>减少token的有效时间，并在每次请求中对token进行刷新。</p>\n<p>安全的前提是客户端安全，如果客户端本身状态危险，那么任何的安全措施都是无效的。</p>\n<p>用户需要做的：</p>\n<ol>\n<li>保持操作系统安全，不被挂马、不被其他人操作，这是设备的安全。</li>\n<li>使用可靠的浏览器、确认浏览器的各种设置。</li>\n<li>避免安装不可信的CA根证书（数字证书），证书是保证HTTPS安全的前提，通常受信的证书是内置在操作系统中的，以及用户自行安装的，比如常见的网银证书。如果安装不可信的假CA证书，那么攻击者就可以伪造CA证书，自己对自己的请求进行签发，欺骗客户端，由于客户端安装了假CA证书，并不会对中间人的伪造证书报警。</li>\n<li>确认网站地址正确，确认证书的有效性和签发机构。</li>\n<li>代理，使用代理上网，那么代理本身就是一个中间人……</li>\n<li>注意防范社工，社会工程学攻击。</li>\n</ol>\n<p>服务端需要做的：</p>\n<ol>\n<li>使用HTTPS</li>\n<li>业务上对XSS、CROS等等攻击手段进行防范</li>\n<li>使用验证码防止暴力</li>\n<li>保证服务器本身及内网安全</li>\n<li>敏感操作要求二次验证</li>\n<li>对用户设备、ip进行绑定和验证</li>\n<li>不使用任何自己想的奇奇怪怪的加密方式和算法。古典密码学的编码和破译通常依赖于算法本身的设计和对手的想象力和创造力，一但算法公开就不具备安全性，而现代密码学的安全性依赖于密钥而不是算法本身的保密性。而目前常用的密码学算法都是开源且经过了各种专家的验证和分析，适用场景、破解成本、优缺点已经很明确且公开，在不出现重大技术突破的情况下，可以基本保证安全。</li>\n</ol>\n<h1 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h1><p>上面所说的都只是互联网应用中认证与授权中的认证，即“我是谁”的问题。而授权则是控制用户对于系统的访问权限。</p>\n<p>在系统庞大、功能复杂的情况下，可能会有多个完全不同的域名，或者是其他第三方登录的实现。那么就有了SSO和OAuth</p>\n<p>SSO是单点登录，主要是处理一个公司的不同系统下的访问登录问题（如淘宝和天猫，他们的域是不同的，但是可以相互跳转不需要重新认证）</p>\n<p>OAuth主要是不同公司间的授权方案，授权用户在第三方应用中访问自己在自己系统的一些隐私数据，比如一些网站的qq登录、微博登录等第三方账号登录。</p>\n<p>这部分具体的内容在此不展开描述只是作为相关点提一下，后续可能会继续更新相应文章展开。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>首先明确，这里主要论述的Session并不是指具体的各个语言的实现，而是单指Session（会话）的技术。</p>\n<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><p>标准HTTP协议请求本身是无状态的，也就是说，用户A和B同时向服务器发送了一个请求，服务器是无法判断这两个请求分别是来自于A还是B还是C。</p>\n<p>为了实现有状态的HTTP请求，即在业务上服务端需要知道每一个请求分别来自于谁，就需要在HTTP的基础上，在应用业务上实现这么一个功能来维持用户的状态，从而将登录、和后续用户操作等等多个独立的HTTP请求联系起来，这就是Session。</p>\n<p>换个说法，将客户端和服务端之间的多个独立HTTP请求起来关联，并识别请求的用户身份，能够实现这样一种功能的，就是Session（会话）</p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>那么，Session的实现方案有哪些？Token、JWT、PHP Session和Tomcat Session等等都是什么鬼？</p>\n<p>一个个来说这些东西，但是先说一下Cookie。</p>\n<h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><p>cookie是<em>由浏览器</em>实现的一个最基本的功能，诞生之初就是为了分辨用户身份而存储在客户端内存或硬盘上的数据块，大小通常为4kb。</p>\n<p><strong>优点：</strong><br>    1. Cookie历史较久，功能基本比较完善，具有生存周期Expires、有效访问路径Path、域名等等属性完善其安全性和有效性。<br>    2. 可以由服务端在请求的Response中带上Set-Cookie属性对客户端的Cookie进行设置而不需要前端额外实现。<br>    3. 浏览器在请求时会自动带上该网站对应的Cookie发送给服务端。</p>\n<p><strong>缺点：</strong><br>    1. 通常大小为4kb，在现代化网站中，可能不够用。<br>    2. 浏览器会在每个HTTP请求中，都自动带上Cookie进行请求，若Cookie较多，占用服务器带宽。<br>    3. 容易被污染，从而导致隐私泄漏，商家可依此完善用户画像，实现广告跟踪。<br>    4. Cookie可被用户禁用，影响业务。<br>    5. 非浏览器应用，如App，没有Cookie。</p>\n<h2 id=\"PHP、Tomcat-默认的Session\"><a href=\"#PHP、Tomcat-默认的Session\" class=\"headerlink\" title=\"PHP、Tomcat 默认的Session\"></a>PHP、Tomcat 默认的Session</h2><p>大多数Web容器、应用框架都提供了Session的一种默认实现方式，基本原理就是在客户端的Cookie中放一个SessionID，然后在服务器的内存中以SessionID作为key，存储对应用户的状态数据。PHP中是PHPSESSID，Tomcat是JSESSIONID。</p>\n<h2 id=\"Token、JWT\"><a href=\"#Token、JWT\" class=\"headerlink\" title=\"Token、JWT\"></a>Token、JWT</h2><p>Token（令牌）是将用户的状态数据直接存储到客户端，而不是存储在服务端中。用户在登录成功之后，服务端将用户信息和其他数据通过某种规则和编码转换成一个Token字符串，并返回给客户端，客户端在请求服务端时，带上这个Token，服务端只需要验证这个Token是否正确、有效，就可以从里面得到用户信息，而不需要在服务器上花费空间进行存储。</p>\n<p>类似的比喻，比如试卷、合同上的签名和印章，在验证文件内容真伪时，只需要验证签名或印章的痕迹是否真实有效，即可认为文件内容是否有效。</p>\n<p><a href=\"https://jwt.io/\">JWT(JSON Web Tokens)</a>，就是Token的一种标准(RFC 7519)，定义了一种基于Json的Token方案，包含了用户数据、校验字段以及签名策略，使jwt本身可以包含用户数据，并且不会被篡改。</p>\n<h2 id=\"演化\"><a href=\"#演化\" class=\"headerlink\" title=\"演化\"></a>演化</h2><p>这里以一个简单的web应用进行演化。</p>\n<p>在Http协议诞生之初，只是为了从服务端获取简单的静态Html数据，静态页面嘛，直接Get完请求就可以了，也不需要处理上下文之间的交互。但是渐渐的，网站有了用户账号的设计，BBS、电商、即时聊天、游戏对战等等一系列需要客户端和服务端有状态的会话需求，服务端需要知道每一个无状态的HTTP请求对应的用户是谁，所以就需要在HTTP请求中带上身份识别，这时候就可以利用<strong>Cookie</strong>。</p>\n<p>用户在登录成功时，服务端通过Set-Cookie在客户端的Cookie中保存用户身份，比如用户的ID，那么用户在登录成功后，选好商品添加购物车的时候，欸就可以把Cookie中的用户id带上，那么服务端就可以知道，这个购物车的操作是由这个id的用户做的。</p>\n<p>乍一看，好像这个方法不错，可以实现用户的状态维持。但是Cookie在客户端上是明文保存的，可以随意修改，如果某个人把cookie里的id进行修改，把id修改成别人的，那不是就可以伪造用户请求了？而且随着业务的发展，用户需要保存的信息也越来越多，比如用户权限、用户身份、上下文一些关联的业务数据等，如果这些数据也都明文保存在客户端，这明显很不安全。</p>\n<p>那么就到了<strong>session</strong>（狭义上的），把用户数据存储在服务器的内存里，用户和服务端建立联系的时候，服务端创建一个SessionID，把SessionId放到Cookie里，每次请求带上SessionID，服务端就可以根据这个来查到存储在内存里的用户信息。同时客户端只需要存储SessionID，并且这个id本身只是一个Key，那么就可以使用一些算法，使id变的较长且无规律，不容易被随意修改伪造。到这里，这也是现在大多数web框架内置session的实现方案，简单好用。</p>\n<p>经过了多年的发展，这个web应用的用户数量也逐渐多了起来，一台服务器显然不能够很好的满足逐渐膨胀的用户和业务发展，那么就需要添加服务器做负载均衡共同提供服务。</p>\n<p>问题来了，之前的用户数据是存放在服务器的内存里的，也就是用户上一次是在A服务器里处理的登录请求，那下一次用户的请求发到了B里，不是就变的没有登录了吗？</p>\n<p>处理的方案也有几种：服务器间session复制，服务器间互相同步、互相备份；在负载均衡的时候做粘连，把来自同一个用户的请求粘连在同一个服务器上；session集中存储，利用Redis等高性能第三方存储把session放到业务服务器外等等方案，这些方案都互相有优缺点，这里暂不详细展开。</p>\n<p>再回到开始的直接存储用户id的方案上，这个方案最大的问题就是单纯的用户id容易被篡改，那么是不是只要不让他被随意篡改就可以了？一个不会被随意篡改、又不用在服务器上面存储方案是不是就很完美？</p>\n<p>这是<strong>Token</strong>的方案，在登录成功后，服务端给用户一个身份凭证，上面有用户的信息，同时，服务端对这个凭证签名，让他不能被随便修改，比如对用户信息和时效信息加上服务端的私钥签名，在没有拿到服务端的私钥下，谁都不能伪造出这份签名，同时又可以通过服务端的公钥进行验证。</p>\n<p>Token的方案可以自行设计，不过业界已经有一个广泛应用的标准JWT，大部分场景直接根据这个标准进行开发就可以了。</p>\n<p>Token实现了HTTP请求的有状态和服务端的无状态，服务端上的不同服务器不需要花费空间来存储每一个用户的用户数据，转而只需要对token进行验证就可以了，经典的时间换空间，而且可以提高服务器的伸缩性，可以随意的添加业务服务器，而不需要额外处理session的各种问题。</p>\n<p>但是把Token当作凭证发放给客户端后，又怎么对客户端的用户进行管理？比如用户修改了密码，之前颁发的凭证需要失效，但是Token是在客户端上的，服务端无法主动失效Token，这是一个问题。那有人肯定会说，可以把Token在服务端上存一份呀，如果失效了给他打个标记，或者直接删除，不是就可以管理了吗？是的，这样确实可以在服务端上对Token进行管理，但是这样，服务端也从无状态变回了有状态，又需要处理Token在服务端上的存储、共享等等问题，和session有什么本质上的区别吗？</p>\n<p>上面的不论sessionID还是token都是存放在cookie里的，但是要注意，这个cookie只是浏览器都支持自动处理的一个headers而已，所以在具体实现上，不论是sessionID还是token都可以放到其他的header头里，区别就是需要客户端代码自行处理而已，包括App等非浏览器应用。</p>\n<p>综上所述，各种方案实现都有相对应的好处和问题，没有哪种方案是完美的，在一个应用中，需要根据业务本身的用户规模、服务器情况、安全程度、业务逻辑和用户体验，选择适合的方案，或是互相结合在不同的场景使用不同的方案。</p>\n<h2 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h2><p>互联网应用最重要的问题就是安全，各种Session技术、加密算法都是为了增加攻击成本、提高安全性。</p>\n<p>上面的方案中，很明显有一个致命的问题，每个方案基本都依赖于服务端给客户端发送的一组识别用户身份的字符串，那假如有人在中间抓包，拿到这个字符串，是不是就不安全了。是的，这是中间人攻击的一种方式。</p>\n<p>如何避免，这个问题如果基于HTTP是没有很好的方案的，较好的方案就是使用HTTPS，基于可信根证书和端到端的加密来实现整个链路上的传输安全。</p>\n<p>通过其他字段综合对用户身份进行验证，比如设备MAC、IP地址等信息综合判断。</p>\n<p>在核心重要功能如支付，使用二次验证（密码、短信等）。</p>\n<p>减少token的有效时间，并在每次请求中对token进行刷新。</p>\n<p>安全的前提是客户端安全，如果客户端本身状态危险，那么任何的安全措施都是无效的。</p>\n<p>用户需要做的：</p>\n<ol>\n<li>保持操作系统安全，不被挂马、不被其他人操作，这是设备的安全。</li>\n<li>使用可靠的浏览器、确认浏览器的各种设置。</li>\n<li>避免安装不可信的CA根证书（数字证书），证书是保证HTTPS安全的前提，通常受信的证书是内置在操作系统中的，以及用户自行安装的，比如常见的网银证书。如果安装不可信的假CA证书，那么攻击者就可以伪造CA证书，自己对自己的请求进行签发，欺骗客户端，由于客户端安装了假CA证书，并不会对中间人的伪造证书报警。</li>\n<li>确认网站地址正确，确认证书的有效性和签发机构。</li>\n<li>代理，使用代理上网，那么代理本身就是一个中间人……</li>\n<li>注意防范社工，社会工程学攻击。</li>\n</ol>\n<p>服务端需要做的：</p>\n<ol>\n<li>使用HTTPS</li>\n<li>业务上对XSS、CROS等等攻击手段进行防范</li>\n<li>使用验证码防止暴力</li>\n<li>保证服务器本身及内网安全</li>\n<li>敏感操作要求二次验证</li>\n<li>对用户设备、ip进行绑定和验证</li>\n<li>不使用任何自己想的奇奇怪怪的加密方式和算法。古典密码学的编码和破译通常依赖于算法本身的设计和对手的想象力和创造力，一但算法公开就不具备安全性，而现代密码学的安全性依赖于密钥而不是算法本身的保密性。而目前常用的密码学算法都是开源且经过了各种专家的验证和分析，适用场景、破解成本、优缺点已经很明确且公开，在不出现重大技术突破的情况下，可以基本保证安全。</li>\n</ol>\n<h1 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h1><p>上面所说的都只是互联网应用中认证与授权中的认证，即“我是谁”的问题。而授权则是控制用户对于系统的访问权限。</p>\n<p>在系统庞大、功能复杂的情况下，可能会有多个完全不同的域名，或者是其他第三方登录的实现。那么就有了SSO和OAuth</p>\n<p>SSO是单点登录，主要是处理一个公司的不同系统下的访问登录问题（如淘宝和天猫，他们的域是不同的，但是可以相互跳转不需要重新认证）</p>\n<p>OAuth主要是不同公司间的授权方案，授权用户在第三方应用中访问自己在自己系统的一些隐私数据，比如一些网站的qq登录、微博登录等第三方账号登录。</p>\n<p>这部分具体的内容在此不展开描述只是作为相关点提一下，后续可能会继续更新相应文章展开。</p>\n"},{"title":"记一次离奇的网络瘫痪","date":"2019-07-19T08:51:52.000Z","updated":"2021-01-08T08:58:14.028Z","url":"https://maoxian.fun/archives/记一次离奇的网络瘫痪","_content":"\n今天下午，当我正在coding的时候，一上百度发现网络断开，紧接着qq下线、steam登出…刹时间我意识到，网络崩了。没过多久，系统（win10）右下角的网络显示网络无连接，尝试在“网络与Internet设置”中关闭有线连接适配器。\n\n![img](记一次离奇的网络瘫痪/0bf5b4b02e59c95b0b37017eee894f00-ce4604-1610094903.png)\n\n万万没想到，当我禁用之后再次启用的时候居然无法启动，于是重启系统，结果又卡在了“正在重启”的界面，过了一会感觉像是卡住了就关机键长按关机再开机。开机的时候刷了一下手机，结果发现连着家庭wifi的手机正常上网？？？开机之后，尝试打开一个网页，居然成功了？？？\n\n正当我以为网络正常的时候，打开了一个新网页，又出现了刚才的情况——没网了。于是输入192.168.3.1(这是我家主路由的ip地址），结果发现有线连接的路由器居然都连不上了，同时使用手机登录该地址查看路由设置，正常，检查了一下路由连接的终端设备，无线连接设备一切正常，有线连接一个都没有…这时我感觉到，事情并没有这么简单…\n\n##### 网络情况介绍\n\n![img](记一次离奇的网络瘫痪/039c7638b4cb69ebe053494d43248011-ef9a80-1610094927.png)拓扑结构\n\n上图是家里的网络拓扑结构图，入户光猫为网络入口，ip地址为192.168.1.1并且隐藏ssid，不作为日常使用。主路由为家中的主要路由设备，放置在书房作为主要的wifi广播信号，ip地址为192.168.3.1，有线设备全部通过交换机连接。由于额外一间房间由于户型结构的问题与主路由距离较远且中间有墙隔挡，wifi信号极差，正好家中有一台闲置的旧路由，就作为中继路由拓展主路由的无线信号（关闭DHCP、SSID和密码与主路由设置相同），并且因为这个是放在非主要房间的某个角落，所以我自己都忘了还有这个设备（这是前提）\n\n##### 排查问题\n\n开始排查问题，首先主机尝试登录192.168.3.1与192.168.1.1，均无法连接并且ping不通。之后尝试手机登录，均正常连接，查看终端设备发现没有有线设备。查看交换机，交换机上所有连接设备信号灯都在，并且闪烁，尝试拔出线缆，主机识别网线拔出，但是再插入时依然显示无网络连接。结合今日高温天气并且没有开空调，认为是网络设备高温宕机了，于是关闭所有路由和交换机（不包括中继路由）。几分钟后，设备温度恢复常温后再次开机，此时网络恢复，有线无线均正常，但是过了一会再次出现了以上的情况。此时发现无线连接的设备虽然可以上网但是一会可以一会不行，而有线连接是持续无法上网。\n\n开始怀疑为设备故障的问题，尝试断开交换机，将主机连至主路由上，此时主机提示发现新网络并且网络正常。此时怀疑为交换机宕机。再次连接交换机，经过一段时间，再次出现网络无法连接。之后使用排除法，拔出所有交换机连接，仅保留与主路由连接线，每次插入一条网线进行排除测试。\n\n最后，发现已经有一条线路连接上后，网络就出现瘫痪。随后检查该线路发现了已经被我遗忘的中继路由。尝试断开该中继路由发现网络恢复正常…至此，终于发现罪魁祸首。\n\n##### 结果分析\n\n可是为什么正常使用了一年时间才突然出现这个问题呢？推测如下：检查中继路由上的标签发现这个路由是2011年购买并且此前在老家作为主路由服役了较长时间，又由于高温导致该路由器故障异常，可是为什么子路由故障会导致整个网段瘫痪呢？结合交换机上的信号灯在所有设备均没有发起网络请求的情况下剧烈闪烁，推测由于设备故障引起了广播风暴导致网络发生阻塞…","source":"_posts/early/记一次离奇的网络瘫痪.md","raw":"---\ntitle: 记一次离奇的网络瘫痪\ndate: 2019-07-19 16:51:52.0\nupdated: 2021-01-08 16:58:14.028\nurl: https://maoxian.fun/archives/记一次离奇的网络瘫痪\ncategories: \ntags: \n- 程序\n- Web\n---\n\n今天下午，当我正在coding的时候，一上百度发现网络断开，紧接着qq下线、steam登出…刹时间我意识到，网络崩了。没过多久，系统（win10）右下角的网络显示网络无连接，尝试在“网络与Internet设置”中关闭有线连接适配器。\n\n![img](记一次离奇的网络瘫痪/0bf5b4b02e59c95b0b37017eee894f00-ce4604-1610094903.png)\n\n万万没想到，当我禁用之后再次启用的时候居然无法启动，于是重启系统，结果又卡在了“正在重启”的界面，过了一会感觉像是卡住了就关机键长按关机再开机。开机的时候刷了一下手机，结果发现连着家庭wifi的手机正常上网？？？开机之后，尝试打开一个网页，居然成功了？？？\n\n正当我以为网络正常的时候，打开了一个新网页，又出现了刚才的情况——没网了。于是输入192.168.3.1(这是我家主路由的ip地址），结果发现有线连接的路由器居然都连不上了，同时使用手机登录该地址查看路由设置，正常，检查了一下路由连接的终端设备，无线连接设备一切正常，有线连接一个都没有…这时我感觉到，事情并没有这么简单…\n\n##### 网络情况介绍\n\n![img](记一次离奇的网络瘫痪/039c7638b4cb69ebe053494d43248011-ef9a80-1610094927.png)拓扑结构\n\n上图是家里的网络拓扑结构图，入户光猫为网络入口，ip地址为192.168.1.1并且隐藏ssid，不作为日常使用。主路由为家中的主要路由设备，放置在书房作为主要的wifi广播信号，ip地址为192.168.3.1，有线设备全部通过交换机连接。由于额外一间房间由于户型结构的问题与主路由距离较远且中间有墙隔挡，wifi信号极差，正好家中有一台闲置的旧路由，就作为中继路由拓展主路由的无线信号（关闭DHCP、SSID和密码与主路由设置相同），并且因为这个是放在非主要房间的某个角落，所以我自己都忘了还有这个设备（这是前提）\n\n##### 排查问题\n\n开始排查问题，首先主机尝试登录192.168.3.1与192.168.1.1，均无法连接并且ping不通。之后尝试手机登录，均正常连接，查看终端设备发现没有有线设备。查看交换机，交换机上所有连接设备信号灯都在，并且闪烁，尝试拔出线缆，主机识别网线拔出，但是再插入时依然显示无网络连接。结合今日高温天气并且没有开空调，认为是网络设备高温宕机了，于是关闭所有路由和交换机（不包括中继路由）。几分钟后，设备温度恢复常温后再次开机，此时网络恢复，有线无线均正常，但是过了一会再次出现了以上的情况。此时发现无线连接的设备虽然可以上网但是一会可以一会不行，而有线连接是持续无法上网。\n\n开始怀疑为设备故障的问题，尝试断开交换机，将主机连至主路由上，此时主机提示发现新网络并且网络正常。此时怀疑为交换机宕机。再次连接交换机，经过一段时间，再次出现网络无法连接。之后使用排除法，拔出所有交换机连接，仅保留与主路由连接线，每次插入一条网线进行排除测试。\n\n最后，发现已经有一条线路连接上后，网络就出现瘫痪。随后检查该线路发现了已经被我遗忘的中继路由。尝试断开该中继路由发现网络恢复正常…至此，终于发现罪魁祸首。\n\n##### 结果分析\n\n可是为什么正常使用了一年时间才突然出现这个问题呢？推测如下：检查中继路由上的标签发现这个路由是2011年购买并且此前在老家作为主路由服役了较长时间，又由于高温导致该路由器故障异常，可是为什么子路由故障会导致整个网段瘫痪呢？结合交换机上的信号灯在所有设备均没有发起网络请求的情况下剧烈闪烁，推测由于设备故障引起了广播风暴导致网络发生阻塞…","slug":"early/记一次离奇的网络瘫痪","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec91d3e0043v0l47sct5g4o","content":"<p>今天下午，当我正在coding的时候，一上百度发现网络断开，紧接着qq下线、steam登出…刹时间我意识到，网络崩了。没过多久，系统（win10）右下角的网络显示网络无连接，尝试在“网络与Internet设置”中关闭有线连接适配器。</p>\n<img src=\"/uncategorized/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%BB%E5%A5%87%E7%9A%84%E7%BD%91%E7%BB%9C%E7%98%AB%E7%97%AA/0bf5b4b02e59c95b0b37017eee894f00-ce4604-1610094903.png\" class=\"\" title=\"img\">\n\n<p>万万没想到，当我禁用之后再次启用的时候居然无法启动，于是重启系统，结果又卡在了“正在重启”的界面，过了一会感觉像是卡住了就关机键长按关机再开机。开机的时候刷了一下手机，结果发现连着家庭wifi的手机正常上网？？？开机之后，尝试打开一个网页，居然成功了？？？</p>\n<p>正当我以为网络正常的时候，打开了一个新网页，又出现了刚才的情况——没网了。于是输入192.168.3.1(这是我家主路由的ip地址），结果发现有线连接的路由器居然都连不上了，同时使用手机登录该地址查看路由设置，正常，检查了一下路由连接的终端设备，无线连接设备一切正常，有线连接一个都没有…这时我感觉到，事情并没有这么简单…</p>\n<h5 id=\"网络情况介绍\"><a href=\"#网络情况介绍\" class=\"headerlink\" title=\"网络情况介绍\"></a>网络情况介绍</h5><img src=\"/uncategorized/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%BB%E5%A5%87%E7%9A%84%E7%BD%91%E7%BB%9C%E7%98%AB%E7%97%AA/039c7638b4cb69ebe053494d43248011-ef9a80-1610094927.png\" class=\"\" title=\"img\">拓扑结构\n\n<p>上图是家里的网络拓扑结构图，入户光猫为网络入口，ip地址为192.168.1.1并且隐藏ssid，不作为日常使用。主路由为家中的主要路由设备，放置在书房作为主要的wifi广播信号，ip地址为192.168.3.1，有线设备全部通过交换机连接。由于额外一间房间由于户型结构的问题与主路由距离较远且中间有墙隔挡，wifi信号极差，正好家中有一台闲置的旧路由，就作为中继路由拓展主路由的无线信号（关闭DHCP、SSID和密码与主路由设置相同），并且因为这个是放在非主要房间的某个角落，所以我自己都忘了还有这个设备（这是前提）</p>\n<h5 id=\"排查问题\"><a href=\"#排查问题\" class=\"headerlink\" title=\"排查问题\"></a>排查问题</h5><p>开始排查问题，首先主机尝试登录192.168.3.1与192.168.1.1，均无法连接并且ping不通。之后尝试手机登录，均正常连接，查看终端设备发现没有有线设备。查看交换机，交换机上所有连接设备信号灯都在，并且闪烁，尝试拔出线缆，主机识别网线拔出，但是再插入时依然显示无网络连接。结合今日高温天气并且没有开空调，认为是网络设备高温宕机了，于是关闭所有路由和交换机（不包括中继路由）。几分钟后，设备温度恢复常温后再次开机，此时网络恢复，有线无线均正常，但是过了一会再次出现了以上的情况。此时发现无线连接的设备虽然可以上网但是一会可以一会不行，而有线连接是持续无法上网。</p>\n<p>开始怀疑为设备故障的问题，尝试断开交换机，将主机连至主路由上，此时主机提示发现新网络并且网络正常。此时怀疑为交换机宕机。再次连接交换机，经过一段时间，再次出现网络无法连接。之后使用排除法，拔出所有交换机连接，仅保留与主路由连接线，每次插入一条网线进行排除测试。</p>\n<p>最后，发现已经有一条线路连接上后，网络就出现瘫痪。随后检查该线路发现了已经被我遗忘的中继路由。尝试断开该中继路由发现网络恢复正常…至此，终于发现罪魁祸首。</p>\n<h5 id=\"结果分析\"><a href=\"#结果分析\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h5><p>可是为什么正常使用了一年时间才突然出现这个问题呢？推测如下：检查中继路由上的标签发现这个路由是2011年购买并且此前在老家作为主路由服役了较长时间，又由于高温导致该路由器故障异常，可是为什么子路由故障会导致整个网段瘫痪呢？结合交换机上的信号灯在所有设备均没有发起网络请求的情况下剧烈闪烁，推测由于设备故障引起了广播风暴导致网络发生阻塞…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天下午，当我正在coding的时候，一上百度发现网络断开，紧接着qq下线、steam登出…刹时间我意识到，网络崩了。没过多久，系统（win10）右下角的网络显示网络无连接，尝试在“网络与Internet设置”中关闭有线连接适配器。</p>\n<img src=\"/uncategorized/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%BB%E5%A5%87%E7%9A%84%E7%BD%91%E7%BB%9C%E7%98%AB%E7%97%AA/0bf5b4b02e59c95b0b37017eee894f00-ce4604-1610094903.png\" class=\"\" title=\"img\">\n\n<p>万万没想到，当我禁用之后再次启用的时候居然无法启动，于是重启系统，结果又卡在了“正在重启”的界面，过了一会感觉像是卡住了就关机键长按关机再开机。开机的时候刷了一下手机，结果发现连着家庭wifi的手机正常上网？？？开机之后，尝试打开一个网页，居然成功了？？？</p>\n<p>正当我以为网络正常的时候，打开了一个新网页，又出现了刚才的情况——没网了。于是输入192.168.3.1(这是我家主路由的ip地址），结果发现有线连接的路由器居然都连不上了，同时使用手机登录该地址查看路由设置，正常，检查了一下路由连接的终端设备，无线连接设备一切正常，有线连接一个都没有…这时我感觉到，事情并没有这么简单…</p>\n<h5 id=\"网络情况介绍\"><a href=\"#网络情况介绍\" class=\"headerlink\" title=\"网络情况介绍\"></a>网络情况介绍</h5><img src=\"/uncategorized/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%A6%BB%E5%A5%87%E7%9A%84%E7%BD%91%E7%BB%9C%E7%98%AB%E7%97%AA/039c7638b4cb69ebe053494d43248011-ef9a80-1610094927.png\" class=\"\" title=\"img\">拓扑结构\n\n<p>上图是家里的网络拓扑结构图，入户光猫为网络入口，ip地址为192.168.1.1并且隐藏ssid，不作为日常使用。主路由为家中的主要路由设备，放置在书房作为主要的wifi广播信号，ip地址为192.168.3.1，有线设备全部通过交换机连接。由于额外一间房间由于户型结构的问题与主路由距离较远且中间有墙隔挡，wifi信号极差，正好家中有一台闲置的旧路由，就作为中继路由拓展主路由的无线信号（关闭DHCP、SSID和密码与主路由设置相同），并且因为这个是放在非主要房间的某个角落，所以我自己都忘了还有这个设备（这是前提）</p>\n<h5 id=\"排查问题\"><a href=\"#排查问题\" class=\"headerlink\" title=\"排查问题\"></a>排查问题</h5><p>开始排查问题，首先主机尝试登录192.168.3.1与192.168.1.1，均无法连接并且ping不通。之后尝试手机登录，均正常连接，查看终端设备发现没有有线设备。查看交换机，交换机上所有连接设备信号灯都在，并且闪烁，尝试拔出线缆，主机识别网线拔出，但是再插入时依然显示无网络连接。结合今日高温天气并且没有开空调，认为是网络设备高温宕机了，于是关闭所有路由和交换机（不包括中继路由）。几分钟后，设备温度恢复常温后再次开机，此时网络恢复，有线无线均正常，但是过了一会再次出现了以上的情况。此时发现无线连接的设备虽然可以上网但是一会可以一会不行，而有线连接是持续无法上网。</p>\n<p>开始怀疑为设备故障的问题，尝试断开交换机，将主机连至主路由上，此时主机提示发现新网络并且网络正常。此时怀疑为交换机宕机。再次连接交换机，经过一段时间，再次出现网络无法连接。之后使用排除法，拔出所有交换机连接，仅保留与主路由连接线，每次插入一条网线进行排除测试。</p>\n<p>最后，发现已经有一条线路连接上后，网络就出现瘫痪。随后检查该线路发现了已经被我遗忘的中继路由。尝试断开该中继路由发现网络恢复正常…至此，终于发现罪魁祸首。</p>\n<h5 id=\"结果分析\"><a href=\"#结果分析\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h5><p>可是为什么正常使用了一年时间才突然出现这个问题呢？推测如下：检查中继路由上的标签发现这个路由是2011年购买并且此前在老家作为主路由服役了较长时间，又由于高温导致该路由器故障异常，可是为什么子路由故障会导致整个网段瘫痪呢？结合交换机上的信号灯在所有设备均没有发起网络请求的情况下剧烈闪烁，推测由于设备故障引起了广播风暴导致网络发生阻塞…</p>\n"},{"title":"数据结构 – 栈","date":"2020-02-25T08:51:55.000Z","updated":"2021-01-08T09:03:20.054Z","url":"https://maoxian.fun/archives/数据结构-栈","_content":"\n栈本质上是线性表，而且是操作受限的线性表。\n\n## 栈的概念\n\n栈，是一种后进先出（LIFO, last in first out）的线性数据结构。与一般线性表（数组、链表）不同，栈是一种操作受限的线性表，只允许在栈的一端进行出栈（pop）和入栈（push）操作。\n\n![img](数据结构-栈/48e758395b3246ce9032c9bb63a6ec99-0737d7-1610094343.jpeg)\n\n把线性表看成上图中的桶，只允许在表的一端进行入栈和出栈操作，这个桶就是栈。\n\n如上图所示，以1、2、3、4的顺序依次将数据推入栈中，最先进去的1在栈的最底部，而最后进去的4则在栈的最上方。由于只能在栈的顶部出入，所以如果此时出栈，那么最后进去的4反而会成为出栈的元素。\n\n## 实现\n\n这里使用C++语言示范，栈中存储的数据类型为int\n\n首先定义一个容量为maxSize的数组，这里设置为100。\n\n```c++\nint maxSize = 100;\nint top = -1;\nint* stack = new int[maxSize];\n```\n\ntop是一个int类型的值，称之为栈中的头指针或者栈顶。top永远指向当前栈中存储的数据的顶部，在初始化时，栈中是空的，所以我们将top值设为1 。可以发现，当top = -1时表示空栈，也就是栈里没有数据，当top >= 0时，即表示当前栈顶的元素为stack[top]。\n\n![img](数据结构-栈/747f75b76bb2b72be3e5413826fd1c3c-c86e9a-1610094817.jpeg)\n\n```c++\ntop++;\nstack[top] = value;\n```\n\n入栈时先将top加1，然后设置栈顶的值。当然，实际使用时要注意检查top指针是否越界。\n\n取栈顶元素时也很简单\n\n```c++\nint value = stack[top];\n```\n\ntop指向的也就是栈顶的值\n\n出栈时，首先取到栈顶的值，再将top减1即可。\n\n```c++\nint value = stack[top];\ntop--;\n```\n\nvalue即是出栈前，栈顶的元素。出栈时我们并不需要手动的再将原先的元素在数组中的数据清空，只需要简单的修改top指针指向的位置，在下一次入栈时原先的数据将会被直接覆盖。同样的道理，清空整个栈也只需要将top设为-1就可以了。\n\n```c++\ntop = -1; // 清空栈\n```\n\n## 总结\n\n栈是程序设计中非常常用的一个数据结构，虽然本质上是线性表，但是限制操作后就可以看成是一种具有后进先出特性的线性表，看似有限的操作空间，但是在使用上却更为简遍。其实这就是一种封装，将数组或者链表封装成栈之后，不需要使用者去人为的管理维护这个数组或者是链表，只需要简单的调用push()/pop()，使代码更简洁，也减少了出错的可能性。\n\n## 完整代码\n\n在细节上有一些小问题，所以仅供参考。\n\n```c++\n//顺序栈\ntemplate <class Type>\nclass ArrayStack {\n   private:\n    // 栈顶指针\n    int top;\n    // 栈的最大容量\n    int maxSize;\n    // 数据指针\n    Type* date;\n\n   public:\n    // 构造函数，默认创建大小为100的顺序栈\n    ArrayStack();\n    // 构造函数，创建大小为max的顺序栈\n    ArrayStack(int max);\n    // 析构函数，释放空间\n    ~ArrayStack();\n    // 入栈，成功返回true，失败返回false\n    bool push(Type d);\n    // 出栈，返回出栈前栈顶的元素\n    Type pop();\n    // 获取栈顶元素\n    Type getTop();\n    // 获取当前栈的空间\n    int getSize();\n    // 判断空栈\n    bool isEmpty();\n    // 清空栈中的元素\n    void setEmpty();\n};\ntemplate <class Type>\nArrayStack<Type>::ArrayStack() {\n    top = -1;\n    maxSize = 100;\n    date = new Type[maxSize];\n}\ntemplate <class Type>\nArrayStack<Type>::ArrayStack(int max) {\n    top = -1;\n    maxSize = max;\n    date = new Type[maxSize];\n}\ntemplate <class Type>\nArrayStack<Type>::~ArrayStack() {\n    top = -1;\n    delete date;\n    date = nullptr;\n}\ntemplate <class Type>\nbool ArrayStack<Type>::push(Type d) {\n    if (top + 1 == maxSize) {\n        return false;\n    }\n\n    top++;\n    date[top] = d;\n    return true;\n}\ntemplate <class Type>\nType ArrayStack<Type>::pop() {\n    if (top == -1) {\n        return false;\n    }\n\n    Type temp = date[top];\n    top--;\n    return temp;\n}\ntemplate <class Type>\nType ArrayStack<Type>::getTop() {\n    if (top == -1) {\n        return false;\n    }\n\n    Type temp = date[top];\n    return temp;\n}\n//返回当前长度 top+1\ntemplate <class Type>\nint ArrayStack<Type>::getSize() {\n    return top + 1;\n}\ntemplate <class Type>\nbool ArrayStack<Type>::isEmpty() {\n    return (top == -1 ? true : false);\n}\ntemplate <class Type>\nvoid ArrayStack<Type>::setEmpty() {\n    top = -1;\n}\n```","source":"_posts/early/数据结构-栈.md","raw":"---\ntitle: 数据结构 – 栈\ndate: 2020-02-25 16:51:55.0\nupdated: 2021-01-08 17:03:20.054\nurl: https://maoxian.fun/archives/数据结构-栈\ncategories: \n- 程序\n- 数据结构-算法\ntags: \n- cpp\n- 程序\n- 代码\n- 数据结构\n---\n\n栈本质上是线性表，而且是操作受限的线性表。\n\n## 栈的概念\n\n栈，是一种后进先出（LIFO, last in first out）的线性数据结构。与一般线性表（数组、链表）不同，栈是一种操作受限的线性表，只允许在栈的一端进行出栈（pop）和入栈（push）操作。\n\n![img](数据结构-栈/48e758395b3246ce9032c9bb63a6ec99-0737d7-1610094343.jpeg)\n\n把线性表看成上图中的桶，只允许在表的一端进行入栈和出栈操作，这个桶就是栈。\n\n如上图所示，以1、2、3、4的顺序依次将数据推入栈中，最先进去的1在栈的最底部，而最后进去的4则在栈的最上方。由于只能在栈的顶部出入，所以如果此时出栈，那么最后进去的4反而会成为出栈的元素。\n\n## 实现\n\n这里使用C++语言示范，栈中存储的数据类型为int\n\n首先定义一个容量为maxSize的数组，这里设置为100。\n\n```c++\nint maxSize = 100;\nint top = -1;\nint* stack = new int[maxSize];\n```\n\ntop是一个int类型的值，称之为栈中的头指针或者栈顶。top永远指向当前栈中存储的数据的顶部，在初始化时，栈中是空的，所以我们将top值设为1 。可以发现，当top = -1时表示空栈，也就是栈里没有数据，当top >= 0时，即表示当前栈顶的元素为stack[top]。\n\n![img](数据结构-栈/747f75b76bb2b72be3e5413826fd1c3c-c86e9a-1610094817.jpeg)\n\n```c++\ntop++;\nstack[top] = value;\n```\n\n入栈时先将top加1，然后设置栈顶的值。当然，实际使用时要注意检查top指针是否越界。\n\n取栈顶元素时也很简单\n\n```c++\nint value = stack[top];\n```\n\ntop指向的也就是栈顶的值\n\n出栈时，首先取到栈顶的值，再将top减1即可。\n\n```c++\nint value = stack[top];\ntop--;\n```\n\nvalue即是出栈前，栈顶的元素。出栈时我们并不需要手动的再将原先的元素在数组中的数据清空，只需要简单的修改top指针指向的位置，在下一次入栈时原先的数据将会被直接覆盖。同样的道理，清空整个栈也只需要将top设为-1就可以了。\n\n```c++\ntop = -1; // 清空栈\n```\n\n## 总结\n\n栈是程序设计中非常常用的一个数据结构，虽然本质上是线性表，但是限制操作后就可以看成是一种具有后进先出特性的线性表，看似有限的操作空间，但是在使用上却更为简遍。其实这就是一种封装，将数组或者链表封装成栈之后，不需要使用者去人为的管理维护这个数组或者是链表，只需要简单的调用push()/pop()，使代码更简洁，也减少了出错的可能性。\n\n## 完整代码\n\n在细节上有一些小问题，所以仅供参考。\n\n```c++\n//顺序栈\ntemplate <class Type>\nclass ArrayStack {\n   private:\n    // 栈顶指针\n    int top;\n    // 栈的最大容量\n    int maxSize;\n    // 数据指针\n    Type* date;\n\n   public:\n    // 构造函数，默认创建大小为100的顺序栈\n    ArrayStack();\n    // 构造函数，创建大小为max的顺序栈\n    ArrayStack(int max);\n    // 析构函数，释放空间\n    ~ArrayStack();\n    // 入栈，成功返回true，失败返回false\n    bool push(Type d);\n    // 出栈，返回出栈前栈顶的元素\n    Type pop();\n    // 获取栈顶元素\n    Type getTop();\n    // 获取当前栈的空间\n    int getSize();\n    // 判断空栈\n    bool isEmpty();\n    // 清空栈中的元素\n    void setEmpty();\n};\ntemplate <class Type>\nArrayStack<Type>::ArrayStack() {\n    top = -1;\n    maxSize = 100;\n    date = new Type[maxSize];\n}\ntemplate <class Type>\nArrayStack<Type>::ArrayStack(int max) {\n    top = -1;\n    maxSize = max;\n    date = new Type[maxSize];\n}\ntemplate <class Type>\nArrayStack<Type>::~ArrayStack() {\n    top = -1;\n    delete date;\n    date = nullptr;\n}\ntemplate <class Type>\nbool ArrayStack<Type>::push(Type d) {\n    if (top + 1 == maxSize) {\n        return false;\n    }\n\n    top++;\n    date[top] = d;\n    return true;\n}\ntemplate <class Type>\nType ArrayStack<Type>::pop() {\n    if (top == -1) {\n        return false;\n    }\n\n    Type temp = date[top];\n    top--;\n    return temp;\n}\ntemplate <class Type>\nType ArrayStack<Type>::getTop() {\n    if (top == -1) {\n        return false;\n    }\n\n    Type temp = date[top];\n    return temp;\n}\n//返回当前长度 top+1\ntemplate <class Type>\nint ArrayStack<Type>::getSize() {\n    return top + 1;\n}\ntemplate <class Type>\nbool ArrayStack<Type>::isEmpty() {\n    return (top == -1 ? true : false);\n}\ntemplate <class Type>\nvoid ArrayStack<Type>::setEmpty() {\n    top = -1;\n}\n```","slug":"early/数据结构-栈","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec93if700000sl43qvg1klq","content":"<p>栈本质上是线性表，而且是操作受限的线性表。</p>\n<h2 id=\"栈的概念\"><a href=\"#栈的概念\" class=\"headerlink\" title=\"栈的概念\"></a>栈的概念</h2><p>栈，是一种后进先出（LIFO, last in first out）的线性数据结构。与一般线性表（数组、链表）不同，栈是一种操作受限的线性表，只允许在栈的一端进行出栈（pop）和入栈（push）操作。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E2%80%93-%E6%A0%88/48e758395b3246ce9032c9bb63a6ec99-0737d7-1610094343.jpeg\" class=\"\" title=\"img\">\n\n<p>把线性表看成上图中的桶，只允许在表的一端进行入栈和出栈操作，这个桶就是栈。</p>\n<p>如上图所示，以1、2、3、4的顺序依次将数据推入栈中，最先进去的1在栈的最底部，而最后进去的4则在栈的最上方。由于只能在栈的顶部出入，所以如果此时出栈，那么最后进去的4反而会成为出栈的元素。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>这里使用C++语言示范，栈中存储的数据类型为int</p>\n<p>首先定义一个容量为maxSize的数组，这里设置为100。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> maxSize = <span class=\"hljs-number\">100</span>;<br><span class=\"hljs-type\">int</span> top = <span class=\"hljs-number\">-1</span>;<br><span class=\"hljs-type\">int</span>* stack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[maxSize];<br></code></pre></td></tr></table></figure>\n\n<p>top是一个int类型的值，称之为栈中的头指针或者栈顶。top永远指向当前栈中存储的数据的顶部，在初始化时，栈中是空的，所以我们将top值设为1 。可以发现，当top = -1时表示空栈，也就是栈里没有数据，当top &gt;= 0时，即表示当前栈顶的元素为stack[top]。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E2%80%93-%E6%A0%88/747f75b76bb2b72be3e5413826fd1c3c-c86e9a-1610094817.jpeg\" class=\"\" title=\"img\">\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">top++;<br>stack[top] = value;<br></code></pre></td></tr></table></figure>\n\n<p>入栈时先将top加1，然后设置栈顶的值。当然，实际使用时要注意检查top指针是否越界。</p>\n<p>取栈顶元素时也很简单</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> value = stack[top];<br></code></pre></td></tr></table></figure>\n\n<p>top指向的也就是栈顶的值</p>\n<p>出栈时，首先取到栈顶的值，再将top减1即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> value = stack[top];<br>top--;<br></code></pre></td></tr></table></figure>\n\n<p>value即是出栈前，栈顶的元素。出栈时我们并不需要手动的再将原先的元素在数组中的数据清空，只需要简单的修改top指针指向的位置，在下一次入栈时原先的数据将会被直接覆盖。同样的道理，清空整个栈也只需要将top设为-1就可以了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">top = <span class=\"hljs-number\">-1</span>; <span class=\"hljs-comment\">// 清空栈</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>栈是程序设计中非常常用的一个数据结构，虽然本质上是线性表，但是限制操作后就可以看成是一种具有后进先出特性的线性表，看似有限的操作空间，但是在使用上却更为简遍。其实这就是一种封装，将数组或者链表封装成栈之后，不需要使用者去人为的管理维护这个数组或者是链表，只需要简单的调用push()/pop()，使代码更简洁，也减少了出错的可能性。</p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><p>在细节上有一些小问题，所以仅供参考。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//顺序栈</span><br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ArrayStack</span> &#123;<br>   <span class=\"hljs-keyword\">private</span>:<br>    <span class=\"hljs-comment\">// 栈顶指针</span><br>    <span class=\"hljs-type\">int</span> top;<br>    <span class=\"hljs-comment\">// 栈的最大容量</span><br>    <span class=\"hljs-type\">int</span> maxSize;<br>    <span class=\"hljs-comment\">// 数据指针</span><br>    Type* date;<br><br>   <span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-comment\">// 构造函数，默认创建大小为100的顺序栈</span><br>    <span class=\"hljs-built_in\">ArrayStack</span>();<br>    <span class=\"hljs-comment\">// 构造函数，创建大小为max的顺序栈</span><br>    <span class=\"hljs-built_in\">ArrayStack</span>(<span class=\"hljs-type\">int</span> max);<br>    <span class=\"hljs-comment\">// 析构函数，释放空间</span><br>    ~<span class=\"hljs-built_in\">ArrayStack</span>();<br>    <span class=\"hljs-comment\">// 入栈，成功返回true，失败返回false</span><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(Type d)</span></span>;<br>    <span class=\"hljs-comment\">// 出栈，返回出栈前栈顶的元素</span><br>    <span class=\"hljs-function\">Type <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span></span>;<br>    <span class=\"hljs-comment\">// 获取栈顶元素</span><br>    <span class=\"hljs-function\">Type <span class=\"hljs-title\">getTop</span><span class=\"hljs-params\">()</span></span>;<br>    <span class=\"hljs-comment\">// 获取当前栈的空间</span><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span></span>;<br>    <span class=\"hljs-comment\">// 判断空栈</span><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span></span>;<br>    <span class=\"hljs-comment\">// 清空栈中的元素</span><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">setEmpty</span><span class=\"hljs-params\">()</span></span>;<br>&#125;;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br>ArrayStack&lt;Type&gt;::<span class=\"hljs-built_in\">ArrayStack</span>() &#123;<br>    top = <span class=\"hljs-number\">-1</span>;<br>    maxSize = <span class=\"hljs-number\">100</span>;<br>    date = <span class=\"hljs-keyword\">new</span> Type[maxSize];<br>&#125;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br>ArrayStack&lt;Type&gt;::<span class=\"hljs-built_in\">ArrayStack</span>(<span class=\"hljs-type\">int</span> max) &#123;<br>    top = <span class=\"hljs-number\">-1</span>;<br>    maxSize = max;<br>    date = <span class=\"hljs-keyword\">new</span> Type[maxSize];<br>&#125;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br>ArrayStack&lt;Type&gt;::~<span class=\"hljs-built_in\">ArrayStack</span>() &#123;<br>    top = <span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-keyword\">delete</span> date;<br>    date = <span class=\"hljs-literal\">nullptr</span>;<br>&#125;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br><span class=\"hljs-type\">bool</span> ArrayStack&lt;Type&gt;::<span class=\"hljs-built_in\">push</span>(Type d) &#123;<br>    <span class=\"hljs-keyword\">if</span> (top + <span class=\"hljs-number\">1</span> == maxSize) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br><br>    top++;<br>    date[top] = d;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br>Type ArrayStack&lt;Type&gt;::<span class=\"hljs-built_in\">pop</span>() &#123;<br>    <span class=\"hljs-keyword\">if</span> (top == <span class=\"hljs-number\">-1</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br><br>    Type temp = date[top];<br>    top--;<br>    <span class=\"hljs-keyword\">return</span> temp;<br>&#125;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br>Type ArrayStack&lt;Type&gt;::<span class=\"hljs-built_in\">getTop</span>() &#123;<br>    <span class=\"hljs-keyword\">if</span> (top == <span class=\"hljs-number\">-1</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br><br>    Type temp = date[top];<br>    <span class=\"hljs-keyword\">return</span> temp;<br>&#125;<br><span class=\"hljs-comment\">//返回当前长度 top+1</span><br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br><span class=\"hljs-type\">int</span> ArrayStack&lt;Type&gt;::<span class=\"hljs-built_in\">getSize</span>() &#123;<br>    <span class=\"hljs-keyword\">return</span> top + <span class=\"hljs-number\">1</span>;<br>&#125;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br><span class=\"hljs-type\">bool</span> ArrayStack&lt;Type&gt;::<span class=\"hljs-built_in\">isEmpty</span>() &#123;<br>    <span class=\"hljs-keyword\">return</span> (top == <span class=\"hljs-number\">-1</span> ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span>);<br>&#125;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br><span class=\"hljs-type\">void</span> ArrayStack&lt;Type&gt;::<span class=\"hljs-built_in\">setEmpty</span>() &#123;<br>    top = <span class=\"hljs-number\">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>栈本质上是线性表，而且是操作受限的线性表。</p>\n<h2 id=\"栈的概念\"><a href=\"#栈的概念\" class=\"headerlink\" title=\"栈的概念\"></a>栈的概念</h2><p>栈，是一种后进先出（LIFO, last in first out）的线性数据结构。与一般线性表（数组、链表）不同，栈是一种操作受限的线性表，只允许在栈的一端进行出栈（pop）和入栈（push）操作。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E2%80%93-%E6%A0%88/48e758395b3246ce9032c9bb63a6ec99-0737d7-1610094343.jpeg\" class=\"\" title=\"img\">\n\n<p>把线性表看成上图中的桶，只允许在表的一端进行入栈和出栈操作，这个桶就是栈。</p>\n<p>如上图所示，以1、2、3、4的顺序依次将数据推入栈中，最先进去的1在栈的最底部，而最后进去的4则在栈的最上方。由于只能在栈的顶部出入，所以如果此时出栈，那么最后进去的4反而会成为出栈的元素。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>这里使用C++语言示范，栈中存储的数据类型为int</p>\n<p>首先定义一个容量为maxSize的数组，这里设置为100。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> maxSize = <span class=\"hljs-number\">100</span>;<br><span class=\"hljs-type\">int</span> top = <span class=\"hljs-number\">-1</span>;<br><span class=\"hljs-type\">int</span>* stack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[maxSize];<br></code></pre></td></tr></table></figure>\n\n<p>top是一个int类型的值，称之为栈中的头指针或者栈顶。top永远指向当前栈中存储的数据的顶部，在初始化时，栈中是空的，所以我们将top值设为1 。可以发现，当top = -1时表示空栈，也就是栈里没有数据，当top &gt;= 0时，即表示当前栈顶的元素为stack[top]。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E2%80%93-%E6%A0%88/747f75b76bb2b72be3e5413826fd1c3c-c86e9a-1610094817.jpeg\" class=\"\" title=\"img\">\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">top++;<br>stack[top] = value;<br></code></pre></td></tr></table></figure>\n\n<p>入栈时先将top加1，然后设置栈顶的值。当然，实际使用时要注意检查top指针是否越界。</p>\n<p>取栈顶元素时也很简单</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> value = stack[top];<br></code></pre></td></tr></table></figure>\n\n<p>top指向的也就是栈顶的值</p>\n<p>出栈时，首先取到栈顶的值，再将top减1即可。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-type\">int</span> value = stack[top];<br>top--;<br></code></pre></td></tr></table></figure>\n\n<p>value即是出栈前，栈顶的元素。出栈时我们并不需要手动的再将原先的元素在数组中的数据清空，只需要简单的修改top指针指向的位置，在下一次入栈时原先的数据将会被直接覆盖。同样的道理，清空整个栈也只需要将top设为-1就可以了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">top = <span class=\"hljs-number\">-1</span>; <span class=\"hljs-comment\">// 清空栈</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>栈是程序设计中非常常用的一个数据结构，虽然本质上是线性表，但是限制操作后就可以看成是一种具有后进先出特性的线性表，看似有限的操作空间，但是在使用上却更为简遍。其实这就是一种封装，将数组或者链表封装成栈之后，不需要使用者去人为的管理维护这个数组或者是链表，只需要简单的调用push()/pop()，使代码更简洁，也减少了出错的可能性。</p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><p>在细节上有一些小问题，所以仅供参考。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//顺序栈</span><br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ArrayStack</span> &#123;<br>   <span class=\"hljs-keyword\">private</span>:<br>    <span class=\"hljs-comment\">// 栈顶指针</span><br>    <span class=\"hljs-type\">int</span> top;<br>    <span class=\"hljs-comment\">// 栈的最大容量</span><br>    <span class=\"hljs-type\">int</span> maxSize;<br>    <span class=\"hljs-comment\">// 数据指针</span><br>    Type* date;<br><br>   <span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-comment\">// 构造函数，默认创建大小为100的顺序栈</span><br>    <span class=\"hljs-built_in\">ArrayStack</span>();<br>    <span class=\"hljs-comment\">// 构造函数，创建大小为max的顺序栈</span><br>    <span class=\"hljs-built_in\">ArrayStack</span>(<span class=\"hljs-type\">int</span> max);<br>    <span class=\"hljs-comment\">// 析构函数，释放空间</span><br>    ~<span class=\"hljs-built_in\">ArrayStack</span>();<br>    <span class=\"hljs-comment\">// 入栈，成功返回true，失败返回false</span><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(Type d)</span></span>;<br>    <span class=\"hljs-comment\">// 出栈，返回出栈前栈顶的元素</span><br>    <span class=\"hljs-function\">Type <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span></span>;<br>    <span class=\"hljs-comment\">// 获取栈顶元素</span><br>    <span class=\"hljs-function\">Type <span class=\"hljs-title\">getTop</span><span class=\"hljs-params\">()</span></span>;<br>    <span class=\"hljs-comment\">// 获取当前栈的空间</span><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span></span>;<br>    <span class=\"hljs-comment\">// 判断空栈</span><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span></span>;<br>    <span class=\"hljs-comment\">// 清空栈中的元素</span><br>    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">setEmpty</span><span class=\"hljs-params\">()</span></span>;<br>&#125;;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br>ArrayStack&lt;Type&gt;::<span class=\"hljs-built_in\">ArrayStack</span>() &#123;<br>    top = <span class=\"hljs-number\">-1</span>;<br>    maxSize = <span class=\"hljs-number\">100</span>;<br>    date = <span class=\"hljs-keyword\">new</span> Type[maxSize];<br>&#125;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br>ArrayStack&lt;Type&gt;::<span class=\"hljs-built_in\">ArrayStack</span>(<span class=\"hljs-type\">int</span> max) &#123;<br>    top = <span class=\"hljs-number\">-1</span>;<br>    maxSize = max;<br>    date = <span class=\"hljs-keyword\">new</span> Type[maxSize];<br>&#125;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br>ArrayStack&lt;Type&gt;::~<span class=\"hljs-built_in\">ArrayStack</span>() &#123;<br>    top = <span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-keyword\">delete</span> date;<br>    date = <span class=\"hljs-literal\">nullptr</span>;<br>&#125;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br><span class=\"hljs-type\">bool</span> ArrayStack&lt;Type&gt;::<span class=\"hljs-built_in\">push</span>(Type d) &#123;<br>    <span class=\"hljs-keyword\">if</span> (top + <span class=\"hljs-number\">1</span> == maxSize) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br><br>    top++;<br>    date[top] = d;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br>Type ArrayStack&lt;Type&gt;::<span class=\"hljs-built_in\">pop</span>() &#123;<br>    <span class=\"hljs-keyword\">if</span> (top == <span class=\"hljs-number\">-1</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br><br>    Type temp = date[top];<br>    top--;<br>    <span class=\"hljs-keyword\">return</span> temp;<br>&#125;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br>Type ArrayStack&lt;Type&gt;::<span class=\"hljs-built_in\">getTop</span>() &#123;<br>    <span class=\"hljs-keyword\">if</span> (top == <span class=\"hljs-number\">-1</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br><br>    Type temp = date[top];<br>    <span class=\"hljs-keyword\">return</span> temp;<br>&#125;<br><span class=\"hljs-comment\">//返回当前长度 top+1</span><br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br><span class=\"hljs-type\">int</span> ArrayStack&lt;Type&gt;::<span class=\"hljs-built_in\">getSize</span>() &#123;<br>    <span class=\"hljs-keyword\">return</span> top + <span class=\"hljs-number\">1</span>;<br>&#125;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br><span class=\"hljs-type\">bool</span> ArrayStack&lt;Type&gt;::<span class=\"hljs-built_in\">isEmpty</span>() &#123;<br>    <span class=\"hljs-keyword\">return</span> (top == <span class=\"hljs-number\">-1</span> ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span>);<br>&#125;<br><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;<br><span class=\"hljs-type\">void</span> ArrayStack&lt;Type&gt;::<span class=\"hljs-built_in\">setEmpty</span>() &#123;<br>    top = <span class=\"hljs-number\">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"Mysql-双机热备","date":"2019-11-20T08:51:52.000Z","updated":"2021-01-08T09:08:48.543Z","url":"https://maoxian.fun/archives/mysql-双机热备","_content":"\n首先建立两个mysql环境。该文章中数据库环境为Centos7, mysql5.7.28，均为虚拟机，在主机上使用Navicat通过局域网连接两个数据库进行测试。\n\n由于复制功能基于二进制日志，所以在开启复制之前，应保证两个数据库中都有相同的库结构及数据，否则容易引起复制语句异常。Mysql的版本最好保持一致避免可能的异常。\n\n## 基本的条件：\n\n- 主从数据库连接正常，能正常Ping通。\n- 端口正确开放\n- 防火墙等的配置（避免在读取二进制日志时出现问题）\n\n![img](Mysql-双机热备/c87432de99adf6d978e6d863256606ac-ffa581-1610094856.jpeg)\n\n![img](Mysql-双机热备/33e2a5a631164c121e05e5fb3b922534-0ef7b2-1610094861.jpeg)\n\n## 修改数据库配置文件 /etc/my.cnf\n\n在**数据库A**的[mysqld]部分添加或修改以下内容：\n\n```\nserver_id=1 //数据库A 的唯一标识，必须唯一\nlog-bin=master_01 //开启二进制日志，数据库同步的基础\nbinlog-do-db=test_A // 需要同步的库，两边的库名字要一样并且一行只能写一个库\n```\n\n在**数据库B**的[mysqld]部分添加或修改以下内容：\n\n```\nserver_id=2\nlog-bin=master_02\nbinlog-do-db=test_A\n```\n\n若需要同步多个库需要将binlog-do-db分为多行写，如下\n\n```\nbinlog-do-db=test_A\nbinlog-do-db=test_B\nbinlog-do-db=test_C\n```\n\n要注意 “binlog-do-db=test_A, test_B, test_C” 这种写法是**错误**的，会将ABC认为是同一个库, 并且在后续操作中不会出现异常报错\n\n修改完成后**重启数据库**使修改生效\n\n```\nsystemctl restart mysqld.service\n```\n\n## 配置主从复制功能\n\n进入mysql控制台，查看当前**数据库A**的状态，并且记录File和Position值\n\n```\nshow master status;\n```\n\n![img](Mysql-双机热备/efc3cc448668a197371dc3b9b2bf0a39-87e9c4-1610094876.jpeg)\n\n如图，记录的File值为master_01.000001，Position值为2653\n\n*注意，在运行show master status命令前，应保证该数据库无任何****写操作\\****，应停止服务或者加入 FLUSH TABLES WITH READ LOCK 锁。同时可在此时对数据库进行备份，并且将数据保存到另一个数据库中（表结构及数据等）以保证数据一致性并且防止后续操作出现异常。*\n\n记录好值以后可以开放数据库A\n\n```\nUNLOCK TABLES;\n```\n\n来到**数据库B** 中，关闭复制功能\n\n```\nstop slave;\n```\n\n配置复制功能，修改下列代码中为对应的值，并执行\n\n```\nCHANGE MASTER TO\nMASTER_HOST='数据库A的ip地址',\nMASTER_USER='数据库A提供的用于复制的用户',\nMASTER_PASSWORD='密码',\nMASTER_PORT=3306,\nMASTER_LOG_FILE='刚记录的数据库A的File文件名',\nMASTER_LOG_POS=刚记录的数据库A的Position值,\nMASTER_CONNECT_RETRY=数据库A的server_id;\n```\n\n开启复制功能\n\nstart slave;\n\n同样的，对数据库B也是同样的操作，\n记录**数据库B** 的状态值\n\n```\nshow master status; \n```\n\n然后在**数据库A** 中\n\n```\nstop slave; \n```\n\n执行代码（将上文代码中数据库A的值换为数据库B的）\n\n```\nCHANGE MASTER TO\nMASTER_HOST='数据库B的ip地址',\nMASTER_USER='数据库B提供的用于复制的用户',\nMASTER_PASSWORD='密码',\nMASTER_PORT=3306,\nMASTER_LOG_FILE='刚记录的数据库B的File文件名',\nMASTER_LOG_POS=刚记录的数据库B的Position值,\nMASTER_CONNECT_RETRY=数据库B的server_id;\n```\n\n开启复制功能\n\n```\nstart slave;\n```\n\n配置完两个数据库后执行\n\n```\nshow slave status\\G;\n```\n\n查看配置情况，若无发现Error报错信息，则正常启动，可以通过Navicat等可视化软件对配置的库进行测试。若一切正常，在AB数据库中的操作均可正常复制到另一个数据库中。\n\n## 可能的问题\n\nsame uuid：我在配置过程中发现这个问题，原因是因为在配置虚拟机环境时是配置好一个虚拟机的mysql环境后直接使用VMware的克隆功能，导致两个数据库的uuid相同。解决方法：删除任意一个数据库的auto.conf文件（在my.cnf文件中datadir对应的路径下，一般是/var/lib/mysql/ ）删除后重启该数据库，会重新生成该文件。\n\nSlave_IO_Running: NO ：表示在拉取二进制日志时出现异常，通常是由防火墙导致\n\nSlave_IO_Running: Connecting ：连接错误或者配置错误，检查数据库ip地址及端口，检查配置的ip地址是否错误，防火墙拦截等。\n\n## 参考资料：\n\nhttps://blog.51cto.com/13577495/2167525\n\nhttps://www.mysqlzh.com/doc/55.html","source":"_posts/early/Mysql-双机热备.md","raw":"---\ntitle: Mysql-双机热备\ndate: 2019-11-20 16:51:52.0\nupdated: 2021-01-08 17:08:48.543\nurl: https://maoxian.fun/archives/mysql-双机热备\ncategories: \n- 程序\n- Sql\ntags: \n- 程序\n- Web\n---\n\n首先建立两个mysql环境。该文章中数据库环境为Centos7, mysql5.7.28，均为虚拟机，在主机上使用Navicat通过局域网连接两个数据库进行测试。\n\n由于复制功能基于二进制日志，所以在开启复制之前，应保证两个数据库中都有相同的库结构及数据，否则容易引起复制语句异常。Mysql的版本最好保持一致避免可能的异常。\n\n## 基本的条件：\n\n- 主从数据库连接正常，能正常Ping通。\n- 端口正确开放\n- 防火墙等的配置（避免在读取二进制日志时出现问题）\n\n![img](Mysql-双机热备/c87432de99adf6d978e6d863256606ac-ffa581-1610094856.jpeg)\n\n![img](Mysql-双机热备/33e2a5a631164c121e05e5fb3b922534-0ef7b2-1610094861.jpeg)\n\n## 修改数据库配置文件 /etc/my.cnf\n\n在**数据库A**的[mysqld]部分添加或修改以下内容：\n\n```\nserver_id=1 //数据库A 的唯一标识，必须唯一\nlog-bin=master_01 //开启二进制日志，数据库同步的基础\nbinlog-do-db=test_A // 需要同步的库，两边的库名字要一样并且一行只能写一个库\n```\n\n在**数据库B**的[mysqld]部分添加或修改以下内容：\n\n```\nserver_id=2\nlog-bin=master_02\nbinlog-do-db=test_A\n```\n\n若需要同步多个库需要将binlog-do-db分为多行写，如下\n\n```\nbinlog-do-db=test_A\nbinlog-do-db=test_B\nbinlog-do-db=test_C\n```\n\n要注意 “binlog-do-db=test_A, test_B, test_C” 这种写法是**错误**的，会将ABC认为是同一个库, 并且在后续操作中不会出现异常报错\n\n修改完成后**重启数据库**使修改生效\n\n```\nsystemctl restart mysqld.service\n```\n\n## 配置主从复制功能\n\n进入mysql控制台，查看当前**数据库A**的状态，并且记录File和Position值\n\n```\nshow master status;\n```\n\n![img](Mysql-双机热备/efc3cc448668a197371dc3b9b2bf0a39-87e9c4-1610094876.jpeg)\n\n如图，记录的File值为master_01.000001，Position值为2653\n\n*注意，在运行show master status命令前，应保证该数据库无任何****写操作\\****，应停止服务或者加入 FLUSH TABLES WITH READ LOCK 锁。同时可在此时对数据库进行备份，并且将数据保存到另一个数据库中（表结构及数据等）以保证数据一致性并且防止后续操作出现异常。*\n\n记录好值以后可以开放数据库A\n\n```\nUNLOCK TABLES;\n```\n\n来到**数据库B** 中，关闭复制功能\n\n```\nstop slave;\n```\n\n配置复制功能，修改下列代码中为对应的值，并执行\n\n```\nCHANGE MASTER TO\nMASTER_HOST='数据库A的ip地址',\nMASTER_USER='数据库A提供的用于复制的用户',\nMASTER_PASSWORD='密码',\nMASTER_PORT=3306,\nMASTER_LOG_FILE='刚记录的数据库A的File文件名',\nMASTER_LOG_POS=刚记录的数据库A的Position值,\nMASTER_CONNECT_RETRY=数据库A的server_id;\n```\n\n开启复制功能\n\nstart slave;\n\n同样的，对数据库B也是同样的操作，\n记录**数据库B** 的状态值\n\n```\nshow master status; \n```\n\n然后在**数据库A** 中\n\n```\nstop slave; \n```\n\n执行代码（将上文代码中数据库A的值换为数据库B的）\n\n```\nCHANGE MASTER TO\nMASTER_HOST='数据库B的ip地址',\nMASTER_USER='数据库B提供的用于复制的用户',\nMASTER_PASSWORD='密码',\nMASTER_PORT=3306,\nMASTER_LOG_FILE='刚记录的数据库B的File文件名',\nMASTER_LOG_POS=刚记录的数据库B的Position值,\nMASTER_CONNECT_RETRY=数据库B的server_id;\n```\n\n开启复制功能\n\n```\nstart slave;\n```\n\n配置完两个数据库后执行\n\n```\nshow slave status\\G;\n```\n\n查看配置情况，若无发现Error报错信息，则正常启动，可以通过Navicat等可视化软件对配置的库进行测试。若一切正常，在AB数据库中的操作均可正常复制到另一个数据库中。\n\n## 可能的问题\n\nsame uuid：我在配置过程中发现这个问题，原因是因为在配置虚拟机环境时是配置好一个虚拟机的mysql环境后直接使用VMware的克隆功能，导致两个数据库的uuid相同。解决方法：删除任意一个数据库的auto.conf文件（在my.cnf文件中datadir对应的路径下，一般是/var/lib/mysql/ ）删除后重启该数据库，会重新生成该文件。\n\nSlave_IO_Running: NO ：表示在拉取二进制日志时出现异常，通常是由防火墙导致\n\nSlave_IO_Running: Connecting ：连接错误或者配置错误，检查数据库ip地址及端口，检查配置的ip地址是否错误，防火墙拦截等。\n\n## 参考资料：\n\nhttps://blog.51cto.com/13577495/2167525\n\nhttps://www.mysqlzh.com/doc/55.html","slug":"early/Mysql-双机热备","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec9eh0o0000dgl4g14tbq4o","content":"<p>首先建立两个mysql环境。该文章中数据库环境为Centos7, mysql5.7.28，均为虚拟机，在主机上使用Navicat通过局域网连接两个数据库进行测试。</p>\n<p>由于复制功能基于二进制日志，所以在开启复制之前，应保证两个数据库中都有相同的库结构及数据，否则容易引起复制语句异常。Mysql的版本最好保持一致避免可能的异常。</p>\n<h2 id=\"基本的条件：\"><a href=\"#基本的条件：\" class=\"headerlink\" title=\"基本的条件：\"></a>基本的条件：</h2><ul>\n<li>主从数据库连接正常，能正常Ping通。</li>\n<li>端口正确开放</li>\n<li>防火墙等的配置（避免在读取二进制日志时出现问题）</li>\n</ul>\n<img src=\"/%E7%A8%8B%E5%BA%8F/Sql/mysql-%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/c87432de99adf6d978e6d863256606ac-ffa581-1610094856.jpeg\" class=\"\" title=\"img\">\n\n<img src=\"/%E7%A8%8B%E5%BA%8F/Sql/mysql-%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/33e2a5a631164c121e05e5fb3b922534-0ef7b2-1610094861.jpeg\" class=\"\" title=\"img\">\n\n<h2 id=\"修改数据库配置文件-etc-my-cnf\"><a href=\"#修改数据库配置文件-etc-my-cnf\" class=\"headerlink\" title=\"修改数据库配置文件 /etc/my.cnf\"></a>修改数据库配置文件 /etc/my.cnf</h2><p>在<strong>数据库A</strong>的[mysqld]部分添加或修改以下内容：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">server_id=<span class=\"hljs-number\">1</span> <span class=\"hljs-regexp\">//</span>数据库A 的唯一标识，必须唯一<br>log-bin=master_01 <span class=\"hljs-regexp\">//</span>开启二进制日志，数据库同步的基础<br>binlog-<span class=\"hljs-keyword\">do</span>-db=test_A <span class=\"hljs-regexp\">//</span> 需要同步的库，两边的库名字要一样并且一行只能写一个库<br></code></pre></td></tr></table></figure>\n\n<p>在<strong>数据库B</strong>的[mysqld]部分添加或修改以下内容：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">server_id</span>=<span class=\"hljs-number\">2</span><br><span class=\"hljs-attr\">log-bin</span>=master_02<br><span class=\"hljs-attr\">binlog-do-db</span>=test_A<br></code></pre></td></tr></table></figure>\n\n<p>若需要同步多个库需要将binlog-do-db分为多行写，如下</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\"><span class=\"hljs-attribute\">binlog-do-db</span><span class=\"hljs-operator\">=</span>test_A<br><span class=\"hljs-attribute\">binlog-do-db</span><span class=\"hljs-operator\">=</span>test_B<br><span class=\"hljs-attribute\">binlog-do-db</span><span class=\"hljs-operator\">=</span>test_C<br></code></pre></td></tr></table></figure>\n\n<p>要注意 “binlog-do-db=test_A, test_B, test_C” 这种写法是<strong>错误</strong>的，会将ABC认为是同一个库, 并且在后续操作中不会出现异常报错</p>\n<p>修改完成后<strong>重启数据库</strong>使修改生效</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">systemctl <span class=\"hljs-built_in\">restart</span> mysqld.service<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置主从复制功能\"><a href=\"#配置主从复制功能\" class=\"headerlink\" title=\"配置主从复制功能\"></a>配置主从复制功能</h2><p>进入mysql控制台，查看当前<strong>数据库A</strong>的状态，并且记录File和Position值</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">show <span class=\"hljs-keyword\">master</span> <span class=\"hljs-title\">status</span>;<br></code></pre></td></tr></table></figure>\n\n<img src=\"/%E7%A8%8B%E5%BA%8F/Sql/mysql-%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/efc3cc448668a197371dc3b9b2bf0a39-87e9c4-1610094876.jpeg\" class=\"\" title=\"img\">\n\n<p>如图，记录的File值为master_01.000001，Position值为2653</p>\n<p><em>注意，在运行show master status命令前，应保证该数据库无任何</em>***写操作***<em>，应停止服务或者加入 FLUSH TABLES WITH READ LOCK 锁。同时可在此时对数据库进行备份，并且将数据保存到另一个数据库中（表结构及数据等）以保证数据一致性并且防止后续操作出现异常。</em></p>\n<p>记录好值以后可以开放数据库A</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">UNLOCK TABLES<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>来到<strong>数据库B</strong> 中，关闭复制功能</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\"><span class=\"hljs-literal\">stop</span> <span class=\"hljs-literal\">slave</span>;<br></code></pre></td></tr></table></figure>\n\n<p>配置复制功能，修改下列代码中为对应的值，并执行</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">CHANGE MASTER <span class=\"hljs-keyword\">TO</span><br><span class=\"hljs-attribute\">MASTER_HOST</span>=<span class=\"hljs-string\">&#x27;数据库A的ip地址&#x27;</span>,<br><span class=\"hljs-attribute\">MASTER_USER</span>=<span class=\"hljs-string\">&#x27;数据库A提供的用于复制的用户&#x27;</span>,<br><span class=\"hljs-attribute\">MASTER_PASSWORD</span>=<span class=\"hljs-string\">&#x27;密码&#x27;</span>,<br><span class=\"hljs-attribute\">MASTER_PORT</span>=3306,<br><span class=\"hljs-attribute\">MASTER_LOG_FILE</span>=<span class=\"hljs-string\">&#x27;刚记录的数据库A的File文件名&#x27;</span>,<br><span class=\"hljs-attribute\">MASTER_LOG_POS</span>=刚记录的数据库A的Position值,<br><span class=\"hljs-attribute\">MASTER_CONNECT_RETRY</span>=数据库A的server_id;<br></code></pre></td></tr></table></figure>\n\n<p>开启复制功能</p>\n<p>start slave;</p>\n<p>同样的，对数据库B也是同样的操作，<br>记录<strong>数据库B</strong> 的状态值</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">show <span class=\"hljs-keyword\">master</span> <span class=\"hljs-title\">status</span>; <br></code></pre></td></tr></table></figure>\n\n<p>然后在<strong>数据库A</strong> 中</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\"><span class=\"hljs-literal\">stop</span> <span class=\"hljs-literal\">slave</span>; <br></code></pre></td></tr></table></figure>\n\n<p>执行代码（将上文代码中数据库A的值换为数据库B的）</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">CHANGE MASTER <span class=\"hljs-keyword\">TO</span><br><span class=\"hljs-attribute\">MASTER_HOST</span>=<span class=\"hljs-string\">&#x27;数据库B的ip地址&#x27;</span>,<br><span class=\"hljs-attribute\">MASTER_USER</span>=<span class=\"hljs-string\">&#x27;数据库B提供的用于复制的用户&#x27;</span>,<br><span class=\"hljs-attribute\">MASTER_PASSWORD</span>=<span class=\"hljs-string\">&#x27;密码&#x27;</span>,<br><span class=\"hljs-attribute\">MASTER_PORT</span>=3306,<br><span class=\"hljs-attribute\">MASTER_LOG_FILE</span>=<span class=\"hljs-string\">&#x27;刚记录的数据库B的File文件名&#x27;</span>,<br><span class=\"hljs-attribute\">MASTER_LOG_POS</span>=刚记录的数据库B的Position值,<br><span class=\"hljs-attribute\">MASTER_CONNECT_RETRY</span>=数据库B的server_id;<br></code></pre></td></tr></table></figure>\n\n<p>开启复制功能</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\"><span class=\"hljs-literal\">start</span> <span class=\"hljs-literal\">slave</span>;<br></code></pre></td></tr></table></figure>\n\n<p>配置完两个数据库后执行</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\"><span class=\"hljs-built_in\">show</span> slave <span class=\"hljs-built_in\">status</span>\\G;<br></code></pre></td></tr></table></figure>\n\n<p>查看配置情况，若无发现Error报错信息，则正常启动，可以通过Navicat等可视化软件对配置的库进行测试。若一切正常，在AB数据库中的操作均可正常复制到另一个数据库中。</p>\n<h2 id=\"可能的问题\"><a href=\"#可能的问题\" class=\"headerlink\" title=\"可能的问题\"></a>可能的问题</h2><p>same uuid：我在配置过程中发现这个问题，原因是因为在配置虚拟机环境时是配置好一个虚拟机的mysql环境后直接使用VMware的克隆功能，导致两个数据库的uuid相同。解决方法：删除任意一个数据库的auto.conf文件（在my.cnf文件中datadir对应的路径下，一般是/var/lib/mysql/ ）删除后重启该数据库，会重新生成该文件。</p>\n<p>Slave_IO_Running: NO ：表示在拉取二进制日志时出现异常，通常是由防火墙导致</p>\n<p>Slave_IO_Running: Connecting ：连接错误或者配置错误，检查数据库ip地址及端口，检查配置的ip地址是否错误，防火墙拦截等。</p>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p><a href=\"https://blog.51cto.com/13577495/2167525\">https://blog.51cto.com/13577495/2167525</a></p>\n<p><a href=\"https://www.mysqlzh.com/doc/55.html\">https://www.mysqlzh.com/doc/55.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先建立两个mysql环境。该文章中数据库环境为Centos7, mysql5.7.28，均为虚拟机，在主机上使用Navicat通过局域网连接两个数据库进行测试。</p>\n<p>由于复制功能基于二进制日志，所以在开启复制之前，应保证两个数据库中都有相同的库结构及数据，否则容易引起复制语句异常。Mysql的版本最好保持一致避免可能的异常。</p>\n<h2 id=\"基本的条件：\"><a href=\"#基本的条件：\" class=\"headerlink\" title=\"基本的条件：\"></a>基本的条件：</h2><ul>\n<li>主从数据库连接正常，能正常Ping通。</li>\n<li>端口正确开放</li>\n<li>防火墙等的配置（避免在读取二进制日志时出现问题）</li>\n</ul>\n<img src=\"/%E7%A8%8B%E5%BA%8F/Sql/mysql-%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/c87432de99adf6d978e6d863256606ac-ffa581-1610094856.jpeg\" class=\"\" title=\"img\">\n\n<img src=\"/%E7%A8%8B%E5%BA%8F/Sql/mysql-%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/33e2a5a631164c121e05e5fb3b922534-0ef7b2-1610094861.jpeg\" class=\"\" title=\"img\">\n\n<h2 id=\"修改数据库配置文件-etc-my-cnf\"><a href=\"#修改数据库配置文件-etc-my-cnf\" class=\"headerlink\" title=\"修改数据库配置文件 /etc/my.cnf\"></a>修改数据库配置文件 /etc/my.cnf</h2><p>在<strong>数据库A</strong>的[mysqld]部分添加或修改以下内容：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">server_id=<span class=\"hljs-number\">1</span> <span class=\"hljs-regexp\">//</span>数据库A 的唯一标识，必须唯一<br>log-bin=master_01 <span class=\"hljs-regexp\">//</span>开启二进制日志，数据库同步的基础<br>binlog-<span class=\"hljs-keyword\">do</span>-db=test_A <span class=\"hljs-regexp\">//</span> 需要同步的库，两边的库名字要一样并且一行只能写一个库<br></code></pre></td></tr></table></figure>\n\n<p>在<strong>数据库B</strong>的[mysqld]部分添加或修改以下内容：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">server_id</span>=<span class=\"hljs-number\">2</span><br><span class=\"hljs-attr\">log-bin</span>=master_02<br><span class=\"hljs-attr\">binlog-do-db</span>=test_A<br></code></pre></td></tr></table></figure>\n\n<p>若需要同步多个库需要将binlog-do-db分为多行写，如下</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\"><span class=\"hljs-attribute\">binlog-do-db</span><span class=\"hljs-operator\">=</span>test_A<br><span class=\"hljs-attribute\">binlog-do-db</span><span class=\"hljs-operator\">=</span>test_B<br><span class=\"hljs-attribute\">binlog-do-db</span><span class=\"hljs-operator\">=</span>test_C<br></code></pre></td></tr></table></figure>\n\n<p>要注意 “binlog-do-db=test_A, test_B, test_C” 这种写法是<strong>错误</strong>的，会将ABC认为是同一个库, 并且在后续操作中不会出现异常报错</p>\n<p>修改完成后<strong>重启数据库</strong>使修改生效</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">systemctl <span class=\"hljs-built_in\">restart</span> mysqld.service<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置主从复制功能\"><a href=\"#配置主从复制功能\" class=\"headerlink\" title=\"配置主从复制功能\"></a>配置主从复制功能</h2><p>进入mysql控制台，查看当前<strong>数据库A</strong>的状态，并且记录File和Position值</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">show <span class=\"hljs-keyword\">master</span> <span class=\"hljs-title\">status</span>;<br></code></pre></td></tr></table></figure>\n\n<img src=\"/%E7%A8%8B%E5%BA%8F/Sql/mysql-%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/efc3cc448668a197371dc3b9b2bf0a39-87e9c4-1610094876.jpeg\" class=\"\" title=\"img\">\n\n<p>如图，记录的File值为master_01.000001，Position值为2653</p>\n<p><em>注意，在运行show master status命令前，应保证该数据库无任何</em>***写操作***<em>，应停止服务或者加入 FLUSH TABLES WITH READ LOCK 锁。同时可在此时对数据库进行备份，并且将数据保存到另一个数据库中（表结构及数据等）以保证数据一致性并且防止后续操作出现异常。</em></p>\n<p>记录好值以后可以开放数据库A</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">UNLOCK TABLES<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>来到<strong>数据库B</strong> 中，关闭复制功能</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\"><span class=\"hljs-literal\">stop</span> <span class=\"hljs-literal\">slave</span>;<br></code></pre></td></tr></table></figure>\n\n<p>配置复制功能，修改下列代码中为对应的值，并执行</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">CHANGE MASTER <span class=\"hljs-keyword\">TO</span><br><span class=\"hljs-attribute\">MASTER_HOST</span>=<span class=\"hljs-string\">&#x27;数据库A的ip地址&#x27;</span>,<br><span class=\"hljs-attribute\">MASTER_USER</span>=<span class=\"hljs-string\">&#x27;数据库A提供的用于复制的用户&#x27;</span>,<br><span class=\"hljs-attribute\">MASTER_PASSWORD</span>=<span class=\"hljs-string\">&#x27;密码&#x27;</span>,<br><span class=\"hljs-attribute\">MASTER_PORT</span>=3306,<br><span class=\"hljs-attribute\">MASTER_LOG_FILE</span>=<span class=\"hljs-string\">&#x27;刚记录的数据库A的File文件名&#x27;</span>,<br><span class=\"hljs-attribute\">MASTER_LOG_POS</span>=刚记录的数据库A的Position值,<br><span class=\"hljs-attribute\">MASTER_CONNECT_RETRY</span>=数据库A的server_id;<br></code></pre></td></tr></table></figure>\n\n<p>开启复制功能</p>\n<p>start slave;</p>\n<p>同样的，对数据库B也是同样的操作，<br>记录<strong>数据库B</strong> 的状态值</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">show <span class=\"hljs-keyword\">master</span> <span class=\"hljs-title\">status</span>; <br></code></pre></td></tr></table></figure>\n\n<p>然后在<strong>数据库A</strong> 中</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\"><span class=\"hljs-literal\">stop</span> <span class=\"hljs-literal\">slave</span>; <br></code></pre></td></tr></table></figure>\n\n<p>执行代码（将上文代码中数据库A的值换为数据库B的）</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">CHANGE MASTER <span class=\"hljs-keyword\">TO</span><br><span class=\"hljs-attribute\">MASTER_HOST</span>=<span class=\"hljs-string\">&#x27;数据库B的ip地址&#x27;</span>,<br><span class=\"hljs-attribute\">MASTER_USER</span>=<span class=\"hljs-string\">&#x27;数据库B提供的用于复制的用户&#x27;</span>,<br><span class=\"hljs-attribute\">MASTER_PASSWORD</span>=<span class=\"hljs-string\">&#x27;密码&#x27;</span>,<br><span class=\"hljs-attribute\">MASTER_PORT</span>=3306,<br><span class=\"hljs-attribute\">MASTER_LOG_FILE</span>=<span class=\"hljs-string\">&#x27;刚记录的数据库B的File文件名&#x27;</span>,<br><span class=\"hljs-attribute\">MASTER_LOG_POS</span>=刚记录的数据库B的Position值,<br><span class=\"hljs-attribute\">MASTER_CONNECT_RETRY</span>=数据库B的server_id;<br></code></pre></td></tr></table></figure>\n\n<p>开启复制功能</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\"><span class=\"hljs-literal\">start</span> <span class=\"hljs-literal\">slave</span>;<br></code></pre></td></tr></table></figure>\n\n<p>配置完两个数据库后执行</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\"><span class=\"hljs-built_in\">show</span> slave <span class=\"hljs-built_in\">status</span>\\G;<br></code></pre></td></tr></table></figure>\n\n<p>查看配置情况，若无发现Error报错信息，则正常启动，可以通过Navicat等可视化软件对配置的库进行测试。若一切正常，在AB数据库中的操作均可正常复制到另一个数据库中。</p>\n<h2 id=\"可能的问题\"><a href=\"#可能的问题\" class=\"headerlink\" title=\"可能的问题\"></a>可能的问题</h2><p>same uuid：我在配置过程中发现这个问题，原因是因为在配置虚拟机环境时是配置好一个虚拟机的mysql环境后直接使用VMware的克隆功能，导致两个数据库的uuid相同。解决方法：删除任意一个数据库的auto.conf文件（在my.cnf文件中datadir对应的路径下，一般是/var/lib/mysql/ ）删除后重启该数据库，会重新生成该文件。</p>\n<p>Slave_IO_Running: NO ：表示在拉取二进制日志时出现异常，通常是由防火墙导致</p>\n<p>Slave_IO_Running: Connecting ：连接错误或者配置错误，检查数据库ip地址及端口，检查配置的ip地址是否错误，防火墙拦截等。</p>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p><a href=\"https://blog.51cto.com/13577495/2167525\">https://blog.51cto.com/13577495/2167525</a></p>\n<p><a href=\"https://www.mysqlzh.com/doc/55.html\">https://www.mysqlzh.com/doc/55.html</a></p>\n"},{"title":"SpringBoot Web项目开发(一) 环境搭建","date":"2019-07-17T08:51:50.000Z","updated":"2021-01-08T08:59:04.710Z","url":"https://maoxian.fun/archives/springbootweb项目开发一环境搭建","_content":"\n### 一、简介 \n\n> Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot 致力于在蓬勃发展的快速应用开发领域 (rapid application development) 成为领导者。\n> 从最根本上来讲，Spring Boot 就是一些库的集合，它能够被任意项目的构建系统所使用。\n>\n> 百度百科\n\n### 二、环境准备\n\n本文以SpringBoot+Maven+Mybatis+MySQL为例，IDE使用IDEA。\n\nIDEA版本注意为[Ultimate](https://www.jetbrains.com/idea/download/#section=windows) (Ultimate与Community版相比，集成了更多面向于WEB相关的工具)\nJAVA版本为1.8\nMySQL版本为5.7.25\nMaven使用IDEA自带:\n配置阿里镜像源:打开IDEA，File->settings\n\n![settings Maven配置界面](springbootweb项目开发一环境搭建/image-6f86f7b3534efc8beea3605a38cbbf89-603c10-1610093064.png)\n\nBuild->Build Tools->Maven 中User settings file可以查看当前maven的配置项，打开路径对应文件。\n\n![img](springbootweb项目开发一环境搭建/code-1024x962-9fd180e94b6f4c39f337826276a85612-f13f0b-1610093081.png)\n\n找到xml文件中mirrors标签，添加以下代码\n\n```\n<!-- 阿里云仓库 -->\n<mirror>\n\t<id>alimaven</id>\n\t<mirrorOf>central</mirrorOf>\n\t<name>aliyun maven</name>\n\t<url>http://maven.aliyun.com/nexus/content/repositories/central/</url>\n</mirror>\n```\n\n以上操作配置Maven镜像源为阿里国内源，加快速度。\n\n### 三、创建项目\n\nIDEA -> File -> new project -> Spring Initializr\n\n![img](springbootweb项目开发一环境搭建/image-2-c01e335af8aa7df297d410e301476c8e-6bfc6e-1610093103.png)\n\n![img](springbootweb项目开发一环境搭建/image-3-a14b40a6b746c315bd60a322a18f30d8-e798c4-1610093115.png)\n\n接下来选择项目依赖，具体依赖根据项目需求选择，后期也可以在pom.xml中修改\n\n![img](springbootweb项目开发一环境搭建/image-4-bb52f36d371102cd655b6af50120313b-ec34aa-1610093175.png)\n\nmain中为项目源代码，MarketApplication.java为项目启动入口；\nresources为静态资源目录，application.properties为项目的配置文件，配置文件还有 application.yml 的yml类型。\ntest中为项目测试代码，该部分主要为项目测试代码。\npom.xml文件为Maven项目的依赖配置文件。\n\n### 四、添加相关依赖\n\n打开pom.xml文件，\n下方找到dependencies段，添加mybatis与mysql依赖\n\n```\n<!--mybatis-->\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>2.0.0</version>\n</dependency>\n\n<!--mysql-->\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>5.1.39</version>\n</dependency>\n```\n\n至此完成SpringBoot Web项目集成Mybatis的配置。","source":"_posts/early/springbootweb项目开发一环境搭建.md","raw":"---\ntitle: SpringBoot Web项目开发(一) 环境搭建\ndate: 2019-07-17 16:51:50.0\nupdated: 2021-01-08 16:59:04.71\nurl: https://maoxian.fun/archives/springbootweb项目开发一环境搭建\ncategories: \n- 程序\n- SpringBoot\ntags: \n- 程序\n- Spring\n- Web\n---\n\n### 一、简介 \n\n> Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot 致力于在蓬勃发展的快速应用开发领域 (rapid application development) 成为领导者。\n> 从最根本上来讲，Spring Boot 就是一些库的集合，它能够被任意项目的构建系统所使用。\n>\n> 百度百科\n\n### 二、环境准备\n\n本文以SpringBoot+Maven+Mybatis+MySQL为例，IDE使用IDEA。\n\nIDEA版本注意为[Ultimate](https://www.jetbrains.com/idea/download/#section=windows) (Ultimate与Community版相比，集成了更多面向于WEB相关的工具)\nJAVA版本为1.8\nMySQL版本为5.7.25\nMaven使用IDEA自带:\n配置阿里镜像源:打开IDEA，File->settings\n\n![settings Maven配置界面](springbootweb项目开发一环境搭建/image-6f86f7b3534efc8beea3605a38cbbf89-603c10-1610093064.png)\n\nBuild->Build Tools->Maven 中User settings file可以查看当前maven的配置项，打开路径对应文件。\n\n![img](springbootweb项目开发一环境搭建/code-1024x962-9fd180e94b6f4c39f337826276a85612-f13f0b-1610093081.png)\n\n找到xml文件中mirrors标签，添加以下代码\n\n```\n<!-- 阿里云仓库 -->\n<mirror>\n\t<id>alimaven</id>\n\t<mirrorOf>central</mirrorOf>\n\t<name>aliyun maven</name>\n\t<url>http://maven.aliyun.com/nexus/content/repositories/central/</url>\n</mirror>\n```\n\n以上操作配置Maven镜像源为阿里国内源，加快速度。\n\n### 三、创建项目\n\nIDEA -> File -> new project -> Spring Initializr\n\n![img](springbootweb项目开发一环境搭建/image-2-c01e335af8aa7df297d410e301476c8e-6bfc6e-1610093103.png)\n\n![img](springbootweb项目开发一环境搭建/image-3-a14b40a6b746c315bd60a322a18f30d8-e798c4-1610093115.png)\n\n接下来选择项目依赖，具体依赖根据项目需求选择，后期也可以在pom.xml中修改\n\n![img](springbootweb项目开发一环境搭建/image-4-bb52f36d371102cd655b6af50120313b-ec34aa-1610093175.png)\n\nmain中为项目源代码，MarketApplication.java为项目启动入口；\nresources为静态资源目录，application.properties为项目的配置文件，配置文件还有 application.yml 的yml类型。\ntest中为项目测试代码，该部分主要为项目测试代码。\npom.xml文件为Maven项目的依赖配置文件。\n\n### 四、添加相关依赖\n\n打开pom.xml文件，\n下方找到dependencies段，添加mybatis与mysql依赖\n\n```\n<!--mybatis-->\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>2.0.0</version>\n</dependency>\n\n<!--mysql-->\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>5.1.39</version>\n</dependency>\n```\n\n至此完成SpringBoot Web项目集成Mybatis的配置。","slug":"early/springbootweb项目开发一环境搭建","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clec9eh0r0001dgl4awqpgant","content":"<h3 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h3><blockquote>\n<p>Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot 致力于在蓬勃发展的快速应用开发领域 (rapid application development) 成为领导者。<br>从最根本上来讲，Spring Boot 就是一些库的集合，它能够被任意项目的构建系统所使用。</p>\n<p>百度百科</p>\n</blockquote>\n<h3 id=\"二、环境准备\"><a href=\"#二、环境准备\" class=\"headerlink\" title=\"二、环境准备\"></a>二、环境准备</h3><p>本文以SpringBoot+Maven+Mybatis+MySQL为例，IDE使用IDEA。</p>\n<p>IDEA版本注意为<a href=\"https://www.jetbrains.com/idea/download/#section=windows\">Ultimate</a> (Ultimate与Community版相比，集成了更多面向于WEB相关的工具)<br>JAVA版本为1.8<br>MySQL版本为5.7.25<br>Maven使用IDEA自带:<br>配置阿里镜像源:打开IDEA，File-&gt;settings</p>\n\n\n<p>Build-&gt;Build Tools-&gt;Maven 中User settings file可以查看当前maven的配置项，打开路径对应文件。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/SpringBoot/springboot-web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-%E4%B8%80-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/code-1024x962-9fd180e94b6f4c39f337826276a85612-f13f0b-1610093081.png\" class=\"\" title=\"img\">\n\n<p>找到xml文件中mirrors标签，添加以下代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 阿里云仓库 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>alimaven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>central<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>aliyun maven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>以上操作配置Maven镜像源为阿里国内源，加快速度。</p>\n<h3 id=\"三、创建项目\"><a href=\"#三、创建项目\" class=\"headerlink\" title=\"三、创建项目\"></a>三、创建项目</h3><p>IDEA -&gt; File -&gt; new project -&gt; Spring Initializr</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/SpringBoot/springboot-web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-%E4%B8%80-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-2-c01e335af8aa7df297d410e301476c8e-6bfc6e-1610093103.png\" class=\"\" title=\"img\">\n\n<img src=\"/%E7%A8%8B%E5%BA%8F/SpringBoot/springboot-web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-%E4%B8%80-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-3-a14b40a6b746c315bd60a322a18f30d8-e798c4-1610093115.png\" class=\"\" title=\"img\">\n\n<p>接下来选择项目依赖，具体依赖根据项目需求选择，后期也可以在pom.xml中修改</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/SpringBoot/springboot-web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-%E4%B8%80-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-4-bb52f36d371102cd655b6af50120313b-ec34aa-1610093175.png\" class=\"\" title=\"img\">\n\n<p>main中为项目源代码，MarketApplication.java为项目启动入口；<br>resources为静态资源目录，application.properties为项目的配置文件，配置文件还有 application.yml 的yml类型。<br>test中为项目测试代码，该部分主要为项目测试代码。<br>pom.xml文件为Maven项目的依赖配置文件。</p>\n<h3 id=\"四、添加相关依赖\"><a href=\"#四、添加相关依赖\" class=\"headerlink\" title=\"四、添加相关依赖\"></a>四、添加相关依赖</h3><p>打开pom.xml文件，<br>下方找到dependencies段，添加mybatis与mysql依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--mybatis--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--mysql--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>5.1.39<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>至此完成SpringBoot Web项目集成Mybatis的配置。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h3><blockquote>\n<p>Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot 致力于在蓬勃发展的快速应用开发领域 (rapid application development) 成为领导者。<br>从最根本上来讲，Spring Boot 就是一些库的集合，它能够被任意项目的构建系统所使用。</p>\n<p>百度百科</p>\n</blockquote>\n<h3 id=\"二、环境准备\"><a href=\"#二、环境准备\" class=\"headerlink\" title=\"二、环境准备\"></a>二、环境准备</h3><p>本文以SpringBoot+Maven+Mybatis+MySQL为例，IDE使用IDEA。</p>\n<p>IDEA版本注意为<a href=\"https://www.jetbrains.com/idea/download/#section=windows\">Ultimate</a> (Ultimate与Community版相比，集成了更多面向于WEB相关的工具)<br>JAVA版本为1.8<br>MySQL版本为5.7.25<br>Maven使用IDEA自带:<br>配置阿里镜像源:打开IDEA，File-&gt;settings</p>\n\n\n<p>Build-&gt;Build Tools-&gt;Maven 中User settings file可以查看当前maven的配置项，打开路径对应文件。</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/SpringBoot/springboot-web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-%E4%B8%80-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/code-1024x962-9fd180e94b6f4c39f337826276a85612-f13f0b-1610093081.png\" class=\"\" title=\"img\">\n\n<p>找到xml文件中mirrors标签，添加以下代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 阿里云仓库 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>alimaven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>central<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>aliyun maven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>以上操作配置Maven镜像源为阿里国内源，加快速度。</p>\n<h3 id=\"三、创建项目\"><a href=\"#三、创建项目\" class=\"headerlink\" title=\"三、创建项目\"></a>三、创建项目</h3><p>IDEA -&gt; File -&gt; new project -&gt; Spring Initializr</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/SpringBoot/springboot-web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-%E4%B8%80-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-2-c01e335af8aa7df297d410e301476c8e-6bfc6e-1610093103.png\" class=\"\" title=\"img\">\n\n<img src=\"/%E7%A8%8B%E5%BA%8F/SpringBoot/springboot-web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-%E4%B8%80-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-3-a14b40a6b746c315bd60a322a18f30d8-e798c4-1610093115.png\" class=\"\" title=\"img\">\n\n<p>接下来选择项目依赖，具体依赖根据项目需求选择，后期也可以在pom.xml中修改</p>\n<img src=\"/%E7%A8%8B%E5%BA%8F/SpringBoot/springboot-web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91-%E4%B8%80-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-4-bb52f36d371102cd655b6af50120313b-ec34aa-1610093175.png\" class=\"\" title=\"img\">\n\n<p>main中为项目源代码，MarketApplication.java为项目启动入口；<br>resources为静态资源目录，application.properties为项目的配置文件，配置文件还有 application.yml 的yml类型。<br>test中为项目测试代码，该部分主要为项目测试代码。<br>pom.xml文件为Maven项目的依赖配置文件。</p>\n<h3 id=\"四、添加相关依赖\"><a href=\"#四、添加相关依赖\" class=\"headerlink\" title=\"四、添加相关依赖\"></a>四、添加相关依赖</h3><p>打开pom.xml文件，<br>下方找到dependencies段，添加mybatis与mysql依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--mybatis--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--mysql--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>5.1.39<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>至此完成SpringBoot Web项目集成Mybatis的配置。</p>\n"}],"PostAsset":[{"_id":"source/_posts/early/SVN的使用及代码合并/76063b91901bf8a4bfe859dde2898c7b-3dae24-1610094773.png","slug":"76063b91901bf8a4bfe859dde2898c7b-3dae24-1610094773.png","post":"clec91d2f0009v0l46irz7huv","modified":0,"renderable":0},{"_id":"source/_posts/early/SVN的使用及代码合并/d48d1fa265fd71a1f8f9515e0125b963-112214-1610094767.png","slug":"d48d1fa265fd71a1f8f9515e0125b963-112214-1610094767.png","post":"clec91d2f0009v0l46irz7huv","modified":0,"renderable":0},{"_id":"source/_posts/early/Vue项目在Nginx非root目录下部署的问题/009501e2311bca14f237f5d30a9f8ac2-378b44-1610095800.png","slug":"009501e2311bca14f237f5d30a9f8ac2-378b44-1610095800.png","post":"clec91d2i000dv0l4dbit1x4b","modified":0,"renderable":0},{"_id":"source/_posts/early/Vue项目在Nginx非root目录下部署的问题/f48c4c3cab9bf32d52e1043e5341c724-54d547-1610095811.png","slug":"f48c4c3cab9bf32d52e1043e5341c724-54d547-1610095811.png","post":"clec91d2i000dv0l4dbit1x4b","modified":0,"renderable":0},{"_id":"source/_posts/early/springbootweb项目开发二工程结构/image-9b8189d3e15f07574698cf9232d72c34-bb380d-1610093408.png","slug":"image-9b8189d3e15f07574698cf9232d72c34-bb380d-1610093408.png","post":"clec91d2k000fv0l47uoygpcz","modified":0,"renderable":0},{"_id":"source/_posts/early/sqliteattach和detach/2c09e4b145e3277cd3158227524bda29-18f894-1610094731.png","slug":"2c09e4b145e3277cd3158227524bda29-18f894-1610094731.png","post":"clec91d2m000iv0l4b8yd7td4","modified":0,"renderable":0},{"_id":"source/_posts/early/sqliteattach和detach/484fbfae2091eca9b1211cead74bf72e-e3a9f9-1610094740.png","slug":"484fbfae2091eca9b1211cead74bf72e-e3a9f9-1610094740.png","post":"clec91d2m000iv0l4b8yd7td4","modified":0,"renderable":0},{"_id":"source/_posts/early/sqliteattach和detach/70b3338d971672a212404a0d8a3e1aae-63131e-1610094720.png","slug":"70b3338d971672a212404a0d8a3e1aae-63131e-1610094720.png","post":"clec91d2m000iv0l4b8yd7td4","modified":0,"renderable":0},{"_id":"source/_posts/early/sqliteattach和detach/f208d5e5ce8e1fcec42f85b52ed231be-98f0dd-1610094747.png","slug":"f208d5e5ce8e1fcec42f85b52ed231be-98f0dd-1610094747.png","post":"clec91d2m000iv0l4b8yd7td4","modified":0,"renderable":0},{"_id":"source/_posts/early/关于计算机的Boot/2d1575284cf52f1871bd04a7cf2d75b4-5a96bb-1610095398.png","slug":"2d1575284cf52f1871bd04a7cf2d75b4-5a96bb-1610095398.png","post":"clec91d2q000rv0l4c9rvhhjy","modified":0,"renderable":0},{"_id":"source/_posts/early/关于计算机的Boot/b864d20e64f6e15e211f6017b3af5981-d3c0bd-1610095362.png","slug":"b864d20e64f6e15e211f6017b3af5981-d3c0bd-1610095362.png","post":"clec91d2q000rv0l4c9rvhhjy","modified":0,"renderable":0},{"_id":"source/_posts/early/数据结构-链表/cycleList.jpg","slug":"cycleList.jpg","post":"clec91d2t0013v0l4hffw5sds","modified":0,"renderable":0},{"_id":"source/_posts/early/数据结构-链表/delete-d9814b52ffbb9a97cf928c54c7395c43-ca62e2-1610089087.jpeg","slug":"delete-d9814b52ffbb9a97cf928c54c7395c43-ca62e2-1610089087.jpeg","post":"clec91d2t0013v0l4hffw5sds","modified":0,"renderable":0},{"_id":"source/_posts/early/数据结构-链表/delete.jpg","slug":"delete.jpg","post":"clec91d2t0013v0l4hffw5sds","modified":0,"renderable":0},{"_id":"source/_posts/early/数据结构-链表/doubleNode.jpg","slug":"doubleNode.jpg","post":"clec91d2t0013v0l4hffw5sds","modified":0,"renderable":0},{"_id":"source/_posts/early/数据结构-链表/Insert.jpg","slug":"Insert.jpg","post":"clec91d2t0013v0l4hffw5sds","modified":0,"renderable":0},{"_id":"source/_posts/early/数据结构-链表/Memory.jpg","slug":"Memory.jpg","post":"clec91d2t0013v0l4hffw5sds","modified":0,"renderable":0},{"_id":"source/_posts/early/数据结构-链表/Node-cf7df3e42588b5b990f72608ca0fd257-cd4fc8-1610089027.jpeg","slug":"Node-cf7df3e42588b5b990f72608ca0fd257-cd4fc8-1610089027.jpeg","post":"clec91d2t0013v0l4hffw5sds","modified":0,"renderable":0},{"_id":"source/_posts/early/记一次离奇的网络瘫痪/039c7638b4cb69ebe053494d43248011-ef9a80-1610094927.png","slug":"039c7638b4cb69ebe053494d43248011-ef9a80-1610094927.png","post":"clec91d3e0043v0l47sct5g4o","modified":0,"renderable":0},{"_id":"source/_posts/early/记一次离奇的网络瘫痪/0bf5b4b02e59c95b0b37017eee894f00-ce4604-1610094903.png","slug":"0bf5b4b02e59c95b0b37017eee894f00-ce4604-1610094903.png","post":"clec91d3e0043v0l47sct5g4o","modified":0,"renderable":0},{"_id":"source/_posts/early/数据结构-栈/48e758395b3246ce9032c9bb63a6ec99-0737d7-1610094343.jpeg","slug":"48e758395b3246ce9032c9bb63a6ec99-0737d7-1610094343.jpeg","post":"clec93if700000sl43qvg1klq","modified":0,"renderable":0},{"_id":"source/_posts/early/数据结构-栈/747f75b76bb2b72be3e5413826fd1c3c-c86e9a-1610094817.jpeg","slug":"747f75b76bb2b72be3e5413826fd1c3c-c86e9a-1610094817.jpeg","post":"clec93if700000sl43qvg1klq","modified":0,"renderable":0},{"_id":"source/_posts/early/Mysql-双机热备/33e2a5a631164c121e05e5fb3b922534-0ef7b2-1610094861.jpeg","post":"clec9eh0o0000dgl4g14tbq4o","slug":"33e2a5a631164c121e05e5fb3b922534-0ef7b2-1610094861.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/early/Mysql-双机热备/c87432de99adf6d978e6d863256606ac-ffa581-1610094856.jpeg","post":"clec9eh0o0000dgl4g14tbq4o","slug":"c87432de99adf6d978e6d863256606ac-ffa581-1610094856.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/early/Mysql-双机热备/efc3cc448668a197371dc3b9b2bf0a39-87e9c4-1610094876.jpeg","post":"clec9eh0o0000dgl4g14tbq4o","slug":"efc3cc448668a197371dc3b9b2bf0a39-87e9c4-1610094876.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/early/springbootweb项目开发一环境搭建/code-1024x962-9fd180e94b6f4c39f337826276a85612-f13f0b-1610093081.png","post":"clec9eh0r0001dgl4awqpgant","slug":"code-1024x962-9fd180e94b6f4c39f337826276a85612-f13f0b-1610093081.png","modified":1,"renderable":1},{"_id":"source/_posts/early/springbootweb项目开发一环境搭建/image-2-c01e335af8aa7df297d410e301476c8e-6bfc6e-1610093103.png","post":"clec9eh0r0001dgl4awqpgant","slug":"image-2-c01e335af8aa7df297d410e301476c8e-6bfc6e-1610093103.png","modified":1,"renderable":1},{"_id":"source/_posts/early/springbootweb项目开发一环境搭建/image-3-a14b40a6b746c315bd60a322a18f30d8-e798c4-1610093115.png","post":"clec9eh0r0001dgl4awqpgant","slug":"image-3-a14b40a6b746c315bd60a322a18f30d8-e798c4-1610093115.png","modified":1,"renderable":1},{"_id":"source/_posts/early/springbootweb项目开发一环境搭建/image-4-bb52f36d371102cd655b6af50120313b-ec34aa-1610093175.png","post":"clec9eh0r0001dgl4awqpgant","slug":"image-4-bb52f36d371102cd655b6af50120313b-ec34aa-1610093175.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"clec91d2f0009v0l46irz7huv","category_id":"clec91d280003v0l42ri36a3r","_id":"clec91d2l000gv0l47lw302vh"},{"post_id":"clec91d270002v0l4ffn62v3a","category_id":"clec91d280003v0l42ri36a3r","_id":"clec91d2n000jv0l4h0kxbc44"},{"post_id":"clec91d2m000iv0l4b8yd7td4","category_id":"clec91d280003v0l42ri36a3r","_id":"clec91d2r000sv0l4b97lexzq"},{"post_id":"clec91d2m000iv0l4b8yd7td4","category_id":"clec91d2l000hv0l4001ydx8t","_id":"clec91d2s000wv0l4097e9b1y"},{"post_id":"clec91d2c0006v0l463ug0gxn","category_id":"clec91d280003v0l42ri36a3r","_id":"clec91d2t0010v0l4ha6z9myj"},{"post_id":"clec91d2c0006v0l463ug0gxn","category_id":"clec91d2l000hv0l4001ydx8t","_id":"clec91d2u0014v0l4diea24xw"},{"post_id":"clec91d240001v0l4gu5l0izv","category_id":"clec91d280003v0l42ri36a3r","_id":"clec91d2v0018v0l472oab936"},{"post_id":"clec91d240001v0l4gu5l0izv","category_id":"clec91d2o000nv0l4g0zt002n","_id":"clec91d2x001cv0l43ujycl52"},{"post_id":"clec91d2d0007v0l475la4nt0","category_id":"clec91d280003v0l42ri36a3r","_id":"clec91d2y001fv0l42sgqbwgj"},{"post_id":"clec91d2d0007v0l475la4nt0","category_id":"clec91d2l000hv0l4001ydx8t","_id":"clec91d2z001iv0l494n906an"},{"post_id":"clec91d2i000dv0l4dbit1x4b","category_id":"clec91d280003v0l42ri36a3r","_id":"clec91d30001rv0l40w568pdv"},{"post_id":"clec91d2i000dv0l4dbit1x4b","category_id":"clec91d2v001av0l43auydbem","_id":"clec91d31001uv0l45qju5xk4"},{"post_id":"clec91d2k000fv0l47uoygpcz","category_id":"clec91d280003v0l42ri36a3r","_id":"clec91d320020v0l47hry46mz"},{"post_id":"clec91d2k000fv0l47uoygpcz","category_id":"clec91d2t0011v0l48w1xda2o","_id":"clec91d320022v0l42k8o458u"},{"post_id":"clec91d2o000lv0l40to09ppn","category_id":"clec91d31001tv0l4e1b74cmx","_id":"clec91d330026v0l4f4a0fvg3"},{"post_id":"clec91d2q000rv0l4c9rvhhjy","category_id":"clec91d280003v0l42ri36a3r","_id":"clec91d34002cv0l4gmgody1m"},{"post_id":"clec91d2q000rv0l4c9rvhhjy","category_id":"clec91d320023v0l47jln2hb8","_id":"clec91d34002fv0l4evmu9klx"},{"post_id":"clec91d2t0013v0l4hffw5sds","category_id":"clec91d280003v0l42ri36a3r","_id":"clec91d35002mv0l47jau1yig"},{"post_id":"clec91d2t0013v0l4hffw5sds","category_id":"clec91d330028v0l44jqm35ur","_id":"clec91d36002qv0l4alv49z87"},{"post_id":"clec91d2u0017v0l488s8b1bf","category_id":"clec91d34002gv0l40331c1mh","_id":"clec91d36002tv0l4dilrh2nd"},{"post_id":"clec91d2v001bv0l437jxf8av","category_id":"clec91d280003v0l42ri36a3r","_id":"clec91d37002xv0l493pi9d0c"},{"post_id":"clec91d2v001bv0l437jxf8av","category_id":"clec91d320023v0l47jln2hb8","_id":"clec91d370030v0l4355kbr77"},{"post_id":"clec91d2x001ev0l446ez83qx","category_id":"clec91d36002sv0l4f9tm2ruo","_id":"clec91d380032v0l44la0gowb"},{"post_id":"clec91d2p000ov0l4ey2kcgtb","category_id":"clec91d31001yv0l47983c797","_id":"clec91d380036v0l4fjhjah6e"},{"post_id":"clec91d2p000ov0l4ey2kcgtb","category_id":"clec91d37002yv0l40o5l4fiy","_id":"clec91d380038v0l43srnd29s"},{"post_id":"clec93if700000sl43qvg1klq","category_id":"clec91d280003v0l42ri36a3r","_id":"clec93ifa00030sl49rnc7pu4"},{"post_id":"clec93if700000sl43qvg1klq","category_id":"clec91d330028v0l44jqm35ur","_id":"clec93ifa00050sl49j3n02hb"},{"post_id":"clec9eh0o0000dgl4g14tbq4o","category_id":"clec91d280003v0l42ri36a3r","_id":"clec9eh0s0004dgl461t91kw8"},{"post_id":"clec9eh0o0000dgl4g14tbq4o","category_id":"clec91d2l000hv0l4001ydx8t","_id":"clec9eh0t0006dgl457ejdx93"},{"post_id":"clec9eh0r0001dgl4awqpgant","category_id":"clec91d280003v0l42ri36a3r","_id":"clec9eh0t0008dgl4d8lpcki2"},{"post_id":"clec9eh0r0001dgl4awqpgant","category_id":"clec91d2t0011v0l48w1xda2o","_id":"clec9eh0t000adgl43inv01zq"}],"PostTag":[{"post_id":"clec91d270002v0l4ffn62v3a","tag_id":"clec91d2b0005v0l47n367cfz","_id":"clec91d2o000mv0l49g669132"},{"post_id":"clec91d270002v0l4ffn62v3a","tag_id":"clec91d2g000av0l45f0j0qo8","_id":"clec91d2p000pv0l4a66teoiy"},{"post_id":"clec91d270002v0l4ffn62v3a","tag_id":"clec91d2k000ev0l4dqnc79ws","_id":"clec91d2r000tv0l4ahe70cfc"},{"post_id":"clec91d2q000rv0l4c9rvhhjy","tag_id":"clec91d2g000av0l45f0j0qo8","_id":"clec91d2s000xv0l43lracxyk"},{"post_id":"clec91d2q000rv0l4c9rvhhjy","tag_id":"clec91d2k000ev0l4dqnc79ws","_id":"clec91d2t0012v0l41b6p4bd8"},{"post_id":"clec91d2v001bv0l437jxf8av","tag_id":"clec91d2g000av0l45f0j0qo8","_id":"clec91d2y001gv0l48n2ahq89"},{"post_id":"clec91d2v001bv0l437jxf8av","tag_id":"clec91d2k000ev0l4dqnc79ws","_id":"clec91d2z001jv0l4cc1k7u71"},{"post_id":"clec91d2c0006v0l463ug0gxn","tag_id":"clec91d2g000av0l45f0j0qo8","_id":"clec91d2z001mv0l4bquz7oes"},{"post_id":"clec91d2c0006v0l463ug0gxn","tag_id":"clec91d2k000ev0l4dqnc79ws","_id":"clec91d30001pv0l4c2teg60p"},{"post_id":"clec91d2c0006v0l463ug0gxn","tag_id":"clec91d2x001dv0l45uqnbv5j","_id":"clec91d31001sv0l4cvdnd4yf"},{"post_id":"clec91d2d0007v0l475la4nt0","tag_id":"clec91d2g000av0l45f0j0qo8","_id":"clec91d320021v0l4bog1a4kd"},{"post_id":"clec91d2d0007v0l475la4nt0","tag_id":"clec91d2k000ev0l4dqnc79ws","_id":"clec91d330024v0l43o4j5xok"},{"post_id":"clec91d2d0007v0l475la4nt0","tag_id":"clec91d2x001dv0l45uqnbv5j","_id":"clec91d330027v0l4bscvgd8r"},{"post_id":"clec91d2f0009v0l46irz7huv","tag_id":"clec91d2g000av0l45f0j0qo8","_id":"clec91d34002av0l4611fgaej"},{"post_id":"clec91d2f0009v0l46irz7huv","tag_id":"clec91d2k000ev0l4dqnc79ws","_id":"clec91d34002bv0l488kpblsd"},{"post_id":"clec91d2i000dv0l4dbit1x4b","tag_id":"clec91d2g000av0l45f0j0qo8","_id":"clec91d37002uv0l45495gatf"},{"post_id":"clec91d2i000dv0l4dbit1x4b","tag_id":"clec91d2k000ev0l4dqnc79ws","_id":"clec91d37002vv0l44j91a943"},{"post_id":"clec91d2i000dv0l4dbit1x4b","tag_id":"clec91d2q000qv0l4esufh7po","_id":"clec91d37002zv0l4bcm86i0u"},{"post_id":"clec91d2k000fv0l47uoygpcz","tag_id":"clec91d2g000av0l45f0j0qo8","_id":"clec91d380033v0l493otgqw6"},{"post_id":"clec91d2k000fv0l47uoygpcz","tag_id":"clec91d330029v0l4eghdauhv","_id":"clec91d380034v0l4hdnj5ats"},{"post_id":"clec91d2k000fv0l47uoygpcz","tag_id":"clec91d2q000qv0l4esufh7po","_id":"clec91d380037v0l42h94a8yw"},{"post_id":"clec91d2m000iv0l4b8yd7td4","tag_id":"clec91d2g000av0l45f0j0qo8","_id":"clec91d380039v0l48tnmgs1h"},{"post_id":"clec91d2m000iv0l4b8yd7td4","tag_id":"clec91d2k000ev0l4dqnc79ws","_id":"clec91d39003bv0l4fx634f67"},{"post_id":"clec91d2m000iv0l4b8yd7td4","tag_id":"clec91d2x001dv0l45uqnbv5j","_id":"clec91d39003cv0l48mmkho8b"},{"post_id":"clec91d2p000ov0l4ey2kcgtb","tag_id":"clec91d2g000av0l45f0j0qo8","_id":"clec91d39003ev0l45jly1wje"},{"post_id":"clec91d2p000ov0l4ey2kcgtb","tag_id":"clec91d2k000ev0l4dqnc79ws","_id":"clec91d39003fv0l461zbbv3o"},{"post_id":"clec91d2p000ov0l4ey2kcgtb","tag_id":"clec91d380035v0l4horhcqi9","_id":"clec91d39003hv0l4fbaw1tt9"},{"post_id":"clec91d2t0013v0l4hffw5sds","tag_id":"clec91d2g000av0l45f0j0qo8","_id":"clec91d3a003ov0l437rzhe1i"},{"post_id":"clec91d2t0013v0l4hffw5sds","tag_id":"clec91d2k000ev0l4dqnc79ws","_id":"clec91d3a003pv0l4d5q6f1py"},{"post_id":"clec91d2t0013v0l4hffw5sds","tag_id":"clec91d380035v0l4horhcqi9","_id":"clec91d3a003rv0l412dahgiw"},{"post_id":"clec91d2u0017v0l488s8b1bf","tag_id":"clec91d39003gv0l43n9ef2a6","_id":"clec91d3a003sv0l4dkai2915"},{"post_id":"clec91d2u0017v0l488s8b1bf","tag_id":"clec91d39003jv0l4f4j0hbnd","_id":"clec91d3b003uv0l43psr2wnv"},{"post_id":"clec91d2u0017v0l488s8b1bf","tag_id":"clec91d3a003mv0l41o35eps0","_id":"clec91d3b003vv0l49j8z18b1"},{"post_id":"clec91d2x001ev0l446ez83qx","tag_id":"clec91d2q000qv0l4esufh7po","_id":"clec91d3b003yv0l4bu6w52f3"},{"post_id":"clec91d2x001ev0l446ez83qx","tag_id":"clec91d3a003qv0l40f4b370n","_id":"clec91d3c003zv0l416690lq5"},{"post_id":"clec91d2x001ev0l446ez83qx","tag_id":"clec91d3a003tv0l459gda74i","_id":"clec91d3c0040v0l4ab7i1ihp"},{"post_id":"clec91d2x001ev0l446ez83qx","tag_id":"clec91d3b003wv0l4d0q47c2e","_id":"clec91d3c0041v0l4d34gduqh"},{"post_id":"clec91d2x001ev0l446ez83qx","tag_id":"clec91d3b003xv0l40sm26cjy","_id":"clec91d3c0042v0l47zvd3flp"},{"post_id":"clec91d3e0043v0l47sct5g4o","tag_id":"clec91d2g000av0l45f0j0qo8","_id":"clec91d3e0044v0l494y6bbpa"},{"post_id":"clec91d3e0043v0l47sct5g4o","tag_id":"clec91d2q000qv0l4esufh7po","_id":"clec91d3e0045v0l4ez7xc880"},{"post_id":"clec93if700000sl43qvg1klq","tag_id":"clec91d2b0005v0l47n367cfz","_id":"clec93ifa00010sl4hvop26cb"},{"post_id":"clec93if700000sl43qvg1klq","tag_id":"clec91d2g000av0l45f0j0qo8","_id":"clec93ifa00020sl43refddlj"},{"post_id":"clec93if700000sl43qvg1klq","tag_id":"clec91d2k000ev0l4dqnc79ws","_id":"clec93ifa00040sl4fs3k6280"},{"post_id":"clec93if700000sl43qvg1klq","tag_id":"clec91d380035v0l4horhcqi9","_id":"clec93ifa00060sl45bds1i42"},{"post_id":"clec9eh0o0000dgl4g14tbq4o","tag_id":"clec91d2g000av0l45f0j0qo8","_id":"clec9eh0s0002dgl4ah5a1bft"},{"post_id":"clec9eh0o0000dgl4g14tbq4o","tag_id":"clec91d2q000qv0l4esufh7po","_id":"clec9eh0s0003dgl4flue6y02"},{"post_id":"clec9eh0r0001dgl4awqpgant","tag_id":"clec91d2g000av0l45f0j0qo8","_id":"clec9eh0t0005dgl4e3iv8ttb"},{"post_id":"clec9eh0r0001dgl4awqpgant","tag_id":"clec91d330029v0l4eghdauhv","_id":"clec9eh0t0007dgl4a1wj0knp"},{"post_id":"clec9eh0r0001dgl4awqpgant","tag_id":"clec91d2q000qv0l4esufh7po","_id":"clec9eh0t0009dgl41ccb04ds"}],"Tag":[{"name":"cpp","_id":"clec91d2b0005v0l47n367cfz"},{"name":"程序","_id":"clec91d2g000av0l45f0j0qo8"},{"name":"代码","_id":"clec91d2k000ev0l4dqnc79ws"},{"name":"Web","_id":"clec91d2q000qv0l4esufh7po"},{"name":"Sql","_id":"clec91d2x001dv0l45uqnbv5j"},{"name":"Spring","_id":"clec91d330029v0l4eghdauhv"},{"name":"数据结构","_id":"clec91d380035v0l4horhcqi9"},{"name":"算法","_id":"clec91d39003gv0l43n9ef2a6"},{"name":"编码","_id":"clec91d39003jv0l4f4j0hbnd"},{"name":"Base64","_id":"clec91d3a003mv0l41o35eps0"},{"name":"Session","_id":"clec91d3a003qv0l40f4b370n"},{"name":"Cookie","_id":"clec91d3a003tv0l459gda74i"},{"name":"信息安全","_id":"clec91d3b003wv0l4d0q47c2e"},{"name":"认证","_id":"clec91d3b003xv0l40sm26cjy"}]}}